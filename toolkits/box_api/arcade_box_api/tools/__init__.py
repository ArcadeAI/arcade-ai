"""API Wrapper Tools for Box

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED BY TRANSPILING THE API WRAPPER TOOL JSON DEFINITIONS
IN THE ../wrapper_tools DIRECTORY INTO PYTHON CODE. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Annotated, Any

import httpx
from arcade_tdk import ToolContext, tool
from arcade_tdk.auth import OAuth2


def remove_none_values(data: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in data.items() if v is not None}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def list_box_doc_templates(
    context: ToolContext,
    version_header: Annotated[
        str, "Specifies the version of the Box API to use. Currently, only '2025.0' is supported."
    ],
    pagination_start_marker: Annotated[
        str | None,
        "Defines the starting position for pagination of results. Requires `usemarker` to be set to `true`.",  # noqa: E501
    ] = None,
    max_items_per_page: Annotated[
        int | None,
        "Specify the maximum number of Box Doc Gen templates to return in a single page.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_docgen_templates_v2025.0'."]:
    """Retrieve Box Doc Gen templates the user collaborates on.

    Fetches a list of Box Doc Gen templates where the user is a collaborator. Useful for managing or accessing document templates in Box."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_templates",
            params=remove_none_values({
                "marker": pagination_start_marker,
                "limit": max_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def unmark_box_doc_template(
    context: ToolContext,
    file_id_to_unmark: Annotated[
        str, "The ID of the file that will no longer be marked as a Box Doc Gen template."
    ],
    api_version_header: Annotated[
        str, "Specifies the version of the API to use. The only accepted value is '2025.0'."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete_docgen_templates_id_v2025.0'."
]:
    """Unmarks a file as a Box Doc Gen template.

    This tool should be called to remove the designation of a Box file as a Doc Gen template. It confirms whether the unmarking was successful."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_templates/{template_id}".format(  # noqa: UP032
                template_id=file_id_to_unmark
            ),
            method="DELETE",
            headers=remove_none_values({
                "box-version": api_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_box_docgen_template_details(
    context: ToolContext,
    box_docgen_template_id: Annotated[
        str, "The ID of the Box Doc Gen template to retrieve details for."
    ],
    api_version_header: Annotated[str, "Specifies the API version, use '2025.0' for this request."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_docgen_templates_id_v2025.0'."]:
    """Fetch details of a specific Box Doc Gen template.

    Call this tool to retrieve detailed information about a specific template from Box Doc Gen using its template ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_templates/{template_id}".format(  # noqa: UP032
                template_id=box_docgen_template_id
            ),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def list_box_docgen_template_tags(
    context: ToolContext,
    template_id: Annotated[
        str, "The unique identifier for the Box Doc Gen template whose tags you want to retrieve."
    ],
    version_header: Annotated[str, "Specifies the API version to use, currently set to '2025.0'."],
    template_version_id: Annotated[
        str | None, "The ID of the specific version of the template to retrieve tags from."
    ] = None,
    pagination_start_marker: Annotated[
        str | None,
        "Defines the starting position for results when using marker-based pagination. Must have `usemarker` set to `true`.",  # noqa: E501
    ] = None,
    maximum_items_per_page: Annotated[
        int | None,
        "Specifies the maximum number of tags to return per page from the Box Doc Gen template.",
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get_docgen_templates_id_tags_v2025.0'."
]:
    """Retrieve tags from a specific Box Doc Gen template.

    Call this tool to list all tags used in a specific Box Doc Gen template. Use it when you need to access or manage the tags associated with a given template."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_templates/{template_id}/tags".format(  # noqa: UP032
                template_id=template_id
            ),
            params=remove_none_values({
                "template_version_id": template_version_id,
                "marker": pagination_start_marker,
                "limit": maximum_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_box_docgen_job_details(
    context: ToolContext,
    box_doc_gen_job_id: Annotated[
        str, "The unique identifier for the Box Doc Gen job you want details for."
    ],
    api_version_header: Annotated[str, "The version header for the API request, must be '2025.0'."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_docgen_jobs_id_v2025.0'."]:
    """Retrieve details of a Box Doc Gen job using its ID.

    This tool fetches detailed information about a specific Box Doc Gen job, identified by its job ID. It should be called when details about a particular document generation task in Box are needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_jobs/{job_id}".format(job_id=box_doc_gen_job_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "box-version": api_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def list_box_docgen_jobs(
    context: ToolContext,
    api_version: Annotated[
        str, "Specifies the API version to use for the request, default is '2025.0'."
    ],
    pagination_marker: Annotated[
        str | None,
        "Starting position marker for paginating results. Requires 'usemarker' set to true.",
    ] = None,
    maximum_items_per_page: Annotated[
        int | None,
        "The maximum number of items to return per page. Specify an integer value to set the limit for pagination.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_docgen_jobs_v2025.0'."]:
    """Retrieves a list of Box Doc Gen jobs for a user.

    Use this tool to get all the Box Doc Gen job details associated with a user."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_jobs",
            params=remove_none_values({
                "marker": pagination_marker,
                "limit": maximum_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def list_template_jobs(
    context: ToolContext,
    template_identifier: Annotated[
        str, "The unique ID of the template for which jobs need to be retrieved."
    ],
    box_version_header: Annotated[
        str, "Specifies the API version header, currently only '2025.0' is supported."
    ],
    pagination_start_marker: Annotated[
        str | None,
        "Defines the starting position for pagination. Requires 'usemarker' to be set to true.",
    ] = None,
    max_items_per_page: Annotated[
        int | None, "The maximum number of items to return per page from the list of jobs."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get_docgen_template_jobs_id_v2025.0'."
]:
    """Retrieve jobs associated with a specific document template.

    Use this tool to get a list of all user jobs linked to a particular document generation template by providing the template ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_template_jobs/{template_id}".format(  # noqa: UP032
                template_id=template_identifier
            ),
            params=remove_none_values({
                "marker": pagination_start_marker,
                "limit": max_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": box_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def list_docgen_batch_jobs(
    context: ToolContext,
    box_doc_gen_batch_id: Annotated[
        str, "The identifier for a Box Doc Gen batch used to retrieve specific job details."
    ],
    api_version: Annotated[
        str, "Specifies the version of the Box API to use, currently only '2025.0' is accepted."
    ],
    pagination_marker: Annotated[
        str | None,
        "The position marker to start returning results. Use for marker-based pagination. Requires `usemarker` set to `true`.",  # noqa: E501
    ] = None,
    maximum_items_per_page: Annotated[
        int | None,
        "The maximum number of items to return per page when retrieving Box Doc Gen jobs.",
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get_docgen_batch_jobs_id_v2025.0'."
]:
    """Retrieve details of Box Doc Gen jobs in a batch.

    Use this tool to get a list of Box Doc Gen jobs contained within a specific batch using the batch ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/docgen_batch_jobs/{batch_id}".format(  # noqa: UP032
                batch_id=box_doc_gen_batch_id
            ),
            params=remove_none_values({
                "marker": pagination_marker,
                "limit": maximum_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_box_hubs(
    context: ToolContext,
    api_version: Annotated[str, "The API version to use for the request, fixed to '2025.0'."],
    hub_search_query: Annotated[
        str | None,
        "The string to search for specific Box Hubs. Use keywords to refine search results.",
    ] = None,
    hub_scope: Annotated[
        str | None,
        "Specifies which Box Hubs to retrieve. Options: `editable`, `view_only`, `all`. Default is `all`.",  # noqa: E501
    ] = None,
    sort_results_by: Annotated[
        str | None,
        "Field to sort Box Hubs by: `name`, `updated_at`, `last_accessed_at`, `view_count`, `relevance` (default: `relevance`).",  # noqa: E501
    ] = None,
    sort_direction: Annotated[
        str | None, "Specify the sort order: 'ASC' for ascending or 'DESC' for descending."
    ] = None,
    pagination_start_marker: Annotated[
        str | None,
        "Defines the position marker to begin returning results, used for marker-based pagination.",
    ] = None,
    max_items_per_page: Annotated[
        int | None, "The maximum number of Box Hubs to return per page. Use for pagination control."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_hubs_v2025.0'."]:
    """Retrieve all Box Hubs for the user.

    This tool retrieves all the Box Hubs associated with the requesting user. It should be called when there's a need to list or display the user's Box Hubs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hubs",
            params=remove_none_values({
                "query": hub_search_query,
                "scope": hub_scope,
                "sort": sort_results_by,
                "direction": sort_direction,
                "marker": pagination_start_marker,
                "limit": max_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_enterprise_box_hubs(
    context: ToolContext,
    api_version: Annotated[
        str, "The version of the Box API to use. Currently, only version '2025.0' is supported."
    ],
    search_query_for_box_hubs: Annotated[
        str | None, "The search query string to find specific Box Hubs within an enterprise."
    ] = None,
    sort_results_by: Annotated[
        str | None,
        "The field to sort the Box Hubs by. Options: 'name', 'updated_at', 'last_accessed_at', 'view_count', 'relevance'. Default is 'relevance'.",  # noqa: E501
    ] = None,
    sort_direction: Annotated[
        str | None,
        "The direction to sort results: alphabetical ascending ('ASC') or descending ('DESC').",
    ] = None,
    pagination_marker: Annotated[
        str | None,
        "The starting position marker for returning results, used in marker-based pagination.",
    ] = None,
    max_items_per_page: Annotated[
        int | None,
        "The maximum number of Box Hubs to return per page. This controls the page size for the result set.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_enterprise_hubs_v2025.0'."]:
    """Retrieve Box Hubs for an enterprise.

    This tool retrieves all Box Hubs for a specified enterprise. It should be used by admins or Hub Co-admins with GCM scope to get information about the enterprise's Box Hubs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/enterprise_hubs",
            params=remove_none_values({
                "query": search_query_for_box_hubs,
                "sort": sort_results_by,
                "direction": sort_direction,
                "marker": pagination_marker,
                "limit": max_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def retrieve_box_hub_details(
    context: ToolContext,
    box_hub_identifier: Annotated[
        str, "The unique ID representing a Box Hub, found in the URL when visiting the hub."
    ],
    api_version: Annotated[
        str, "The version header to specify the API version. Currently, only '2025.0' is supported."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_hubs_id_v2025.0'."]:
    """Fetch Box Hub details using its ID.

    Use this tool to obtain detailed information about a specific Box Hub by providing its unique identifier."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hubs/{hub_id}".format(hub_id=box_hub_identifier),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def delete_box_hub(
    context: ToolContext,
    box_hub_unique_id: Annotated[
        str, "The unique identifier for a Box Hub, obtainable from the hub's URL."
    ],
    box_version: Annotated[str, "The API version to use for the request, must be '2025.0'."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete_hubs_id_v2025.0'."]:
    """Delete a specific Box Hub using its ID.

    This tool is used to delete a specific Box Hub by providing its unique hub ID. It should be called when a user wants to remove a particular hub from the Box service."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hubs/{hub_id}".format(hub_id=box_hub_unique_id),  # noqa: UP032
            method="DELETE",
            headers=remove_none_values({
                "box-version": box_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def retrieve_box_hub_collaborations(
    context: ToolContext,
    hub_identifier: Annotated[
        str, "The unique string identifier for a Box Hub, found in the Hub's URL."
    ],
    api_version: Annotated[str, "Specifies the version of the API to use, default is '2025.0'."],
    pagination_marker: Annotated[
        str | None,
        "The position marker to begin returning results, used for marker-based pagination. Ensure `usemarker` is set to `true`.",  # noqa: E501
    ] = None,
    max_items_per_page: Annotated[
        int | None,
        "The maximum number of collaboration items to return per page. Determines the page size for results.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_hub_collaborations_v2025.0'."]:
    """Retrieves collaborations for a Box Hub.

    This tool fetches all the collaborations associated with a given Box Hub. It should be called when there is a need to access or review the collaborative associations within a Box Hub."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hub_collaborations",
            params=remove_none_values({
                "hub_id": hub_identifier,
                "marker": pagination_marker,
                "limit": max_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_box_hub_collaboration_details(
    context: ToolContext,
    hub_collaboration_id: Annotated[
        str,
        "The unique identifier for the specific Box Hub collaboration you want to retrieve details for.",  # noqa: E501
    ],
    api_version: Annotated[str, "The version of the API to use, specifically '2025.0'."],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get_hub_collaborations_id_v2025.0'."
]:
    """Retrieve details for a Box Hub collaboration by ID.

    Use this tool to obtain information about a specific Box Hub collaboration by providing the collaboration ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hub_collaborations/{hub_collaboration_id}".format(  # noqa: UP032
                hub_collaboration_id=hub_collaboration_id
            ),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def delete_box_hub_collaboration(
    context: ToolContext,
    hub_collaboration_identifier: Annotated[
        str, "The unique identifier for the Box Hub collaboration to be deleted."
    ],
    api_version: Annotated[
        str, "The version of the API to use. Currently, only '2025.0' is supported."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete_hub_collaborations_id_v2025.0'."
]:
    """Remove a specific Box Hub collaboration.

    Use this tool to delete a specific collaboration from a Box Hub by providing the collaboration ID. It should be called when you need to remove a user's collaboration access."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hub_collaborations/{hub_collaboration_id}".format(  # noqa: UP032
                hub_collaboration_id=hub_collaboration_identifier
            ),
            method="DELETE",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def retrieve_box_hub_items(
    context: ToolContext,
    hub_identifier: Annotated[
        str, "The unique ID representing a Box Hub, retrievable from the hub's URL."
    ],
    box_version: Annotated[str, "Specifies the API version to use. It should be set to '2025.0'."],
    pagination_start_marker: Annotated[
        str | None,
        "Defines the starting position for results when using marker-based pagination. Requires `usemarker` to be `true`.",  # noqa: E501
    ] = None,
    maximum_items_per_page: Annotated[
        int | None,
        "The maximum number of items to return per page from a Box Hub. Specify an integer value to limit the number of items in each result set.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_hub_items_v2025.0'."]:
    """Fetch all items from a specified Box Hub.

    Use this tool to retrieve all items associated with a particular Box Hub. This is useful for accessing and managing the contents of a hub."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/hub_items",
            params=remove_none_values({
                "hub_id": hub_identifier,
                "marker": pagination_start_marker,
                "limit": maximum_items_per_page,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": box_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def get_enterprise_shield_lists(
    context: ToolContext,
    api_version: Annotated[str, "Specifies the version of the API to use, such as '2025.0'."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_shield_lists_v2025.0'."]:
    """Retrieve all shield lists for the enterprise.

    This tool retrieves all security shield lists available within an enterprise, providing information on the protection settings implemented."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/shield_lists",
            method="GET",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def retrieve_shield_list_by_id(
    context: ToolContext,
    shield_list_identifier: Annotated[
        str,
        "The unique identifier for a shield list. Retrieve this ID by calling the endpoint that lists all shield lists for your enterprise.",  # noqa: E501
    ],
    api_version_header: Annotated[
        str, "Version header for the API. Use '2025.0' as the required version."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_shield_lists_id_v2025.0'."]:
    """Retrieve details of a specific shield list by ID.

    Use this tool to get information about a shield list using its unique ID. It's called to access details of specific shield lists when needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/shield_lists/{shield_list_id}".format(  # noqa: UP032
                shield_list_id=shield_list_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def delete_shield_list_by_id(
    context: ToolContext,
    shield_list_id: Annotated[
        str,
        "The unique identifier for the shield list to be deleted. Obtainable from the response of fetching all shield lists for the enterprise.",  # noqa: E501
    ],
    api_version: Annotated[
        str, "The version of the API to use. Currently, only '2025.0' is supported."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete_shield_lists_id_v2025.0'."]:
    """Delete a shield list using its ID.

    Use this tool to delete a specific shield list by providing its ID. Ideal for managing and updating list configurations when a list is no longer needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/shield_lists/{shield_list_id}".format(  # noqa: UP032
                shield_list_id=shield_list_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def retrieve_enterprise_archives(
    context: ToolContext,
    api_version_header: Annotated[
        str, "Specifies the API version to use for the request. Use '2025.0' as the version."
    ],
    max_items_per_page: Annotated[
        int | None, "The maximum number of archive items to return per page when retrieving data."
    ] = None,
    pagination_start_marker: Annotated[
        str | None,
        "Defines the position marker to start returning results for pagination in archive retrieval.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get_archives_v2025.0'."]:
    """Retrieve archives for an enterprise from Box.

    This tool retrieves archives for an enterprise using Box's API. It should be called when information about stored archives is needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/archives",
            params=remove_none_values({
                "limit": max_items_per_page,
                "marker": pagination_start_marker,
            }),
            method="GET",
            headers=remove_none_values({
                "box-version": api_version_header,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-box"))
async def delete_archive(
    context: ToolContext,
    archive_id: Annotated[
        str,
        "The unique identifier of the archive to be permanently deleted. This ID is required for the deletion process.",  # noqa: E501
    ],
    api_version: Annotated[str, "The API version to use, currently required to be '2025.0'."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete_archives_id_v2025.0'."]:
    """Permanently delete an archive by ID.

    Use this tool to permanently delete an archive using its unique ID. This action cannot be undone."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.box.com/2.0/archives/{archive_id}".format(archive_id=archive_id),  # noqa: UP032
            method="DELETE",
            headers=remove_none_values({
                "box-version": api_version,
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}
