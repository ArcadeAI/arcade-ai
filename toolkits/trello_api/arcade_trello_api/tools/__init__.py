"""Arcade Starter Tools for Trello

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED BY TRANSPILING THE API WRAPPER TOOL JSON DEFINITIONS
IN THE ../wrapper_tools DIRECTORY INTO PYTHON CODE. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Annotated, Any

import httpx
from arcade_tdk import ToolContext, tool


def remove_none_values(data: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in data.items() if v is not None}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_action(
    context: ToolContext,
    action_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of action fields to retrieve details. Refer to Trello's action object documentation for valid fields.",  # noqa: E501
    ] = None,
    member_fields_list: Annotated[
        str | None, "Specify 'all' or a comma-separated list of member fields to retrieve."
    ] = None,
    include_member_creator_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of member fields to include for the action creator.",  # noqa: E501
    ] = None,
    include_display: Annotated[
        bool | None, "Set to true to include display information in the response."
    ] = None,
    include_entities: Annotated[
        bool | None, "Set to true to include the entities related to the action in the response."
    ] = None,
    include_member_object: Annotated[
        bool | None,
        "Specify whether to include the member object for the action. Use `true` to include or `false` to exclude.",  # noqa: E501
    ] = None,
    include_member_creator: Annotated[
        bool | None,
        "Set to true to include the member object for the creator of the action, false to exclude.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id'."]:
    """Retrieve details of a specific Trello action.

    Use this tool to obtain information about a particular action in Trello by providing its unique ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}",
            params=remove_none_values({
                "display": include_display,
                "entities": include_entities,
                "fields": action_fields,
                "member": include_member_object,
                "member_fields": member_fields_list,
                "memberCreator": include_member_creator,
                "memberCreator_fields": include_member_creator_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def edit_trello_comment_action(
    context: ToolContext,
    new_comment_text: Annotated[
        str,
        "The updated content for the Trello comment action. Must be a string representing the new text for the comment.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-actions-id'."]:
    """Edit the content of a Trello comment action.

    This tool updates a specific comment action in Trello, allowing the user to edit the content of the comment. It should be called when there is a need to change the text of an existing comment action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}",
            params=remove_none_values({
                "text": new_comment_text,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_comment_action(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-actions-id'."]:
    """Delete a specific comment action on Trello.

    Use this tool to delete a specific comment action on Trello by providing the action ID. This tool is applicable only for comment actions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_action_property(
    context: ToolContext,
    action_id: Annotated[
        str, "The unique identifier for the Trello action you want to retrieve a property from."
    ],
    action_field_to_retrieve: Annotated[
        str,
        "The specific field of the Trello action you want to retrieve. Options include: id, idMemberCreator, data, type, date, limits, display, memberCreator.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-field'."]:
    """Retrieve a specific property of a Trello action.

    Use this tool to obtain a particular property from a Trello action, identified by its ID. Ideal for accessing specific details related to a Trello board action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/{field}".format(  # noqa: UP032
                id=action_id, field=action_field_to_retrieve
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_action_board(
    context: ToolContext,
    action_id: Annotated[
        str, "The unique identifier of the Trello action to retrieve board details for."
    ],
    board_fields: Annotated[
        str | None,
        "Specify 'all' to retrieve all board fields or provide a comma-separated list of specific board fields such as 'id', 'name', 'desc', etc.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-board'."]:
    """Retrieve the board details for a specific Trello action.

    Use this tool to obtain the board details associated with a particular action on Trello. It should be called when you need to know which board an action belongs to."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/board".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": board_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_for_action(
    context: ToolContext,
    action_id: Annotated[
        str, "The unique identifier for the Trello action whose card details you want to retrieve."
    ],
    card_fields: Annotated[
        str | None,
        "Specify `all` to retrieve all fields or provide a comma-separated list of specific card fields to include in the response.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-card'."]:
    """Retrieve the Trello card linked to a specific action.

    This tool fetches the details of a Trello card associated with a given action ID. Use it to access information about the card linked to a specific activity in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/card".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": card_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_action_list(
    context: ToolContext,
    action_id: Annotated[
        str,
        "The unique identifier for the Trello action. Use this to fetch the associated list details.",  # noqa: E501
    ],
    list_fields: Annotated[
        str | None,
        "Specify `all` to get all fields or provide a comma-separated list of specific list fields to retrieve.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-list'."]:
    """Retrieve the list associated with a specific Trello action.

    This tool fetches details about the list linked to a specific action in Trello. Use it when you need to understand which list a particular Trello action is affecting or associated with."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/list".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": list_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_of_action(
    context: ToolContext,
    action_id: Annotated[str, "The ID of the Trello action to retrieve the member details for."],
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to retrieve. Use 'id' for member ID.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-member'."]:
    """Retrieve member details for a given action.

    This tool retrieves the details of the member associated with a specified Trello action, excluding the creator. It is useful for identifying which member is linked to a particular action on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/member".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_action_creator(
    context: ToolContext,
    action_id: Annotated[
        str,
        "The unique identifier of the Trello action to retrieve the member creator information.",
    ],
    member_fields: Annotated[
        str | None,
        "Specify 'all' to retrieve all fields or provide a comma-separated list of specific member fields to retrieve.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-membercreator'."]:
    """Retrieve the creator of a specific Trello action.

    This tool calls the Trello API to obtain details about the member who created a specific action, identified by its ID. It should be used when you need to find out who initiated a particular action on a Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/memberCreator".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_organization_of_action(
    context: ToolContext,
    action_id: Annotated[
        str, "The unique identifier of the action whose organization details are being retrieved."
    ],
    organization_fields: Annotated[
        str | None,
        "Specify '`all`' to retrieve all fields or provide a comma-separated list (e.g., 'id,name') of specific organization fields to retrieve.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-id-organization'."]:
    """Retrieve organization details of a specific action on Trello.

    This tool retrieves the organization information associated with a specified action in Trello. It should be called when detailed information about the organization linked to a particular action is needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/organization".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "fields": organization_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_car_comment(
    context: ToolContext,
    new_comment_text: Annotated[
        str,
        "The updated text for the Trello comment. Specify the new text content for the existing comment.",  # noqa: E501
    ],
    action_id: Annotated[
        str, "The unique identifier for the Trello comment action that needs to be updated."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-actions-id-text'."]:
    """Update a comment on a Trello card.

    Use this tool to update the text of an existing comment on a Trello card by specifying the comment ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{id}/text".format(id=action_id),  # noqa: UP032
            params=remove_none_values({
                "value": new_comment_text,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_trello_action_reactions(
    context: ToolContext,
    load_member_nested_resource: Annotated[
        bool | None,
        "Set to true to load the member as a nested resource. See [Members Nested Resource](/cloud/trello/guides/rest-api/nested-resources/#members-nested-resource) for details.",  # noqa: E501
    ] = None,
    load_emoji_as_nested_resource: Annotated[
        bool | None, "Set to true to load emoji as a nested resource."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-actions-idaction-reactions'."]:
    """Retrieve reactions for a Trello action.

    Use this tool to obtain a list of reactions associated with a specific action on Trello. It should be called when you need to see how users have reacted to an action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{idAction}/reactions",
            params=remove_none_values({
                "member": load_member_nested_resource,
                "emoji": load_emoji_as_nested_resource,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_reaction_info(
    context: ToolContext,
    include_member: Annotated[
        bool | None, "Set to true to load the member as a nested resource."
    ] = None,
    load_emoji_as_nested_resource: Annotated[
        bool | None,
        "Set to true to include emoji details as a nested resource in the reaction information.",
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-actions-idaction-reactions-id'."
]:
    """Retrieve detailed information about a Trello reaction.

    Use this tool to obtain detailed information for a specific reaction associated with a Trello action. Call this tool when you need to understand more about the reaction context or details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{idAction}/reactions/{id}",
            params=remove_none_values({
                "member": include_member,
                "emoji": load_emoji_as_nested_resource,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_reaction_from_trello_action(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-actions-idaction-reactions-id'."
]:
    """Deletes a specified reaction from a Trello action.

    Use this tool to remove a specific reaction from an action in Trello. It should be called when there is a need to delete a user's reaction to a specific Trello card action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{idAction}/reactions/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_reaction_summary_for_action(
    context: ToolContext,
    action_id: Annotated[
        str, "The unique identifier for the Trello action to get the reaction summary for."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-actions-idaction-reactionsummary'."
]:
    """Retrieve a summary of reactions for a given Trello action.

    Use this tool to obtain a summarized list of all reactions associated with a specific action in Trello. It should be called when you need insights into how users are reacting to a particular action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/actions/{idAction}/reactionsSummary".format(  # noqa: UP032
                idAction=action_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_application_compliance_data(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'applications-key-compliance'."]:
    """Retrieve compliance data for a Trello application key.

    Use this tool to obtain compliance information for a specific application key in Trello. Ideal for checking compliance status and details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/applications/{key}/compliance",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_batch_requests(
    context: ToolContext,
    api_routes_list: Annotated[
        str,
        'A list of up to 10 API routes, each starting with a forward slash and excluding the API version number. Example: "/members/trello,/cards/[cardId]".',  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-batch'."]:
    """Execute multiple GET requests in a single batch call on Trello.

    This tool allows you to perform up to 10 GET requests in one API call using Trello's batch functionality. It is useful when multiple pieces of information from Trello are needed at once, minimizing the number of separate requests."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/batch",
            params=remove_none_values({
                "urls": api_routes_list,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_memberships(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier for the Trello board to retrieve membership information."
    ],
    membership_filter: Annotated[
        str | None,
        "Filter to specify which types of memberships to retrieve: 'admins', 'all', 'none', or 'normal'.",  # noqa: E501
    ] = None,
    include_member_fields: Annotated[
        str | None,
        "Specify which fields to include for the member object when `member` is set to true. Valid value: 'id'.",  # noqa: E501
    ] = None,
    include_activity: Annotated[
        bool | None,
        "Set to true to include activity information, applicable only for premium organizations.",
    ] = None,
    show_org_member_type: Annotated[
        bool | None,
        "Show the type of member each user is within the organization, such as 'admin'.",
    ] = None,
    include_nested_member_object: Annotated[
        bool | None,
        "Set to true to include a nested member object in the response. False will exclude it.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-memberships'."]:
    """Retrieve user memberships for a Trello board.

    Use this tool to get details about user memberships on a specific Trello board. It returns information on how users are associated with the board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/memberships".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "filter": membership_filter,
                "activity": include_activity,
                "orgMemberType": show_org_member_type,
                "member": include_nested_member_object,
                "member_fields": include_member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_board(
    context: ToolContext,
    include_actions: Annotated[
        str | None,
        "Specify if nested actions resource should be included in the response. Possible values: true or false.",  # noqa: E501
    ] = None,
    include_board_stars: Annotated[
        str | None,
        "Specify whether to include board stars in the response: 'mine' for starred by the user, or 'none'.",  # noqa: E501
    ] = None,
    include_cards: Annotated[
        str | None,
        "Include cards as a nested resource in the board details response. This will fetch detailed information about the cards on the board.",  # noqa: E501
    ] = None,
    include_checklists: Annotated[
        str | None,
        "Set to 'true' to include detailed checklist information in the board response. Checklists are nested resources containing additional data about board tasks.",  # noqa: E501
    ] = None,
    board_fields_to_include: Annotated[
        str | None,
        "Comma-separated board fields to include in the response: all, or a list of options such as closed, dateLastActivity, name, etc.",  # noqa: E501
    ] = None,
    include_labels: Annotated[
        str | None, "Include label information for the Trello board as a nested resource."
    ] = None,
    include_lists: Annotated[
        str | None, "Include lists as a nested resource in the board details response."
    ] = None,
    include_members_resource: Annotated[
        str | None,
        "Include detailed member information with the board details. Provides member-related data as a nested resource.",  # noqa: E501
    ] = None,
    include_memberships: Annotated[
        str | None,
        "Include memberships as a nested resource in the response. Use 'true' to include or 'false' to exclude.",  # noqa: E501
    ] = None,
    include_card_plugin_data: Annotated[
        bool | None,
        "Set to true to include card plugin data in the response. Must be used with the 'cards' parameter.",  # noqa: E501
    ] = None,
    include_custom_fields: Annotated[
        bool | None,
        "Set to true to include custom fields as a nested resource in the board details.",
    ] = None,
    include_plugin_data: Annotated[
        bool | None, "Set to true to include plugin data for the board in the response."
    ] = None,
    include_organization_resource: Annotated[
        bool | None,
        "Set to true to include the organization as a nested resource in the response. This accesses the organization's nested resource.",  # noqa: E501
    ] = None,
    include_organization_plugin_data: Annotated[
        bool | None,
        "Include organization pluginData in the response when used with the 'organization' parameter. Set to true to include.",  # noqa: E501
    ] = None,
    include_my_preferences: Annotated[
        bool | None, "Include personal preferences in the response when set to true."
    ] = None,
    include_tags: Annotated[
        bool | None,
        "Set to true to include collections (tags) that a board belongs to in the response.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id'."]:
    """Fetch detailed information for a specific Trello board.

    Use this tool to obtain information about a specific Trello board by its ID. It returns details about the board, such as its name, description, and other relevant data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}",
            params=remove_none_values({
                "actions": include_actions,
                "boardStars": include_board_stars,
                "cards": include_cards,
                "card_pluginData": include_card_plugin_data,
                "checklists": include_checklists,
                "customFields": include_custom_fields,
                "fields": board_fields_to_include,
                "labels": include_labels,
                "lists": include_lists,
                "members": include_members_resource,
                "memberships": include_memberships,
                "pluginData": include_plugin_data,
                "organization": include_organization_resource,
                "organization_pluginData": include_organization_plugin_data,
                "myPrefs": include_my_preferences,
                "tags": include_tags,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_board_by_id(
    context: ToolContext,
    new_board_name: Annotated[
        str | None, "The new name for the Trello board, between 1 to 16384 characters long."
    ] = None,
    board_description: Annotated[
        str | None, "A new description for the board. It can be 0 to 16384 characters long."
    ] = None,
    user_subscription_status: Annotated[
        str | None, "Set to 'true' if the user is subscribed to the board, otherwise 'false'."
    ] = None,
    workspace_id_to_move_board: Annotated[
        str | None, "The ID of the Workspace to which the board should be moved."
    ] = None,
    board_permission_level: Annotated[
        str | None, "The permission level for the board. Options are: org, private, or public."
    ] = None,
    invitation_permission: Annotated[
        str | None,
        "Specify who can invite people to this board. Accepted values are 'admins' or 'members'.",
    ] = None,
    voting_permission_level: Annotated[
        str | None,
        "Specify who can vote on the board. Possible values: 'disabled', 'members', 'observers', 'org', 'public'.",  # noqa: E501
    ] = None,
    comment_permission_setting: Annotated[
        str | None,
        "Specify who can comment on cards: disabled, members, observers, org, or public.",
    ] = None,
    board_background: Annotated[
        str | None,
        "The ID of a custom background or one of the following colors: blue, orange, green, red, purple, pink, lime, sky, grey.",  # noqa: E501
    ] = None,
    card_aging_preference: Annotated[
        str | None,
        "Set the card aging style on the Trello board. Options are 'pirate' or 'regular'.",
    ] = None,
    green_label_name: Annotated[
        str | None, "The name for the green label. Must be between 1 and 16384 characters."
    ] = None,
    yellow_label_name: Annotated[
        str | None,
        "The new name for the yellow label on the board. Must be between 1 and 16384 characters long.",  # noqa: E501
    ] = None,
    orange_label_name: Annotated[
        str | None,
        "The name for the orange label on the board, ranging from 1 to 16384 characters long.",
    ] = None,
    red_label_name: Annotated[
        str | None,
        "Provide a name for the red label, between 1 to 16384 characters long, to update its designation on the board.",  # noqa: E501
    ] = None,
    purple_label_name: Annotated[
        str | None, "The name for the purple label, between 1 to 16384 characters."
    ] = None,
    blue_label_name: Annotated[
        str | None,
        "Specify a new name for the blue label on the board. Must be between 1 and 16384 characters long.",  # noqa: E501
    ] = None,
    mark_board_as_closed: Annotated[
        bool | None,
        "Set to true to close the board, or false to keep it open. Accepts a boolean value.",
    ] = None,
    allow_workspace_self_join: Annotated[
        bool | None, "Set to true to allow Workspace members to join the board themselves."
    ] = None,
    display_card_covers: Annotated[
        bool | None, "Set to true to display card covers on the board, or false to hide them."
    ] = None,
    hide_voter_identities_in_voting_power_up: Annotated[
        bool | None,
        "Set to true to hide who voted on cards in the Voting Power-Up; false to show identities.",
    ] = None,
    calendar_feed_enabled: Annotated[
        bool | None,
        "Set to true to enable the calendar feed, or false to disable it for the board.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-boards-id'."]:
    """Update an existing Trello board by ID.

    Use this tool to modify details of a specific Trello board by providing its ID, such as updating its name, description, or settings."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}",
            params=remove_none_values({
                "name": new_board_name,
                "desc": board_description,
                "closed": mark_board_as_closed,
                "subscribed": user_subscription_status,
                "idOrganization": workspace_id_to_move_board,
                "prefs/permissionLevel": board_permission_level,
                "prefs/selfJoin": allow_workspace_self_join,
                "prefs/cardCovers": display_card_covers,
                "prefs/hideVotes": hide_voter_identities_in_voting_power_up,
                "prefs/invitations": invitation_permission,
                "prefs/voting": voting_permission_level,
                "prefs/comments": comment_permission_setting,
                "prefs/background": board_background,
                "prefs/cardAging": card_aging_preference,
                "prefs/calendarFeedEnabled": calendar_feed_enabled,
                "labelNames/green": green_label_name,
                "labelNames/yellow": yellow_label_name,
                "labelNames/orange": orange_label_name,
                "labelNames/red": red_label_name,
                "labelNames/purple": purple_label_name,
                "labelNames/blue": blue_label_name,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_board(
    context: ToolContext,
    board_id_to_delete: Annotated[str, "The ID of the Trello board you want to delete."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-boards-id'."]:
    """Deletes a specified board from Trello.

    Use this tool to delete a specific board from Trello by providing the board ID. It should be called when there's a need to remove a board completely from the Trello workspace."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}".format(id=board_id_to_delete),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_field(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board to retrieve the field from."
    ],
    trello_board_field_name: Annotated[
        str,
        "Specify the field name to retrieve from the Trello board. Valid values include: closed, dateLastActivity, dateLastView, desc, descData, idMemberCreator, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-field'."]:
    """Retrieve a specific field from a Trello board.

    Use this tool to obtain a specific field value from a Trello board by specifying the board's ID and the field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/{field}".format(  # noqa: UP032
                id=board_id, field=trello_board_field_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_board_star_information(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board to retrieve star information."
    ],
    star_filter: Annotated[
        str | None,
        "Specify whose board stars to retrieve: 'mine' for your stars or 'none' for no specific filter.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-boardstars'."]:
    """Retrieve information about stars on a Trello board.

    Use this tool to get details about the stars on a specific Trello board by providing the board ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{boardId}/boardStars".format(boardId=board_id),  # noqa: UP032
            params=remove_none_values({
                "filter": star_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_checklists(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board from which to retrieve checklists."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'boards-id-checklists'."]:
    """Retrieve all checklists from a Trello board.

    This tool retrieves all checklists associated with a specified Trello board. Use it to access checklist details for project management or task tracking purposes."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/checklists".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_open_cards_from_trello_board(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board from which to retrieve open cards."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-cards'."]:
    """Retrieve open cards from a specific Trello board.

    This tool fetches all open cards from a specified Trello board. It should be used when you need to access the list of tasks or items currently active on a board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/cards".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_filtered_trello_board_cards(
    context: ToolContext,
    board_id: Annotated[
        str,
        "The ID of the Trello board from which to retrieve cards. This is necessary to identify which board's cards to filter.",  # noqa: E501
    ],
    card_filter: Annotated[
        str,
        "Specify the filter for retrieving board cards. Options: 'all', 'closed', 'complete', 'incomplete', 'none', 'open', 'visible'.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-cards-filter'."]:
    """Retrieve filtered cards from a specific Trello board.

    Call this tool to get cards from a Trello board based on a specified filter. Useful for retrieving specific sets of cards like those that are complete, incomplete, or match other criteria."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/cards/{filter}".format(  # noqa: UP032
                id=board_id, filter=card_filter
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_custom_fields(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board to retrieve custom field definitions for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-customfields'."]:
    """Retrieve custom field definitions for a specific Trello board.

    This tool is used to obtain the custom field definitions available on a specified Trello board. It should be called when users need to access or manage custom fields for organizational tasks."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/customFields".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_board_label(
    context: ToolContext,
    label_name: Annotated[
        str, "The name of the label to be created, ranging from 1 to 16384 characters."
    ],
    label_color: Annotated[
        str, "Specifies the color of the new label. Use a valid label color or set as 'null'."
    ],
    board_id_to_update: Annotated[
        str, "The unique identifier of the Trello board where the new label will be added."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards-id-labels'."]:
    """Create a new label on a Trello board.

    Use this tool to add a new label to a specific Trello board. The tool should be called when you need to organize tasks by categorizing them with labels on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/labels".format(id=board_id_to_update),  # noqa: UP032
            params=remove_none_values({
                "name": label_name,
                "color": label_color,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_lists(
    context: ToolContext,
    cards_filter: Annotated[
        str | None, "Specify a card filter: 'all', 'closed', 'none', 'open'."
    ] = None,
    card_fields_list: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of desired card fields to retrieve from the board.",  # noqa: E501
    ] = None,
    list_filter: Annotated[
        str | None,
        "Filter to apply to lists on a Trello board. Options include 'all', 'closed', 'none', or 'open'.",  # noqa: E501
    ] = None,
    list_fields: Annotated[
        str | None,
        "Specify `all` to retrieve all fields or provide a comma-separated list of specific list fields to retrieve from Trello.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-lists'."]:
    """Retrieve lists from a specific Trello board.

    This tool is used to get all the lists present on a specified Trello board. It should be called when needing information about the organizational structure of a board, such as when managing tasks or projects using Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/lists",
            params=remove_none_values({
                "cards": cards_filter,
                "card_fields": card_fields_list,
                "filter": list_filter,
                "fields": list_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_list_on_board(
    context: ToolContext,
    list_name: Annotated[
        str, "The name of the Trello list to be created, between 1 and 16384 characters long."
    ],
    list_position_on_board: Annotated[
        str | None,
        "Specifies the position where the new list will appear on the board. Accepts `top`, `bottom`, or a positive number for a specific position.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards-id-lists'."]:
    """Create a new list on a Trello board.

    Use this tool to add a new list to a specific Trello board by providing the board ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/lists",
            params=remove_none_values({
                "name": list_name,
                "pos": list_position_on_board,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_filtered_lists_on_board(
    context: ToolContext,
    board_id: Annotated[str, "The unique identifier of the Trello board to retrieve lists from."],
    list_filter: Annotated[
        str, "Filter for lists on a board. Options: 'all', 'closed', 'none', 'open'."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-lists-filter'."]:
    """Retrieve filtered lists from a specific Trello board.

    Use this tool to get lists from a Trello board based on specific filters, such as open or closed lists."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/lists/{filter}".format(  # noqa: UP032
                id=board_id, filter=list_filter
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_board_members(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-members'."]:
    """Retrieve members of a Trello board.

    Use this tool to get a list of all members associated with a specific Trello board. Ideal for finding out who is part of a board and for managing memberships."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/members",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_member_to_trello_board(
    context: ToolContext,
    member_role_on_board: Annotated[
        str,
        "Specifies the role of the member on the board. Choose from 'admin', 'normal', or 'observer'.",  # noqa: E501
    ],
    allow_billable_guest_addition: Annotated[
        bool | None,
        "Set to true to allow organization admins to add multi-board guests onto a board.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-boards-id-members-idmember'."]:
    """Add a member to a Trello board.

    Use this tool to add a specific member to a Trello board. Provide the board and member IDs to complete the action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/members/{idMember}",
            params=remove_none_values({
                "type": member_role_on_board,
                "allowBillableGuest": allow_billable_guest_addition,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_member_from_trello_board(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'boardsidmembersidmember'."]:
    """Remove a member from a specific Trello board.

    This tool is used to remove a specific member from a Trello board. Call this tool when you need to manage board memberships by deleting a user."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/members/{idMember}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_board_membership(
    context: ToolContext,
    membership_type: Annotated[
        str,
        "Specifies the type of member for the board membership. Acceptable values are 'admin', 'normal', or 'observer'.",  # noqa: E501
    ],
    board_id_to_update: Annotated[
        str,
        "The ID of the Trello board to update the membership on. This should be a string representing the board's unique identifier.",  # noqa: E501
    ],
    membership_id_to_add: Annotated[
        str, "The ID of the membership to be added to the specified board."
    ],
    member_fields: Annotated[
        str | None,
        "Specifies which member fields to return. Options include 'all', 'avatarHash', 'bio', 'bioData', 'confirmed', 'fullName', 'idPremOrgsAdmin', 'initials', 'memberType', 'products', 'status', 'url', 'username'.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-memberships-idmembership'."
]:
    """Update a Trello board membership by ID.

    Use this tool to update an existing membership on a Trello board by specifying the board and membership IDs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/memberships/{idMembership}".format(  # noqa: UP032
                id=board_id_to_update, idMembership=membership_id_to_add
            ),
            params=remove_none_values({
                "type": membership_type,
                "member_fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_board_email_position(
    context: ToolContext,
    email_position_preference: Annotated[
        str,
        "Specifies the email address position on the board. Acceptable values are 'bottom' or 'top'.",  # noqa: E501
    ],
    board_id: Annotated[
        str, "The unique identifier of the Trello board to update the email position preference."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-myprefs-emailposition'."
]:
    """Update the email position preference on a Trello board.

    This tool updates the email position preference for a specific Trello board. It should be called when changes to email notification settings need to be applied to a board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/emailPosition".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "value": email_position_preference,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_email_to_board_list_preference(
    context: ToolContext,
    email_list_id: Annotated[
        str, "The ID of the email list where email-to-board cards should be created."
    ],
    board_id_to_update: Annotated[
        str,
        "The unique identifier of the Trello board to be updated with the new default email-to-board list preference.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-myprefs-idemaillist'."
]:
    """Change the default list for email-to-board card creation.

    This tool updates the default list where email-to-board cards are created on a specified Trello board. Call this when you need to change the list preference for incoming email cards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/idEmailList".format(  # noqa: UP032
                id=board_id_to_update
            ),
            params=remove_none_values({
                "value": email_list_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_board_sidebar_preference(
    context: ToolContext,
    board_id: Annotated[
        str,
        "The unique identifier of the Trello board to update the sidebar visibility preference for.",  # noqa: E501
    ],
    show_sidebar: Annotated[bool, "Set to true to show the sidebar, false to hide it."],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-myPrefs-showsidebar'."
]:
    """Update the sidebar visibility preference for a Trello board.

    Use this tool to change the 'showSidebar' preference for a specified Trello board. This is useful for adjusting the visibility of the sidebar on a board as per user preference."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/showSidebar".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "value": show_sidebar,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_sidebar_activity_preference(
    context: ToolContext,
    board_id: Annotated[
        str, "The ID of the Trello board to update the sidebar activity preference on."
    ],
    show_sidebar_activity: Annotated[
        bool, "Set to true to display sidebar activity on the board; false to hide it."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-myPrefs-showsidebaractivity'."
]:
    """Update the sidebar activity preference on a Trello board.

    Use this tool to update the 'showSidebarActivity' preference on a specific Trello board. This modifies the board's settings to either display or hide sidebar activity according to the provided preference."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/showSidebarActivity".format(  # noqa: UP032
                id=board_id
            ),
            params=remove_none_values({
                "value": show_sidebar_activity,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_sidebar_board_actions_pref(
    context: ToolContext,
    board_id: Annotated[
        str, "The ID of the Trello board to update the sidebar board actions preference."
    ],
    show_sidebar_board_actions: Annotated[
        bool,
        "Set to true to show the sidebar board actions or false to hide them on a Trello board.",
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-boards-id-myPrefs-showsidebarboardactions'.",
]:
    """Update the sidebar board actions preference on a Trello board.

    Use this tool to update the preference for showing sidebar board actions on a specific Trello board. This is useful for customizing board views according to user needs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/showSidebarBoardActions".format(  # noqa: UP032
                id=board_id
            ),
            params=remove_none_values({
                "value": show_sidebar_board_actions,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_sidebar_members_display(
    context: ToolContext,
    board_id: Annotated[
        str,
        "The unique identifier of the Trello board to update. Required to specify which board's sidebar member display preference you wish to change.",  # noqa: E501
    ],
    show_sidebar_members: Annotated[
        bool,
        "Set to true to display members in the sidebar, or false to hide them on a Trello board.",
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-boards-id-myPrefs-showsidebarmembers'."
]:
    """Updates the sidebar member display preference on a Trello board.

    Use this tool to change whether the sidebar member display is shown on a specific Trello board. It updates the 'showSidebarMembers' preference for a given board ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/myPrefs/showSidebarMembers".format(  # noqa: UP032
                id=board_id
            ),
            params=remove_none_values({
                "value": show_sidebar_members,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_board(
    context: ToolContext,
    board_name: Annotated[
        str, "The new name for the Trello board. Must be between 1 and 16384 characters long."
    ],
    board_description: Annotated[
        str | None, "A description for the board, from 0 to 16384 characters in length."
    ] = None,
    workspace_id_or_name: Annotated[
        str | None, "The ID or name of the Workspace where the new board will be created."
    ] = None,
    source_board_id: Annotated[
        str | None,
        "The ID of a board to duplicate for creating the new board, allowing you to copy existing setups.",  # noqa: E501
    ] = None,
    retain_original_board_cards: Annotated[
        str | None,
        "Specify 'cards' to retain cards from the original board. Use 'none' if you do not wish to retain cards.",  # noqa: E501
    ] = None,
    enabled_power_ups: Annotated[
        str | None,
        "Specify the Power-Ups to enable on the new board. Choose from: 'all', 'calendar', 'cardAging', 'recap', or 'voting'.",  # noqa: E501
    ] = None,
    board_permission_level: Annotated[
        str | None, "The permissions level of the board. Choose from: `org`, `private`, `public`."
    ] = None,
    voting_permissions: Annotated[
        str | None,
        "Specifies who can vote on the board. Options: 'disabled', 'members', 'observers', 'org', 'public'.",  # noqa: E501
    ] = None,
    comments_permission: Annotated[
        str | None,
        "Defines who can comment on cards on the board. Options: `disabled`, `members`, `observers`, `org`, `public`.",  # noqa: E501
    ] = None,
    invitation_permission_level: Annotated[
        str | None,
        "Specifies who can invite users to join the board. Options: `admins`, `members`.",
    ] = None,
    background_color: Annotated[
        str | None,
        "Select a background color for the board. Options include: blue, orange, green, red, purple, pink, lime, sky, grey.",  # noqa: E501
    ] = None,
    card_aging_type: Annotated[
        str | None, "Type of card aging on the board if enabled. Options: 'pirate', 'regular'."
    ] = None,
    use_default_labels: Annotated[
        bool | None,
        "Set to true to include the default set of labels on the board, or false to exclude them.",
    ] = None,
    use_default_lists: Annotated[
        bool | None,
        "Determines whether to use the default set of lists (To Do, Doing, Done) when creating a board. This is ignored if `idBoardSource` is provided.",  # noqa: E501
    ] = None,
    allow_self_join: Annotated[
        bool | None,
        "Allow users to join the board themselves without needing an invitation. Set to true to enable self-join, otherwise set false.",  # noqa: E501
    ] = None,
    enable_card_covers: Annotated[
        bool | None, "Enable card covers on the new board when true; disable them when false."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards'."]:
    """Create a new board on Trello.

    Use this tool to create a new board on Trello quickly. This can be called when a user wants to organize projects or tasks by creating a new board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/",
            params=remove_none_values({
                "name": board_name,
                "defaultLabels": use_default_labels,
                "defaultLists": use_default_lists,
                "desc": board_description,
                "idOrganization": workspace_id_or_name,
                "idBoardSource": source_board_id,
                "keepFromSource": retain_original_board_cards,
                "powerUps": enabled_power_ups,
                "prefs_permissionLevel": board_permission_level,
                "prefs_voting": voting_permissions,
                "prefs_comments": comments_permission,
                "prefs_invitations": invitation_permission_level,
                "prefs_selfJoin": allow_self_join,
                "prefs_cardCovers": enable_card_covers,
                "prefs_background": background_color,
                "prefs_cardAging": card_aging_type,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def generate_trello_board_calendar_key(
    context: ToolContext,
    board_id_to_update: Annotated[
        str,
        "The unique identifier of the Trello board for which you want to generate a calendar key.",
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'post-boards-id-calendarkey-generate'."
]:
    """Generates a calendar key for a Trello board.

    Use this tool to generate a calendar key for an existing Trello board by providing the board ID. This allows for calendar integration and scheduling based on board activities."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/calendarKey/generate".format(  # noqa: UP032
                id=board_id_to_update
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def generate_board_email_key(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board for which the email key will be generated."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'post-boards-id-emailkey-generate'."
]:
    """Generate an email key for a Trello board.

    This tool generates a unique email key for a specified Trello board. It should be called when there's a need to create or regenerate the email key that allows emails to be sent directly to a board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/emailKey/generate".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_board_tag(
    context: ToolContext,
    tag_id: Annotated[
        str,
        "The ID of a tag from the organization associated with this board, used to create the tag on the specified Trello board.",  # noqa: E501
    ],
    board_id: Annotated[
        str, "The unique identifier of the Trello board where the tag should be created."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards-id-idtags'."]:
    """Create a new tag for a specific Trello board.

    Use this tool to add a tag to a specified Trello board by providing the board ID. Useful for organizing and managing tasks with specific labels."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/idTags".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "value": tag_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def mark_trello_board_as_viewed(
    context: ToolContext,
    board_id_to_mark_as_viewed: Annotated[
        str, "The unique identifier of the Trello board to mark as viewed."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards-id-markedasviewed'."]:
    """Mark a Trello board as viewed.

    This tool marks a specified Trello board as viewed. Use it to update the view status of a board in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/markedAsViewed".format(  # noqa: UP032
                id=board_id_to_mark_as_viewed
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_powerups(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-boards-id-boardplugins'."]:
    """Retrieve enabled Power-Ups on a Trello board.

    This tool retrieves the list of enabled Power-Ups for a specific Trello board by its ID. Call this tool when you need to know which Power-Ups are activated on a given board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/boardPlugins",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def enable_trello_power_up_on_board(
    context: ToolContext,
    power_up_id_to_enable: Annotated[
        str | None, "The ID of the Power-Up to activate on the specified board."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-boards-id-boardplugins'."]:
    """Enables a Power-Up on a specified Trello board.

    This tool should be called when you need to activate a Power-Up feature on a specific Trello board. It enables the requested Power-Up on the board identified by its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/boardPlugins",
            params=remove_none_values({
                "idPlugin": power_up_id_to_enable,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def disable_powerup_on_board(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board from which the Power-Up should be disabled."
    ],
    power_up_id_to_disable: Annotated[
        str, "The ID of the Power-Up to disable on the Trello board."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-boards-id-boardplugins'."]:
    """Disable a Power-Up on a Trello board.

    This tool disables a Power-Up on a specified Trello board. Use it when you need to remove an existing Power-Up feature from a board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/boardPlugins/{idPlugin}".format(  # noqa: UP032
                id=board_id, idPlugin=power_up_id_to_disable
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_trello_board_power_ups(
    context: ToolContext,
    board_id: Annotated[
        str, "The unique identifier of the Trello board whose Power-Ups you want to retrieve."
    ],
    power_up_filter: Annotated[
        str | None, "Specify whether to retrieve 'enabled' or 'available' Power-Ups on the board."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-board-id-plugins'."]:
    """Retrieve Power-Ups for a Trello board by ID.

    Use this tool to get a list of all Power-Ups enabled on a specific Trello board using its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/boards/{id}/plugins".format(id=board_id),  # noqa: UP032
            params=remove_none_values({
                "filter": power_up_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_card(
    context: ToolContext,
    list_id: Annotated[str, "The ID of the Trello list where the new card should be created."],
    card_name: Annotated[
        str | None,
        "The name to assign to the new Trello card. This will serve as the main title of the card.",
    ] = None,
    card_description: Annotated[
        str | None, "The detailed description for the Trello card that you want to create."
    ] = None,
    new_card_position: Annotated[
        str | None,
        "The position of the new card in the list. Accepted values are 'top', 'bottom', or a positive float representing a specific position.",  # noqa: E501
    ] = None,
    due_date: Annotated[
        str | None,
        "The due date for the Trello card. Format as a string in ISO 8601 format (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SSZ).",  # noqa: E501
    ] = None,
    start_date: Annotated[
        str | None, "The start date for the card. Use a date string or `null` if not applicable."
    ] = None,
    member_ids_to_add: Annotated[
        list[dict[str, str]] | None,
        "List of member IDs to add to the card. Provide each ID as a separate entry in the list.",
    ] = None,
    label_ids: Annotated[
        list[dict[str, str]] | None,
        "List of label IDs to attach to the card. Provide as an array of strings.",
    ] = None,
    attachment_url: Annotated[
        str | None,
        "A URL starting with `http://` or `https://` to be attached to the new Trello card.",
    ] = None,
    file_attachment_source: Annotated[
        str | None,
        "The file source URL or path to attach to the card. Ensure it is accessible during upload.",
    ] = None,
    attachment_mime_type: Annotated[
        str | None, "The MIME type of the attachment. Ensure it does not exceed 256 characters."
    ] = None,
    source_card_id: Annotated[
        str | None, "The ID of an existing card to copy into the new card."
    ] = None,
    properties_to_copy_from_source: Annotated[
        str | None,
        "Specify which properties to copy from the source card if using `idCardSource`. Options are: `all` or a comma-separated list of `attachments,checklists,customFields,comments,due,start,labels,members,start,stickers`.",  # noqa: E501
    ] = None,
    map_view_address: Annotated[
        str | None, "The address to use for Map View integration on the Trello card."
    ] = None,
    map_view_location_name: Annotated[
        str | None, "The name of the location for use with the Map View on Trello."
    ] = None,
    map_view_coordinates: Annotated[
        str | None, "Coordinates in the format 'latitude,longitude' for use with the Map View."
    ] = None,
    card_display_role: Annotated[
        str | None,
        "Specify how the card will be displayed. Options: 'separator', 'board', 'mirror', 'link'. The card name should align with the selected role.",  # noqa: E501
    ] = None,
    is_card_status_complete: Annotated[
        bool | None,
        "Indicate if the card's status is complete. Use 'true' to mark as complete, 'false' otherwise.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards'."]:
    """Create a new card in Trello.

    This tool allows you to create a new card on a Trello board. It is useful when users want to add tasks or notes to their Trello boards directly."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards",
            params=remove_none_values({
                "name": card_name,
                "desc": card_description,
                "pos": new_card_position,
                "due": due_date,
                "start": start_date,
                "dueComplete": is_card_status_complete,
                "idList": list_id,
                "idMembers": member_ids_to_add,
                "idLabels": label_ids,
                "urlSource": attachment_url,
                "fileSource": file_attachment_source,
                "mimeType": attachment_mime_type,
                "idCardSource": source_card_id,
                "keepFromSource": properties_to_copy_from_source,
                "address": map_view_address,
                "locationName": map_view_location_name,
                "coordinates": map_view_coordinates,
                "cardRole": card_display_role,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_by_id(
    context: ToolContext,
    fields_to_retrieve: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of Trello card fields to retrieve. Defaults include badges, closed, dateLastActivity, and more.",  # noqa: E501
    ] = None,
    include_actions_details: Annotated[
        str | None,
        "Determines if action details should be retrieved with the card. Refer to the Actions Nested Resource for specifics.",  # noqa: E501
    ] = None,
    include_attachments: Annotated[
        str | None,
        "Specify 'true', 'false', or 'cover' to include respective attachment details on the Trello card.",  # noqa: E501
    ] = None,
    attachment_fields_list: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of attachment fields to return for the card.",
    ] = None,
    member_fields_selection: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of member fields for the members on the card. Defaults are `avatarHash, fullName, initials, username`.",  # noqa: E501
    ] = None,
    member_voted_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields for members who voted on the card. Defaults to avatarHash, fullName, initials, username.",  # noqa: E501
    ] = None,
    include_checklists_on_card: Annotated[
        str | None,
        "Specify whether to return the checklists on the card. Options are 'all' or 'none'.",
    ] = None,
    checklist_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of `idBoard,idCard,name,pos` to define which checklist fields to return.",  # noqa: E501
    ] = None,
    board_fields_to_include: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields to include for the board. Defaults to 'name, desc, descData, closed, idOrganization, pinned, url, prefs'.",  # noqa: E501
    ] = None,
    sticker_field_selection: Annotated[
        str | None, "Specify 'all' or a comma-separated list of sticker fields to include."
    ] = None,
    include_card_members: Annotated[
        bool | None, "Set to true to return member objects for members on the card."
    ] = None,
    include_voting_members: Annotated[
        bool | None, "Set to true to return member objects for members who voted on the card."
    ] = None,
    include_check_item_states: Annotated[
        bool | None,
        "Indicate if check item states should be included in the response. A value of true includes the states.",  # noqa: E501
    ] = None,
    include_board_object: Annotated[
        bool | None, "Set to true to include the board object the card is on."
    ] = None,
    include_list_details: Annotated[
        bool | None,
        "Set to true to include details about the list using the Lists Nested Resource.",
    ] = None,
    include_plugin_data: Annotated[
        bool | None, "Set to true to include pluginData on the card with the response."
    ] = None,
    include_stickers: Annotated[
        bool | None,
        "Set to true to include sticker models with the response; false to exclude them.",
    ] = None,
    include_custom_field_items: Annotated[
        bool | None,
        "Whether to include custom field items in the response. Set to true to include, false to exclude.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id'."]:
    """Retrieve Trello card details using its ID.

    Use this tool to get comprehensive details about a Trello card by specifying its unique ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}",
            params=remove_none_values({
                "fields": fields_to_retrieve,
                "actions": include_actions_details,
                "attachments": include_attachments,
                "attachment_fields": attachment_fields_list,
                "members": include_card_members,
                "member_fields": member_fields_selection,
                "membersVoted": include_voting_members,
                "memberVoted_fields": member_voted_fields,
                "checkItemStates": include_check_item_states,
                "checklists": include_checklists_on_card,
                "checklist_fields": checklist_fields,
                "board": include_board_object,
                "board_fields": board_fields_to_include,
                "list": include_list_details,
                "pluginData": include_plugin_data,
                "stickers": include_stickers,
                "sticker_fields": sticker_field_selection,
                "customFieldItems": include_custom_field_items,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_card(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-cards-id'."]:
    """Deletes a card from a Trello board.

    This tool deletes a specific card from a Trello board using its ID. It should be used when a card needs to be permanently removed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_property(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier for the Trello card from which to retrieve a specific property."
    ],
    desired_card_field: Annotated[
        str,
        "Specify the field of the Trello card you want to retrieve, such as 'name', 'desc', 'due', etc.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-field'."]:
    """Retrieve a specific property of a Trello card.

    Use this tool to obtain a particular property from a Trello card by specifying the card ID and desired field."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/{field}".format(  # noqa: UP032
                id=card_id, field=desired_card_field
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_actions(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card whose actions are to be retrieved."
    ],
    action_types_filter: Annotated[
        str | None, "Comma-separated list of Trello action types to filter the card actions."
    ] = None,
    action_results_page: Annotated[
        float | None,
        "The results page number for card actions, with each page containing 50 actions.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-actions'."]:
    """Retrieve actions on a specified Trello card.

    This tool fetches and lists all the actions performed on a specified Trello card by providing the card's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/actions".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "filter": action_types_filter,
                "page": action_results_page,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_trello_card_attachments(
    context: ToolContext,
    attachment_fields_list: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of attachment fields to retrieve. For example: 'name,url'.",  # noqa: E501
    ] = None,
    restrict_to_cover_attachment: Annotated[
        str | None, "Set to 'cover' to restrict results to only the cover attachment of the card."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-attachments'."]:
    """Retrieve attachments from a specific Trello card.

    Call this tool when you need to list all attachments associated with a specific Trello card using its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/attachments",
            params=remove_none_values({
                "fields": attachment_fields_list,
                "filter": restrict_to_cover_attachment,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_attachment_to_trello_card(
    context: ToolContext,
    attachment_name: Annotated[
        str | None,
        "The name of the attachment to be added to the Trello card. Maximum length of 256 characters.",  # noqa: E501
    ] = None,
    file_attachment: Annotated[
        str | None, "The path to the file to attach, provided as multipart/form-data."
    ] = None,
    attachment_mime_type: Annotated[
        str | None,
        "The MIME type of the attachment, such as 'image/png' or 'application/pdf'. Max length 256.",  # noqa: E501
    ] = None,
    attachment_url: Annotated[
        str | None,
        "A URL to attach to the Trello card. It must start with `http://` or `https://`. This URL will be linked as an attachment.",  # noqa: E501
    ] = None,
    use_attachment_as_cover: Annotated[
        bool | None, "Set to true to use the new attachment as the cover for the Trello card."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-attachments'."]:
    """Attach a file or link to a Trello card.

    Use this tool to add an attachment to a specified Trello card by providing the card ID. Suitable for adding relevant documents or links directly to your Trello tasks."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/attachments",
            params=remove_none_values({
                "name": attachment_name,
                "file": file_attachment,
                "mimeType": attachment_mime_type,
                "url": attachment_url,
                "setCover": use_attachment_as_cover,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_attachment(
    context: ToolContext,
    attachment_fields: Annotated[
        list[dict[str, str]] | None,
        "List the specific fields of the attachment to be included in the response. This can include properties like 'name', 'url', etc.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-cards-id-attachments-idattachment'."
]:
    """Retrieve a specific attachment from a Trello card.

    Use this tool to get details about a specific attachment on a Trello card, identified by card ID and attachment ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/attachments/{idAttachment}",
            params=remove_none_values({
                "fields": attachment_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_card_attachment(
    context: ToolContext,
    card_id: Annotated[str, "The ID of the Trello card from which the attachment will be deleted."],
    attachment_id_to_delete: Annotated[
        str, "The unique ID of the attachment that needs to be deleted from the Trello card."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'deleted-cards-id-attachments-idattachment'."
]:
    """Delete an attachment from a Trello card.

    This tool deletes a specified attachment from a Trello card, given the card and attachment IDs. It should be called when you need to remove an attachment."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/attachments/{idAttachment}".format(  # noqa: UP032
                id=card_id, idAttachment=attachment_id_to_delete
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_board_for_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier for the Trello card whose board information is desired."
    ],
    retrieve_fields: Annotated[
        str | None,
        "Specify 'all' to get all board fields or provide a comma-separated list of specific fields.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-board'."]:
    """Retrieve the board details for a specific Trello card.

    This tool retrieves information about the board where a given Trello card is located. It should be used when you need to determine the board a particular card belongs to."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/board".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "fields": retrieve_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_completed_checklist_items(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier for the Trello card to retrieve completed checklist items from."
    ],
    checklist_item_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of item attributes like `idCheckItem`, `state` to return specific fields of the checklist items.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-checkitemstates'."]:
    """Retrieve completed checklist items from a Trello card.

    Use this tool to fetch the completed checklist items from a specified Trello card. Useful for tracking task progress or reviewing completed tasks on a Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checkItemStates".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "fields": checklist_item_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_checklists(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card to retrieve checklists from."
    ],
    include_check_items: Annotated[
        str | None, "Specify whether to include all check items (`all`) or none (`none`)."
    ] = None,
    checklist_item_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields like 'name, nameData, pos, state, type, due, dueReminder, idMember' to include in the checklist items.",  # noqa: E501
    ] = None,
    include_all_checklists: Annotated[
        str | None,
        "Specify whether to retrieve all checklists (`all`) or none (`none`) from a Trello card.",
    ] = None,
    fields_to_retrieve: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of fields: `idBoard,idCard,name,pos` to retrieve from the Trello card.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-checklists'."]:
    """Retrieve checklists from a specific Trello card.

    Use this tool to get all checklists associated with a specific Trello card by providing the card ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checklists".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "checkItems": include_check_items,
                "checkItem_fields": checklist_item_fields,
                "filter": include_all_checklists,
                "fields": fields_to_retrieve,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_checklist(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card to which the checklist will be added."
    ],
    checklist_name: Annotated[
        str | None, "The name for the new checklist to be added to a Trello card."
    ] = None,
    source_checklist_id: Annotated[
        str | None, "The ID of a source checklist to copy its items into the new checklist."
    ] = None,
    checklist_position: Annotated[
        str | None,
        "The position of the checklist on the card. Specify `top`, `bottom`, or a positive integer for a custom position.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-checklists'."]:
    """Create a new checklist on a Trello card.

    This tool is used to add a new checklist to a specified Trello card. It should be called when there is a need to organize tasks or items on a Trello card using checklists."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checklists".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "name": checklist_name,
                "idChecklistSource": source_checklist_id,
                "pos": checklist_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_checkitem_from_card(
    context: ToolContext,
    checkitem_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields ('name', 'nameData', 'pos', 'state', 'type', 'due', 'dueReminder', 'idMember') to include in the response.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-cards-id-checkitem-idcheckitem'."
]:
    """Retrieve a specific checkItem from a Trello card.

    Use this tool to fetch details of a specific checkItem from a card in Trello by providing the card ID and checkItem ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checkItem/{idCheckItem}",
            params=remove_none_values({
                "fields": checkitem_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_checklist_item_on_card(
    context: ToolContext,
    new_checklist_item_name: Annotated[
        str | None, "The new name for the checklist item to be updated on the Trello card."
    ] = None,
    checkitem_state: Annotated[
        str | None, "Specify the state of the checklist item: 'complete' or 'incomplete'."
    ] = None,
    checklist_id: Annotated[
        str | None,
        "The unique identifier of the checklist containing the item to be updated on the Trello card. This ID is required to specify which checklist the item belongs to.",  # noqa: E501
    ] = None,
    position_of_checklist_item: Annotated[
        str | None,
        "Specify the position of the checklist item as 'top', 'bottom', or a positive float for specific ordering.",  # noqa: E501
    ] = None,
    due_date_for_checkitem: Annotated[
        str | None, "A due date for the checklist item in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)."
    ] = None,
    due_date_reminder_minutes: Annotated[
        float | None,
        "A reminder in minutes before the due date for the checklist item. Expected as a positive integer.",  # noqa: E501
    ] = None,
    member_id_to_remove: Annotated[
        str | None, "The ID of the member to remove from the checklist item on the Trello card."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-cards-id-checkitem-idcheckitem'."
]:
    """Update an item in a checklist on a Trello card.

    This tool updates an existing item in a checklist on a specific Trello card."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checkItem/{idCheckItem}",
            params=remove_none_values({
                "name": new_checklist_item_name,
                "state": checkitem_state,
                "idChecklist": checklist_id,
                "pos": position_of_checklist_item,
                "due": due_date_for_checkitem,
                "dueReminder": due_date_reminder_minutes,
                "idMember": member_id_to_remove,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_checklist_item(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-checkitem-idcheckitem'."
]:
    """Deletes a checklist item from a Trello card.

    Use this tool to remove a specific checklist item from a Trello card by providing the card ID and the checklist item ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checkItem/{idCheckItem}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_list(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card to retrieve list information."
    ],
    list_fields: Annotated[
        str | None,
        "Specify 'all' to retrieve all fields, or provide a comma-separated list of specific fields for the list.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-list'."]:
    """Retrieve the Trello list for a specific card.

    Call this tool to get information about the Trello list that a particular card belongs to, using the card's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/list".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "fields": list_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_card_members(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of a Trello card to retrieve its associated members."
    ],
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to retrieve for each member on the card.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-members'."]:
    """Retrieve members associated with a Trello card.

    This tool is used to get the list of members assigned to a specific card on Trello based on the card ID. Use this when you need to know which members are collaborating on a particular Trello card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/members".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_card_voters(
    context: ToolContext,
    member_fields: Annotated[
        str | None,
        "Specify 'all' or provide a comma-separated list of member fields to retrieve, such as 'id,username,email'.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-membersvoted'."]:
    """Retrieve members who voted on a Trello card.

    Use this tool to get the list of members who have voted on a specific Trello card. It should be called when you need to identify who has expressed interest or opinion through voting on a card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/membersVoted",
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def vote_on_trello_card(
    context: ToolContext,
    member_id_to_vote_yes: Annotated[str, "The ID of the member to vote 'yes' on the Trello card."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'cardsidmembersvoted-1'."]:
    """Vote on a Trello card for a specified member.

    Use this tool to register a vote on a Trello card for a given member, identified by the card's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/membersVoted",
            params=remove_none_values({
                "value": member_id_to_vote_yes,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_card_plugin_data(
    context: ToolContext,
    card_id: Annotated[
        str,
        "The unique identifier for the Trello card from which you want to retrieve shared plugin data.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-plugindata'."]:
    """Retrieve shared plugin data for a Trello card.

    Use this tool to fetch any shared pluginData on a specific Trello card using its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/pluginData".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_card_stickers(
    context: ToolContext,
    card_id: Annotated[str, "The Trello card's unique identifier to retrieve its stickers."],
    sticker_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields to retrieve specific sticker details.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-stickers'."]:
    """Retrieve all stickers from a specific Trello card.

    Use this tool to obtain a list of all stickers associated with a particular Trello card by providing the card ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/stickers".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "fields": sticker_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_sticker_to_trello_card(
    context: ToolContext,
    sticker_identifier: Annotated[
        str,
        "ID for custom stickers or string identifier for default stickers (e.g., 'taco-cool') to be added to the card.",  # noqa: E501
    ],
    sticker_top_position: Annotated[
        float, "The vertical position of the sticker on a card, ranging from -60 to 100."
    ],
    sticker_left_position: Annotated[
        float, "The horizontal position of the sticker on the card, ranging from -60 to 100."
    ],
    sticker_z_index: Annotated[
        int, "Specify the z-index of the sticker to control its stacking order on the card."
    ],
    sticker_rotation: Annotated[
        float | None,
        "The degree of rotation for the sticker, specified as a number. Adjusts the orientation of the sticker on the card.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-stickers'."]:
    """Add a sticker to a Trello card.

    Use this tool to add a sticker to a specific Trello card when organizing tasks or visualizing boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/stickers",
            params=remove_none_values({
                "image": sticker_identifier,
                "top": sticker_top_position,
                "left": sticker_left_position,
                "zIndex": sticker_z_index,
                "rotate": sticker_rotation,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_specific_sticker_on_card(
    context: ToolContext,
    sticker_fields: Annotated[
        str | None,
        "Specify 'all' to retrieve all sticker fields or provide a comma-separated list of desired sticker fields.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-stickers-idsticker'."]:
    """Retrieve details of a specific sticker from a Trello card.

    Use this tool to obtain information about a particular sticker applied to a Trello card. This can be helpful to check sticker details for project management purposes."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/stickers/{idSticker}",
            params=remove_none_values({
                "fields": sticker_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_trello_card_sticker(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-stickers-idsticker'."
]:
    """Remove a sticker from a Trello card.

    Use this tool to remove a specific sticker from a Trello card using the card and sticker IDs."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/stickers/{idSticker}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_card_sticker(
    context: ToolContext,
    sticker_top_position: Annotated[
        float,
        "The vertical position of the sticker, ranging from -60 to 100. Determines how high or low the sticker appears on the card.",  # noqa: E501
    ],
    sticker_left_position: Annotated[
        float,
        "The left position of the sticker on the Trello card. Accepts values from -60 to 100.",
    ],
    sticker_z_index: Annotated[
        int, "Specify the z-index to set the display order of the sticker on the Trello card."
    ],
    sticker_rotation: Annotated[
        float | None,
        "The angle for rotating the sticker on the Trello card. Must be a number representing the degree of rotation.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-cards-id-stickers-idsticker'."]:
    """Updates a sticker on a Trello card.

    Use this tool to modify an existing sticker on a specific Trello card. It should be called when changes to a sticker are needed within a Trello board card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/stickers/{idSticker}",
            params=remove_none_values({
                "top": sticker_top_position,
                "left": sticker_left_position,
                "zIndex": sticker_z_index,
                "rotate": sticker_rotation,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_comment(
    context: ToolContext,
    new_comment_text: Annotated[str, "The updated text for the Trello card comment."],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-cards-id-actions-idaction-comments'."
]:
    """Update an existing comment on a Trello card.

    Use this tool to update the text of an existing comment on a specific action of a Trello card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/actions/{idAction}/comments",
            params=remove_none_values({
                "text": new_comment_text,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_card_comment(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-actions-id-comments'."
]:
    """Delete a specific comment from a Trello card.

    Use this tool to delete a specific comment from a Trello card when provided with the card ID and the comment action ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/actions/{idAction}/comments",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_custom_field_items_for_card(
    context: ToolContext,
    card_id: Annotated[
        str,
        "The unique identifier of the Trello card whose custom field items are to be retrieved.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-cards-id-customfielditems'."]:
    """Retrieve custom field items for a specific Trello card.

    Use this tool to get the custom field items associated with a Trello card by its ID. It should be called when you need detailed custom field information about a card in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/customFieldItems".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_comment_to_trello_card(
    context: ToolContext,
    comment_text: Annotated[
        str,
        "The text of the comment to add to the specified Trello card. Provide a clear and concise message.",  # noqa: E501
    ],
    trello_card_id: Annotated[
        str, "The unique identifier of the Trello card where the comment will be added."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-actions-comments'."]:
    """Add a new comment to a Trello card by ID.

    Use this tool to add a comment to a specific Trello card by providing the card's ID. It should be called when you need to attach additional information or notes to an existing Trello card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/actions/comments".format(id=trello_card_id),  # noqa: UP032
            params=remove_none_values({
                "text": comment_text,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_label_to_trello_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card to which you want to add a label."
    ],
    label_id: Annotated[
        str | None, "The unique ID of the label you wish to add to the Trello card."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-idlabels'."]:
    """Add a label to a Trello card.

    Use this tool to attach a specific label to a Trello card by providing the card's ID. This is useful for organizing and categorizing cards effectively."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/idLabels".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "value": label_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_member_to_trello_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier for the Trello card to which a member will be added."
    ],
    member_id_to_add: Annotated[
        str | None,
        "The ID of the member to add to the Trello card. This is required to identify which member will be added.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-idmembers'."]:
    """Add a member to a Trello card.

    Use this tool to add a specific member to a Trello card by providing the card's ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/idMembers".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "value": member_id_to_add,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_new_label_to_trello_card(
    context: ToolContext,
    label_color: Annotated[
        str,
        "A valid label color for the Trello label. Use 'null' for no color. Refer to Trello's label colors for options.",  # noqa: E501
    ],
    card_id: Annotated[
        str, "The unique identifier of the Trello card to which the label will be added."
    ],
    label_name: Annotated[
        str | None, "The name of the label to be created and added to the Trello card."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-cards-id-labels'."]:
    """Adds a new label to a specific Trello card.

    This tool creates a new label on a Trello board and associates it with the specified card. It should be called when you need to add an organizational label to a particular item within Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/labels".format(id=card_id),  # noqa: UP032
            params=remove_none_values({
                "color": label_color,
                "name": label_name,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def mark_trello_card_notifications_read(
    context: ToolContext,
    card_id: Annotated[
        str,
        "The unique identifier of the Trello card whose notifications you want to mark as read.",
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'post-cards-id-markassociatednotificationsread'.",
]:
    """Mark all notifications for a Trello card as read.

    Use this tool to mark all associated notifications of a specific Trello card as read. Ideal for maintaining notification management and ensuring no unseen alerts remain."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/markAssociatedNotificationsRead".format(  # noqa: UP032
                id=card_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_label_from_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card from which the label will be removed."
    ],
    label_id_to_remove: Annotated[str, "The ID of the Trello label to be removed from the card."],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-idlabels-idlabel'."
]:
    """Remove a label from a Trello card based on card and label IDs.

    Use this tool to delete a specific label from a Trello card by providing the card ID and the label ID. It is useful when organizing and managing card labels in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/idLabels/{idLabel}".format(  # noqa: UP032
                id=card_id, idLabel=label_id_to_remove
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_member_from_trello_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier for the Trello card from which the member will be removed."
    ],
    member_id_to_remove: Annotated[
        str,
        "The ID of the member to be removed from the Trello card. This is required for identifying which member to remove.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-id-idmembers-idmember'."]:
    """Removes a member from a Trello card.

    This tool should be called when you need to remove a specific member from a Trello card. It confirms the successful removal of the member."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/idMembers/{idMember}".format(  # noqa: UP032
                id=card_id, idMember=member_id_to_remove
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_remove_member_vote(
    context: ToolContext,
    card_id: Annotated[
        str,
        "The unique identifier of the Trello card from which the member's vote should be removed.",
    ],
    member_id_to_remove_vote: Annotated[
        str, "The ID of the member whose vote you want to remove from the card."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-membersvoted-idmember'."
]:
    """Remove a member's vote from a Trello card.

    This tool removes a specified member's vote from a card in Trello. Call this tool when you need to revoke a vote cast by a member on a particular card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/membersVoted/{idMember}".format(  # noqa: UP032
                id=card_id, idMember=member_id_to_remove_vote
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_checklist_item(
    context: ToolContext,
    card_id: Annotated[
        str,
        "The unique identifier for the Trello card where the checklist is located. Required to specify which card's checklist item needs updating.",  # noqa: E501
    ],
    checklist_item_id: Annotated[str, "The ID of the checklist item to update on a Trello card."],
    checklist_id: Annotated[str, "The ID of the checklist to be updated on the Trello card."],
    position_in_checklist: Annotated[
        str | None,
        "Specify the position of the checklist item. Use `top`, `bottom`, or a positive float for a custom position.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-cards-idcard-checklist-idchecklist-checkitem-idcheckitem'.",  # noqa: E501
]:
    """Update an item in a Trello card's checklist.

    Use this tool to update an item in a checklist on a specific Trello card."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}".format(  # noqa: UP032
                idCard=card_id, idCheckItem=checklist_item_id, idChecklist=checklist_id
            ),
            params=remove_none_values({
                "pos": position_in_checklist,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_checklist_from_card(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card from which the checklist will be deleted."
    ],
    checklist_id_to_delete: Annotated[
        str, "The ID of the checklist to remove from the specified Trello card."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-cards-id-checklists-idchecklist'."
]:
    """Delete a checklist from a specified Trello card.

    Use this tool to remove a specific checklist from a Trello card by providing the card and checklist identifiers."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/cards/{id}/checklists/{idChecklist}".format(  # noqa: UP032
                id=card_id, idChecklist=checklist_id_to_delete
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_new_checklist(
    context: ToolContext,
    card_id: Annotated[
        str, "The unique identifier of the Trello card to which the checklist will be added."
    ],
    checklist_name: Annotated[
        str | None, "The name of the checklist, a string between 1 and 16384 characters."
    ] = None,
    checklist_position_on_card: Annotated[
        str | None,
        "Specify the position of the checklist on the card: 'top', 'bottom', or a positive number for a custom position.",  # noqa: E501
    ] = None,
    source_checklist_id: Annotated[
        str | None,
        "The ID of an existing checklist to copy into the new checklist. Use this to replicate checklist items.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-checklists'."]:
    """Create a new checklist in Trello.

    Use this tool to create a new checklist in a Trello card. It should be called when you need to add a checklist to organize tasks or subtasks within a Trello card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists",
            params=remove_none_values({
                "idCard": card_id,
                "name": checklist_name,
                "pos": checklist_position_on_card,
                "idChecklistSource": source_checklist_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_checklist(
    context: ToolContext,
    filter_cards_status: Annotated[
        str | None,
        "Specify which cards associated with the checklist to include. Options: `all`, `closed`, `none`, `open`, `visible`.",  # noqa: E501
    ] = None,
    return_check_items: Annotated[
        str | None,
        "Specify which check items to return: `all` or `none`. Use `all` to get all check items and `none` to exclude them.",  # noqa: E501
    ] = None,
    check_item_field_selection: Annotated[
        str | None,
        "Specify which fields of the checkItem to return. Options are `all` or a comma-separated list of `name`, `nameData`, `pos`, `state`, `type`, `due`, `dueReminder`, `idMember`.",  # noqa: E501
    ] = None,
    checklist_fields_to_return: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of specific checklist fields to retrieve, such as 'name', 'pos', etc.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-checklists-id'."]:
    """Retrieve details of a specific Trello checklist using its ID.

    This tool is used to fetch comprehensive details of a Trello checklist by providing its unique identifier. It is helpful when needing information about specific checklist items and their statuses."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}",
            params=remove_none_values({
                "cards": filter_cards_status,
                "checkItems": return_check_items,
                "checkItem_fields": check_item_field_selection,
                "fields": checklist_fields_to_return,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_checklist(
    context: ToolContext,
    checklist_name: Annotated[
        str | None, "The updated name of the checklist. Should be between 1 and 16384 characters."
    ] = None,
    checklist_position: Annotated[
        str | None,
        "Specifies the position of the checklist on the Trello card. Acceptable values are `top`, `bottom`, or a positive integer for a specific position.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-checlists-id'."]:
    """Updates an existing checklist on Trello.

    Use this tool to modify the properties of a specific checklist within Trello by providing its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}",
            params=remove_none_values({
                "name": checklist_name,
                "pos": checklist_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_checklist(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-checklists-id'."]:
    """Deletes a specified checklist from Trello.

    Use this tool to delete a checklist from Trello by its ID. This is useful for managing and organizing Trello boards by removing unnecessary checklists."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_get_checklist_field(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-checklists-id-field'."]:
    """Retrieve a specific field from a Trello checklist.

    Use this tool to get the value of a specified field from a checklist in Trello by providing the checklist ID and the field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/{field}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_checklist_field(
    context: ToolContext,
    checklist_name_value: Annotated[
        str,
        "The new name for the checklist. It must be a string between 1 and 16384 characters long.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-checklists-id-field'."]:
    """Updates a specific field on a Trello checklist.

    Use this tool to modify a specific field of a checklist in Trello by providing the checklist ID and field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/{field}",
            params=remove_none_values({
                "value": checklist_name_value,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_for_checklist(
    context: ToolContext,
    checklist_id: Annotated[
        str, "ID of the checklist for which you want to retrieve the board details."
    ],
    board_fields: Annotated[
        str | None, "Specify 'all' or a comma-separated list of board fields like 'name'."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-checklists-id-board'."]:
    """Retrieve the board details for a specific Trello checklist.

    Use this tool to find out which board a specific checklist belongs to in Trello. This can be useful for understanding the context or organizing tasks related to the checklist."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/board".format(id=checklist_id),  # noqa: UP032
            params=remove_none_values({
                "fields": board_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_card_for_checklist(
    context: ToolContext,
    checklist_id: Annotated[
        str, "The unique identifier for a Trello checklist to retrieve the associated card."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-checklists-id-cards'."]:
    """Retrieve the card associated with a given checklist ID.

    Use this tool to find out which card a specific checklist is attached to on Trello. Useful for tracking checklist locations within Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/cards".format(id=checklist_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_checklist_items(
    context: ToolContext,
    filter_check_items: Annotated[
        str | None,
        "Specify whether to retrieve all check items or none. Options are 'all' or 'none'.",
    ] = None,
    fields_to_retrieve: Annotated[
        str | None,
        "Specify which fields to retrieve for the checklist items, such as `all`, `name`, `nameData`, etc.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-checklists-id-checkitems'."]:
    """Retrieve items from a Trello checklist.

    Use this tool to get all check items from a specified Trello checklist using its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/checkItems",
            params=remove_none_values({
                "filter": filter_check_items,
                "fields": fields_to_retrieve,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_checkitem_on_trello_checklist(
    context: ToolContext,
    checkitem_name: Annotated[
        str,
        "The name of the new checkitem for the checklist, with a length between 1 and 16384 characters.",  # noqa: E501
    ],
    checkitem_position: Annotated[
        str | None,
        "The position of the check item in the checklist. Accepts 'top', 'bottom', or a positive number to specify position.",  # noqa: E501
    ] = None,
    due_date_for_checkitem: Annotated[
        str | None, "Specify the due date for the checkitem in ISO 8601 format (e.g., YYYY-MM-DD)."
    ] = None,
    due_reminder_minutes_before_due: Annotated[
        float | None,
        "The number of minutes before the due date when a reminder should be sent for the checkitem.",  # noqa: E501
    ] = None,
    member_id: Annotated[
        str | None, "The ID of a Trello member to assign to the checkitem."
    ] = None,
    is_item_checked: Annotated[
        bool | None,
        "Indicate if the check item should be marked as checked upon creation. Accepts a boolean value.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-checklists-id-checkitems'."]:
    """Add a checkitem to a specific Trello checklist.

    Use this tool to add a new checkitem to an existing checklist on Trello by specifying the checklist ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/checkItems",
            params=remove_none_values({
                "name": checkitem_name,
                "pos": checkitem_position,
                "checked": is_item_checked,
                "due": due_date_for_checkitem,
                "dueReminder": due_reminder_minutes_before_due,
                "idMember": member_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_checkitem_on_checklist(
    context: ToolContext,
    checkitem_fields: Annotated[
        str | None,
        "Specify fields to be retrieved for the checkitem. Options include: all, name, nameData, pos, state, type, due, dueReminder, idMember.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-checklists-id-checkitems-idcheckitem'."
]:
    """Retrieve a specific checkitem from a checklist on Trello.

    This tool fetches details of a specific checkitem from a checklist on Trello. It should be used when you need to access information about a particular checkitem's status or details within a checklist."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/checkItems/{idCheckItem}",
            params=remove_none_values({
                "fields": checkitem_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_checklist_item(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-checklists-id-checkitems-idcheckitem'."
]:
    """Removes an item from a Trello checklist.

    Use this tool to delete a specific item from a checklist on Trello by providing the checklist ID and the item ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/checklists/{id}/checkItems/{idCheckItem}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_custom_field(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-customfields-id'."]:
    """Retrieve details of a specific Trello custom field.

    This tool is used to get information about a specific custom field in Trello by its ID. It should be called when you need details of a custom field, such as for displaying information or making decisions based on field data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_custom_field_from_board(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-customfields-id'."]:
    """Deletes a custom field from a Trello board.

    This tool should be called when you need to remove a custom field from a Trello board. It handles the deletion process and confirms successful removal."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_option_to_dropdown_custom_field(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-customfields-id-options'."]:
    """Add a new option to a Trello dropdown custom field.

    Use this tool to add a new option to a specified dropdown custom field in Trello. It should be called when you need to expand the choices available in a dropdown menu within a Trello card custom field."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}/options",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_custom_field_options(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-customfields-id-options'."]:
    """Retrieve options for a Trello drop-down custom field.

    Use this tool to get all available options for a specific drop-down custom field in Trello by providing the custom field ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}/options",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_custom_field_option(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-customfields-options-idcustomfieldoption'."
]:
    """Retrieve details of a Trello custom field dropdown option.

    Use this tool to get information about a specific option within a dropdown-type custom field on Trello. Ideal for obtaining details when managing Trello boards and their associated data fields."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}/options/{idCustomFieldOption}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_delete_customfield_option(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'delete-customfields-options-idcustomfieldoption'.",
]:
    """Delete an option from a Trello custom field dropdown.

    Use this tool to remove a specific option from a dropdown in Trello's custom field. Useful for managing and updating dropdown options in your Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/customFields/{id}/options/{idCustomFieldOption}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_available_emojis(
    context: ToolContext,
    emoji_locale: Annotated[
        str | None,
        "Specify the locale for emoji descriptions and names; defaults to the user's locale if not provided.",  # noqa: E501
    ] = None,
    include_spritesheet_urls: Annotated[
        bool | None, "Set to true to include spritesheet URLs in the response."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'emoji'."]:
    """Retrieve a list of available emojis from Trello.

    Use this tool to get a comprehensive list of all emojis that can be accessed and used on the Trello platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/emoji",
            params=remove_none_values({
                "locale": emoji_locale,
                "spritesheets": include_spritesheet_urls,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_enterprise_by_id(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier for the Trello enterprise to retrieve details for."
    ],
    enterprise_fields_to_retrieve: Annotated[
        str | None,
        "Comma-separated list of enterprise fields to include: `id`, `name`, `displayName`, etc.",
    ] = None,
    member_type: Annotated[
        str | None,
        "Specify the type of members to retrieve: `none`, `normal`, `admins`, `owners`, or `all`.",
    ] = None,
    member_details_field: Annotated[
        str | None,
        "Specify one member detail to retrieve: `avatarHash`, `fullName`, `initials`, or `username`.",  # noqa: E501
    ] = None,
    member_filter_query: Annotated[
        str | None,
        "SCIM-style query to filter members, taking precedence over 'all', 'normal', or 'admins'. If used, pagination is applied to the member array.",  # noqa: E501
    ] = None,
    member_sorting_value: Annotated[
        str | None,
        "A SCIM-style sorting value for sorting members. Prefix with '-' for descending. Uses 'ascending' by default.",  # noqa: E501
    ] = None,
    deprecated_member_sort_by: Annotated[
        str | None,
        "Deprecated SCIM-style sorting value for members; consider using member_sort instead.",
    ] = None,
    use_member_sort_order: Annotated[
        str | None,
        "This argument is deprecated. Consider using `member_sort` instead. Acceptable values are `ascending`, `descending`, `asc`, or `desc`.",  # noqa: E501
    ] = None,
    member_start_index: Annotated[
        int | None, "The starting index for pagination of the member array, ranging from 0 to 100."
    ] = None,
    member_limit: Annotated[
        int | None, "Specify the number of members in the result, ranging from 0 to 100."
    ] = None,
    organization_visibility: Annotated[
        str | None,
        "Specify the visibility of organizations associated with the enterprise. Options: none, members, public, all.",  # noqa: E501
    ] = None,
    organization_fields: Annotated[
        str | None,
        "Specify valid values that the nested organization field resource accepts to retrieve specific organization details.",  # noqa: E501
    ] = None,
    organization_memberships_list: Annotated[
        str | None,
        "Comma-separated list indicating the desired organization memberships: `me`, `normal`, `admin`, `active`, `deactivated`.",  # noqa: E501
    ] = None,
    include_paid_account_info: Annotated[
        bool | None,
        "Set to true to include paid account information in the returned workspace objects, or false to exclude it.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-enterprises-id'."]:
    """Retrieve Trello enterprise details using enterprise ID.

    Use this tool to obtain information about a specific Trello enterprise by providing its ID. Useful for accessing details about an enterprise's configuration, members, and more."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "fields": enterprise_fields_to_retrieve,
                "members": member_type,
                "member_fields": member_details_field,
                "member_filter": member_filter_query,
                "member_sort": member_sorting_value,
                "member_sortBy": deprecated_member_sort_by,
                "member_sortOrder": use_member_sort_order,
                "member_startIndex": member_start_index,
                "member_count": member_limit,
                "organizations": organization_visibility,
                "organization_fields": organization_fields,
                "organization_paid_accounts": include_paid_account_info,
                "organization_memberships": organization_memberships_list,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_enterprise_audit_log(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier of the Trello enterprise to retrieve the audit log for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-enterprises-id-auditlog'."]:
    """Fetch actions from a Trello enterprise's audit log.

    Retrieves and returns an array of actions related to a specific Trello enterprise object from the audit log page. This tool requires an Enterprise admin token and includes actions from AdminHub for enterprises using user management via AdminHub."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/auditlog".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_enterprise_admins(
    context: ToolContext,
    enterprise_id: Annotated[str, "ID of the enterprise to retrieve the admin members from."],
    admin_fields: Annotated[
        str | None,
        "Specify which admin member fields to include. Use values accepted by Trello's nested member field resource.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-enterprises-id-admins'."]:
    """Retrieve admin members of an enterprise in Trello.

    Use this tool to obtain the list of admin members associated with a specific enterprise in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/admins".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "fields": admin_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_enterprise_signup_url(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The ID of the enterprise for which you want to retrieve the signup URL. This is required.",
    ],
    return_url: Annotated[
        str | None,
        "Provide any valid URL to redirect the user after signup. This URL will be used post-signup or redirection.",  # noqa: E501
    ] = None,
    require_authentication: Annotated[
        bool | None,
        "Indicates if authentication is required to access the signup URL. True if needed, false otherwise.",  # noqa: E501
    ] = None,
    confirmation_accepted: Annotated[
        bool | None,
        "Indicates if the user has accepted the confirmation prompt before being redirected to the signup page.",  # noqa: E501
    ] = None,
    user_consented_to_terms_of_service: Annotated[
        bool | None,
        "Indicate if the user has consented to Trello's Terms of Service before being redirected to the signup page.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-enterprises-id-signupurl'."]:
    """Retrieve the signup URL for a specific enterprise.

    Use this tool to get the signup URL for an enterprise in Trello. It should be called when there's a need to direct someone to sign up for a specific enterprise."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/signupUrl".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "authenticate": require_authentication,
                "confirmationAccepted": confirmation_accepted,
                "returnUrl": return_url,
                "tosAccepted": user_consented_to_terms_of_service,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_enterprise_users(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The ID of the Trello enterprise whose users you want to retrieve. This is required to identify the target enterprise.",  # noqa: E501
    ],
    filter_active_since_date: Annotated[
        str | None,
        "Filter users active on or after this date (inclusive). Use ISO 8601 format (e.g., 'YYYY-MM-DD').",  # noqa: E501
    ] = None,
    active_since_date: Annotated[
        str | None,
        "Returns only Trello users who have been active since this date (inclusive). Should be in ISO 8601 format (YYYY-MM-DD).",  # noqa: E501
    ] = None,
    search_value: Annotated[
        str | None,
        "Provide a string to find members whose email address or full name starts with this value.",
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "Cursor string to retrieve the next batch of users. Use the cursor returned from the previous response.",  # noqa: E501
    ] = None,
    licensed_members_filter: Annotated[
        bool | None,
        "Set to true to return licensed members; false for unlicensed members; unspecified returns both.",  # noqa: E501
    ] = None,
    return_deactivated_members: Annotated[
        bool | None,
        "Set to true to return deactivated members, set to false for active members. If unspecified, returns both.",  # noqa: E501
    ] = None,
    include_guests_without_license: Annotated[
        bool | None,
        "Set to true to include members who are guests on boards without a license. False excludes them. Defaults to both.",  # noqa: E501
    ] = None,
    include_managed_users: Annotated[
        bool | None,
        "Set to true to return users managed by the Trello Enterprise; false to exclude them. If unspecified, both managed and unmanaged users are returned.",  # noqa: E501
    ] = None,
    retrieve_administrators: Annotated[
        bool | None,
        "Set true to get members who are administrators, false for non-administrators, or leave unspecified for all.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-users-id'."]:
    """Retrieve users of a Trello enterprise account.

    Use this tool to get information on users within a Trello enterprise. You can specify the type of users to retrieve, such as licensed members or board guests. The response is paginated, returning up to 100 users per request."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/members/query".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "licensed": licensed_members_filter,
                "deactivated": return_deactivated_members,
                "collaborator": include_guests_without_license,
                "managed": include_managed_users,
                "admin": retrieve_administrators,
                "activeSince": filter_active_since_date,
                "inactiveSince": active_since_date,
                "search": search_value,
                "cursor": pagination_cursor,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_enterprise_members(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier of the enterprise whose members you want to retrieve."
    ],
    member_fields: Annotated[
        str | None,
        "A comma-separated list of valid member fields to include in the response. Refer to Trello's member object documentation for valid fields.",  # noqa: E501
    ] = None,
    filter_scim_query: Annotated[
        str | None,
        "SCIM-style query to filter enterprise members, taking precedence over member type values.",
    ] = None,
    sort_members_by: Annotated[
        str | None,
        "SCIM-style sorting string for enterprise members. Prefix with '-' for descending order, otherwise ascending.",  # noqa: E501
    ] = None,
    sort_by: Annotated[
        str | None,
        "Deprecated: Use 'sort' instead. Specifies sorting for members. This accepts SCIM-style values but is not recommended for use.",  # noqa: E501
    ] = None,
    use_deprecated_sort_order: Annotated[
        str | None,
        "Use deprecated sorting order: `ascending`, `descending`, `asc`, `desc`. Recommended to use `sort` instead.",  # noqa: E501
    ] = None,
    start_index: Annotated[
        int | None, "Starting point for pagination, any integer between 0 and 9999."
    ] = None,
    scim_style_filter: Annotated[
        str | None, "A SCIM-style filter to specify the number of members to retrieve."
    ] = None,
    organization_fields: Annotated[
        str | None,
        "Specifies valid fields for nested organization data when retrieving enterprise members.",
    ] = None,
    board_fields_to_include: Annotated[
        str | None,
        "Comma-separated list of board resource fields to include for each member. Refer to Trello's nested board resource for valid values.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-enterprises-id-members'."]:
    """Retrieve members of a specified enterprise on Trello.

    This tool fetches and returns a list of members belonging to a specified enterprise in Trello. Ideal for when user needs to access or display membership information of a Trello enterprise."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/members".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "fields": member_fields,
                "filter": filter_scim_query,
                "sort": sort_members_by,
                "sortBy": sort_by,
                "sortOrder": use_deprecated_sort_order,
                "startIndex": start_index,
                "count": scim_style_filter,
                "organization_fields": organization_fields,
                "board_fields": board_fields_to_include,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_enterprise_member(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The unique identifier of the Trello enterprise for which to retrieve member information.",
    ],
    member_id: Annotated[
        str, "The ID of the Trello member to retrieve details for within the enterprise."
    ],
    member_fields_list: Annotated[
        str | None, "Comma-separated list of valid member field values for retrieval."
    ] = None,
    organization_field_value: Annotated[
        str | None,
        "A valid value for the nested organization field resource, as specified by Trello guidelines.",  # noqa: E501
    ] = None,
    board_details_fields: Annotated[
        str | None,
        "A comma-separated list of valid fields for nested board resources to retrieve specific board information.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-enterprises-id-members-idmember'."
]:
    """Retrieve a specific Trello enterprise member by ID.

    Use this tool to get information about a specific member within a Trello enterprise using the member's ID. Useful for accessing member details for enterprise management."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/members/{idMember}".format(  # noqa: UP032
                id=enterprise_id, idMember=member_id
            ),
            params=remove_none_values({
                "fields": member_fields_list,
                "organization_fields": organization_field_value,
                "board_fields": board_details_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def check_organization_transfer_eligibility(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The ID of the Enterprise for which you want to check organization transfer eligibility.",
    ],
    organization_id: Annotated[
        str, "The ID of the organization to check for transfer eligibility to an enterprise."
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-enterprises-id-transferrable-organization-idOrganization'.",  # noqa: E501
]:
    """Determine if an organization can be transferred to an enterprise.

    Use this tool to check if a specific organization within Trello can be transferred to a given enterprise. This is useful for managing enterprise-level organization transfers."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/transferrable/organization/{idOrganization}".format(  # noqa: UP032
                id=enterprise_id, idOrganization=organization_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_get_transferrable_organizations(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The unique ID of the Enterprise for which you want to retrieve transferrable organizations.",  # noqa: E501
    ],
    organization_ids_array: Annotated[
        list[dict[str, str]],
        "An array of organization IDs to check for transferability to the specified enterprise.",
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-enterprises-id-transferrable-bulk-idOrganizations'.",
]:
    """Retrieve organizations transferrable to an enterprise.

    Use this tool to get a list of organizations that can be transferred to a specified enterprise, based on a provided bulk list of organizations."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/transferrable/bulk/{idOrganizations}".format(  # noqa: UP032
                id=enterprise_id, idOrganizations=organization_ids_array
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def decline_enterprise_join_requests(
    context: ToolContext,
    organization_ids: Annotated[
        list[dict[str, str]],
        "An array of IDs representing the organizations whose join requests are to be declined. Provide one or more organization IDs to manage requests efficiently.",  # noqa: E501
    ],
    enterprise_id_to_decline_requests: Annotated[
        str, "ID of the Enterprise for which join requests are being declined."
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-enterprises-id-enterpriseJoinRequest-bulk'.",
]:
    """Decline requests for joining an enterprise.

    Use this tool to decline enterprise join requests for one or multiple organizations. Suitable for managing membership requests efficiently in Trello enterprises."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/${id}/enterpriseJoinRequest/bulk".format(  # noqa: UP032
                id=enterprise_id_to_decline_requests
            ),
            params=remove_none_values({
                "idOrganizations": organization_ids,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_claimable_workspaces_by_enterprise_id(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique ID of the enterprise for which you want to retrieve claimable workspaces."
    ],
    max_number_of_workspaces: Annotated[
        int | None, "Specify the maximum number of workspaces to retrieve and return."
    ] = None,
    sort_order_for_documents: Annotated[
        str | None, "Specifies the sort order to return matching workspaces in the response."
    ] = None,
    enterprise_name: Annotated[
        str | None,
        "The name of the enterprise to retrieve claimable workspaces for. Specify to filter workspaces by enterprise name.",  # noqa: E501
    ] = None,
    active_since_date: Annotated[
        str | None, "The date (in YYYY-MM-DD format) to filter workspaces active until that date."
    ] = None,
    search_inactive_since_date: Annotated[
        str | None,
        "Date in YYYY-MM-DD format to search up to for inactive workspaces. Filters results by workspace inactiveness.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-enterprises-id-claimableOrganizations'."
]:
    """Retrieve claimable workspaces by enterprise ID.

    Use this tool to get the list of workspaces that an enterprise can claim by specifying its ID. You can optionally filter the results based on activity status."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/claimableOrganizations".format(  # noqa: UP032
                id=enterprise_id
            ),
            params=remove_none_values({
                "limit": max_number_of_workspaces,
                "cursor": sort_order_for_documents,
                "name": enterprise_name,
                "activeSince": active_since_date,
                "inactiveSince": search_inactive_since_date,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_pending_workspaces_for_enterprise(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier for the enterprise from which to retrieve pending workspaces."
    ],
    active_since_date: Annotated[
        str | None, "Date in YYYY-MM-DD format to determine workspace activeness up to that date."
    ] = None,
    inactive_since_date: Annotated[
        str | None,
        "Date in YYYY-MM-DD format indicating up to which date workspaces are considered inactive.",
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-enterprises-id-pendingOrganizations'."
]:
    """Retrieve pending workspaces for a specific enterprise.

    Use this tool to get the workspaces that are pending approval for a given enterprise by its ID on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/pendingOrganizations".format(  # noqa: UP032
                id=enterprise_id
            ),
            params=remove_none_values({
                "activeSince": active_since_date,
                "inactiveSince": inactive_since_date,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_enterprise_auth_token(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier for the Trello enterprise for which to generate an auth token."
    ],
    token_expiration: Annotated[
        str | None,
        "The duration for which the authentication token is valid. Options: `1hour`, `1day`, `30days`, `never`.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-enterprises-id-tokens'."]:
    """Generate an authentication token for an enterprise in Trello.

    This tool is used to create an authentication token for a specific enterprise on Trello, which can be utilized for authorized API interactions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/tokens".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "expiration": token_expiration,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def transfer_organization_to_enterprise(
    context: ToolContext,
    organization_id_to_transfer: Annotated[
        str, "The unique identifier of the organization to be transferred to the enterprise."
    ],
    enterprise_id: Annotated[
        str, "The ID of the enterprise to which the organization will be transferred."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-enterprises-id-organizations'."
]:
    """Transfer an organization to an enterprise.

    This tool transfers an organization to an enterprise on Trello. For enterprises using AdminHub, organizations are added asynchronously. A 200 response confirms receipt of the transfer request, not successful completion."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/organizations".format(id=enterprise_id),  # noqa: UP032
            params=remove_none_values({
                "idOrganization": organization_id_to_transfer,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_member_license(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The unique identifier for the Enterprise. Required to specify the Enterprise in which the member's license status will be updated.",  # noqa: E501
    ],
    member_id: Annotated[
        str, "The unique identifier of the Trello member whose license status is to be updated."
    ],
    grant_enterprise_license: Annotated[
        bool,
        "Set to true to grant the member an Enterprise license, or false to not grant it. Cannot revoke for AdminHub-managed enterprises.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-enterprises-id-members-idmember-licensed'."
]:
    """Update a Trello member's license status in an enterprise.

    Use this tool to modify whether an enterprise member should have a Trello license. Note: Cannot revoke licenses for enterprises using AdminHub for user management."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/members/{idMember}/licensed".format(  # noqa: UP032
                id=enterprise_id, idMember=member_id
            ),
            params=remove_none_values({
                "value": grant_enterprise_license,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def deactivate_enterprise_member_trello(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "ID of the enterprise to deactivate a member in. This is required to identify the correct enterprise.",  # noqa: E501
    ],
    member_id_to_deactivate: Annotated[
        str, "The ID of the member to deactivate in the Trello enterprise."
    ],
    deactivate_user: Annotated[
        bool, "Set to true to deactivate the user, and false to keep them active."
    ],
    member_fields_list: Annotated[
        str | None,
        "Comma-separated values for filtering member fields to deactivate. Only 'id' is valid.",
    ] = None,
    organization_field_value: Annotated[
        str | None,
        "Specify a valid organization field value such as 'id' or 'name' that the nested organization resource accepts.",  # noqa: E501
    ] = None,
    board_field_values: Annotated[
        str | None, "A comma-separated list of board fields to retrieve, such as id, name, or desc."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'enterprises-id-members-idMember-deactivated'."
]:
    """Deactivate a member in a Trello enterprise.

    This tool deactivates a specified member within a Trello enterprise. Note that deactivation is not possible for enterprises using AdminHub for user management."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/members/{idMember}/deactivated".format(  # noqa: UP032
                id=enterprise_id, idMember=member_id_to_deactivate
            ),
            params=remove_none_values({
                "value": deactivate_user,
                "fields": member_fields_list,
                "organization_fields": organization_field_value,
                "board_fields": board_field_values,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def make_trello_member_enterprise_admin(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The ID of the Trello enterprise to make the member an admin of."
    ],
    member_id_for_admin_promotion: Annotated[
        str, "The ID of the Trello member to be promoted to enterprise admin status."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-enterprises-id-admins-idmember'."
]:
    """Promote a Trello member to enterprise admin status.

    Use this tool to make a Trello member an admin of an enterprise. Not applicable to enterprises using AdminHub for user management."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/admins/{idMember}".format(  # noqa: UP032
                id=enterprise_id, idMember=member_id_for_admin_promotion
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_enterprise_admin(
    context: ToolContext,
    enterprise_id: Annotated[str, "The unique identifier of the Trello enterprise to modify."],
    member_id_to_remove: Annotated[
        str,
        "ID of the member to be removed as an admin from the enterprise. This is necessary to target the specific member within the enterprise.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'enterprises-id-organizations-idmember'."
]:
    """Removes a member as an admin from a Trello enterprise.

    Use this tool to remove a member's admin status from a Trello enterprise. Note that this is not available for enterprises using AdminHub for user management."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/admins/{idMember}".format(  # noqa: UP032
                id=enterprise_id, idMember=member_id_to_remove
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_organization_from_enterprise(
    context: ToolContext,
    enterprise_id: Annotated[
        str, "The unique identifier of the enterprise from which the organization is to be removed."
    ],
    organization_id: Annotated[
        str, "The ID of the organization to be removed from the enterprise in Trello."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-enterprises-id-organizations-idorg'."
]:
    """Remove an organization from an enterprise in Trello.

    This tool is used to remove a specific organization from an enterprise in Trello. It should be called when an organization needs to be detached from an enterprise."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/organizations/{idOrg}".format(  # noqa: UP032
                id=enterprise_id, idOrg=organization_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_organizations_to_enterprise(
    context: ToolContext,
    enterprise_id: Annotated[
        str,
        "The ID of the Trello enterprise to which organizations are being added. This identifies the specific enterprise for the operation.",  # noqa: E501
    ],
    organization_ids_to_add: Annotated[
        list[dict[str, str]],
        "An array of IDs of the organizations to add to the enterprise. Each ID should be a string.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-enterprises-id-organizations-bulk-idOrganizations'.",
]:
    """Initiate the addition of organizations to a Trello enterprise.

    Use this tool to start adding multiple organizations to a specified Trello enterprise. A 200 response confirms the request was received, but not the successful addition."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/enterprises/{id}/organizations/bulk/{idOrganizations}".format(  # noqa: UP032
                id=enterprise_id, idOrganizations=organization_ids_to_add
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_label_info(
    context: ToolContext,
    fields_details_to_retrieve: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields to retrieve information about the Trello label, such as name and color.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-labels-id'."]:
    """Retrieve details about a specific Trello label.

    Use this tool to get information about a single Trello label by its ID, such as name, color, and other attributes. Useful for understanding label details in Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/labels/{id}",
            params=remove_none_values({
                "fields": fields_details_to_retrieve,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_label(
    context: ToolContext,
    new_label_name: Annotated[
        str | None, "The new name for the Trello label to be updated."
    ] = None,
    new_label_color: Annotated[
        str | None,
        "Specify the new color for the label. Options: yellow, purple, blue, red, green, orange, black, sky, pink, lime.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-labels-id'."]:
    """Update a Trello label by its ID.

    This tool updates the details of a Trello label using its unique ID. Use it to modify label properties such as color or name on a Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/labels/{id}",
            params=remove_none_values({
                "name": new_label_name,
                "color": new_label_color,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_label_by_id(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-labels-id'."]:
    """Delete a Trello label using its ID.

    Use this tool to remove a specific label from a Trello board by providing the label's unique ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/labels/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_label_field(
    context: ToolContext,
    new_value_for_label_field: Annotated[
        str, "The new value to update the specified field on the Trello label."
    ],
    label_id: Annotated[str, "The unique identifier for the Trello label you want to update."],
    label_field_to_update: Annotated[
        str, "Specify the label field to update, either 'color' or 'name'."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-labels-id-field'."]:
    """Update a specific field on a Trello label.

    Use this tool to update a field on a specific Trello label, such as changing its name or color."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/labels/{id}/{field}".format(  # noqa: UP032
                id=label_id, field=label_field_to_update
            ),
            params=remove_none_values({
                "value": new_value_for_label_field,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_label(
    context: ToolContext,
    label_name: Annotated[str, "The name for the new label to be created on the Trello board."],
    label_color: Annotated[
        str,
        "The color of the label to be created on the board. Must be one of the following: yellow, purple, blue, red, green, orange, black, sky, pink, lime.",  # noqa: E501
    ],
    board_id_for_label_creation: Annotated[
        str, "The unique identifier of the Trello board where the label will be created."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-labels'."]:
    """Create a new label on a Trello board.

    Use this tool to add a new label to a specific board in Trello, helping organize tasks."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/labels",
            params=remove_none_values({
                "name": label_name,
                "color": label_color,
                "idBoard": board_id_for_label_creation,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_list_info(
    context: ToolContext,
    list_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of Trello list field names to retrieve specific information.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-lists-id'."]:
    """Retrieve information about a Trello list by ID.

    Use this tool to get details on a specific Trello list using its ID. It returns various attributes of the list, providing insights into its contents and structure."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}",
            params=remove_none_values({
                "fields": list_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_list_properties(
    context: ToolContext,
    new_list_name: Annotated[str | None, "The new name to assign to the Trello list."] = None,
    target_board_id: Annotated[
        str | None,
        "The ID of the board where the list should be moved. Use this to transfer the list to a different board.",  # noqa: E501
    ] = None,
    new_list_position: Annotated[
        str | None,
        "Specify the new position of the Trello list as 'top', 'bottom', or a positive floating point number to set the exact position.",  # noqa: E501
    ] = None,
    archive_list: Annotated[
        bool | None, "Set to true to archive the list (close it), false to keep it active."
    ] = None,
    is_member_subscribed: Annotated[
        bool | None,
        "Indicates whether the active member is subscribed to the list. Use true for subscribed, false for not subscribed.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-lists-id'."]:
    """Update properties of a Trello list using its ID.

    This tool is used to update the properties of a specific list in Trello by providing the list ID. Call this tool when you need to modify list attributes."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}",
            params=remove_none_values({
                "name": new_list_name,
                "closed": archive_list,
                "idBoard": target_board_id,
                "pos": new_list_position,
                "subscribed": is_member_subscribed,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_list(
    context: ToolContext,
    list_name: Annotated[str, "The name for the new list you want to create on the Trello board."],
    board_id: Annotated[
        str, "The unique identifier of the Trello board where the list will be created."
    ],
    copy_from_list_id: Annotated[
        str | None,
        "The ID of the existing list to copy when creating the new list. If not provided, no copying occurs.",  # noqa: E501
    ] = None,
    list_position: Annotated[
        str | None,
        "Specifies the position of the new list on the Trello board. Can be 'top', 'bottom', or a positive floating point number indicating a specific position.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-lists'."]:
    """Create a new list on a specified Trello board.

    Use this tool to add a new list to any board on Trello. Ideal for organizing tasks or projects by creating distinct sections within a board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists",
            params=remove_none_values({
                "name": list_name,
                "idBoard": board_id,
                "idListSource": copy_from_list_id,
                "pos": list_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def archive_all_cards_in_list(
    context: ToolContext,
    list_id: Annotated[str, "The unique identifier of the Trello list to archive all cards from."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-lists-id-archiveallcards'."]:
    """Archive all cards in a specified Trello list.

    Use this tool to archive every card in a specific Trello list. Ideal for managing list organization by clearing completed or inactive tasks."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/archiveAllCards".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def move_all_cards_in_list(
    context: ToolContext,
    target_board_id: Annotated[
        str, "The ID of the board to which all cards from the list should be moved."
    ],
    target_list_id: Annotated[str, "The ID of the target list where the cards should be moved."],
    source_list_id: Annotated[
        str, "The ID of the Trello list from which all cards should be moved."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-lists-id-moveallcards'."]:
    """Move all cards from one Trello list to another.

    Use this tool to transfer all cards from a specified Trello list to another list. Call this when you need to reorganize or consolidate tasks within the Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/moveAllCards".format(id=source_list_id),  # noqa: UP032
            params=remove_none_values({
                "idBoard": target_board_id,
                "idList": target_list_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_list_status(
    context: ToolContext,
    list_id: Annotated[str, "The unique ID of the Trello list to archive or unarchive."],
    archive_list: Annotated[
        str | None, "Set to true to archive the list; false to unarchive it."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-lists-id-closed'."]:
    """Archive or unarchive a Trello list.

    Use this tool to change the status of a Trello list to either archived or active. This is useful for organizing lists within your Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/closed".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "value": archive_list,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def move_list_to_different_board(
    context: ToolContext,
    target_board_id: Annotated[
        str,
        "The unique identifier of the board to which the list will be moved. Ensure the board ID is correct and corresponds to an existing board in your Trello account.",  # noqa: E501
    ],
    list_id: Annotated[str, "The unique identifier of the list to be moved to a different board."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-id-idboard'."]:
    """Moves a Trello list to a different board.

    This tool is used to move a specific list from its current board to another board in Trello. Call this tool when you need to organize or reorganize lists across different Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/idBoard".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "value": target_board_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def rename_trello_list(
    context: ToolContext,
    list_id: Annotated[str, "The unique identifier of the Trello list to be renamed."],
    list_field_to_update: Annotated[
        str, "Specify 'name' to rename the list on Trello. Choose from 'name', 'pos', 'subscribed'."
    ],
    new_list_name: Annotated[str | None, "The new name for the Trello list to be updated."] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-lists-id-field'."]:
    """Rename a list on Trello.

    Use this tool to change the name of a specific list on Trello by providing the list's ID and the new name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/{field}".format(  # noqa: UP032
                id=list_id, field=list_field_to_update
            ),
            params=remove_none_values({
                "value": new_list_name,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_list_actions(
    context: ToolContext,
    list_id: Annotated[str, "The ID of the Trello list to retrieve actions for."],
    action_types_filter: Annotated[
        str | None,
        "A comma-separated list of Trello action types to filter the results. Refer to the Trello action types documentation for valid options.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-lists-id-actions'."]:
    """Retrieve actions from a specific Trello list.

    Use this tool to get all the actions that have been performed on a specific Trello list by providing the list ID. It can be used to track changes and activities related to the list."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/actions".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "filter": action_types_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_board_for_list(
    context: ToolContext,
    list_id: Annotated[
        str, "The unique identifier of the Trello list for which to retrieve board information."
    ],
    board_fields: Annotated[
        str | None,
        "Specify `all` or a list of board fields to retrieve, separated by commas. Use fields from Trello's board object.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-lists-id-board'."]:
    """Retrieve the board details for a specified Trello list ID.

    Use this tool to find out which board a specific Trello list belongs to. It returns details about the board associated with the given list ID, helping users navigate their Trello information efficiently."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/board".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "fields": board_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_trello_cards(
    context: ToolContext,
    list_id: Annotated[
        str,
        "The unique identifier of the Trello list from which to retrieve all cards. This is a required string value.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-lists-id-cards'."]:
    """Retrieve all cards from a specific Trello list.

    Use this tool to get all cards within a particular Trello list by providing the list ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/lists/{id}/cards".format(id=list_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_member(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose details you want to retrieve."
    ],
    include_actions_nested_resource: Annotated[
        str | None,
        "Specifies if and how to include actions. See the Actions Nested Resource for options.",
    ] = None,
    include_boards_information: Annotated[
        str | None,
        "Fetch additional board-related details for the member. Refer to the Boards Nested Resource documentation for more specifics.",  # noqa: E501
    ] = None,
    board_backgrounds_filter: Annotated[
        str | None,
        "Specify the type of board backgrounds to retrieve: 'all', 'custom', 'default', 'none', or 'premium'.",  # noqa: E501
    ] = None,
    boards_invited_filter: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of board statuses such as closed, members, open, organization, pinned, public, starred, unpinned to filter invited boards.",  # noqa: E501
    ] = None,
    boards_invited_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of board fields such as id, name, desc, etc., to retrieve specific fields for boards the member is invited to.",  # noqa: E501
    ] = None,
    include_card_details: Annotated[
        str | None,
        "Specify if card details associated with the member should be retrieved, with options detailed in the Cards Nested Resource guide.",  # noqa: E501
    ] = None,
    custom_board_backgrounds: Annotated[
        str | None, "Specify if all or none of the custom board backgrounds are included."
    ] = None,
    include_custom_emoji: Annotated[
        str | None, "Include all custom emojis if set to 'all', or exclude them if set to 'none'."
    ] = None,
    include_custom_stickers: Annotated[
        str | None,
        "Specify whether to include all custom stickers ('all') or none ('none') in the member data.",  # noqa: E501
    ] = None,
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a list of member fields to retrieve, such as 'id,email,fullName'.",
    ] = None,
    include_notifications: Annotated[
        str | None,
        "Include notifications related data for the member. See the Trello Notifications Nested Resource for more details.",  # noqa: E501
    ] = None,
    include_organizations: Annotated[
        str | None,
        "Specify which organizations to include for the Trello member. Options: 'all', 'members', 'none', 'public'.",  # noqa: E501
    ] = None,
    organization_fields_to_include: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields (e.g., 'id,name') to retrieve specific organization details.",  # noqa: E501
    ] = None,
    include_invited_organizations: Annotated[
        str | None,
        "Specify which invited organizations to include: 'all', 'members', 'none', or 'public'.",
    ] = None,
    organizations_invited_fields: Annotated[
        str | None,
        "Specify 'all' or provide a comma-separated list of organization fields to retrieve, such as 'id,name'.",  # noqa: E501
    ] = None,
    include_tokens: Annotated[
        str | None,
        "Specify whether to include all tokens or none in the retrieved member data. Use 'all' to include all tokens, or 'none' to exclude them.",  # noqa: E501
    ] = None,
    include_board_stars: Annotated[
        bool | None, "Whether to return the board stars. Set to true to include the data."
    ] = None,
    include_organization_paid_account_info: Annotated[
        bool | None,
        "Set to true to include paid account information in the returned workspace object.",
    ] = None,
    include_paid_account_info: Annotated[
        bool | None,
        "Set to True to include paid account information in the returned member object.",
    ] = None,
    include_saved_searches: Annotated[
        bool | None,
        "Set to `true` to include saved searches in the member information. Use `false` to exclude.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members=id'."]:
    """Retrieve detailed information about a Trello member using their ID.

    This tool fetches detailed information about a Trello member given their specific ID. It is useful when detailed member data is needed for tasks involving user management or collaboration analysis on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "actions": include_actions_nested_resource,
                "boards": include_boards_information,
                "boardBackgrounds": board_backgrounds_filter,
                "boardsInvited": boards_invited_filter,
                "boardsInvited_fields": boards_invited_fields,
                "boardStars": include_board_stars,
                "cards": include_card_details,
                "customBoardBackgrounds": custom_board_backgrounds,
                "customEmoji": include_custom_emoji,
                "customStickers": include_custom_stickers,
                "fields": member_fields,
                "notifications": include_notifications,
                "organizations": include_organizations,
                "organization_fields": organization_fields_to_include,
                "organization_paid_account": include_organization_paid_account_info,
                "organizationsInvited": include_invited_organizations,
                "organizationsInvited_fields": organizations_invited_fields,
                "paid_account": include_paid_account_info,
                "savedSearches": include_saved_searches,
                "tokens": include_tokens,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_member(
    context: ToolContext,
    member_id_or_username: Annotated[str, "The ID or username of the Trello member to update."],
    member_full_name: Annotated[
        str | None, "New name for the Trello member. Ensure it does not begin or end with a space."
    ] = None,
    member_initials: Annotated[
        str | None, "New initials for the member. Must be 1-4 characters long."
    ] = None,
    new_username: Annotated[
        str | None,
        "New unique username for the member. Must be at least 3 characters long, containing only lowercase letters, underscores, and numbers.",  # noqa: E501
    ] = None,
    member_bio_update: Annotated[
        str | None,
        "A new biography for the Trello member. It should provide a brief description or info about the member.",  # noqa: E501
    ] = None,
    avatar_source: Annotated[
        str | None, "Specify the source of the avatar. Choose 'gravatar', 'none', or 'upload'."
    ] = None,
    preferences_locale: Annotated[
        str | None,
        "Locale setting for the member's preferences. Specify as a language code, e.g., 'en-US'.",
    ] = None,
    summary_update_frequency: Annotated[
        int | None,
        "Set the frequency for summary updates. Use `-1` to disable, `1` for every minute, or `60` for hourly updates.",  # noqa: E501
    ] = None,
    enable_color_blind_mode: Annotated[
        bool | None, "Set to true to enable color blind mode in the member's preferences."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-members-id'."]:
    """Update Trello member details.

    Use this tool to update details of a Trello member by specifying their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "fullName": member_full_name,
                "initials": member_initials,
                "username": new_username,
                "bio": member_bio_update,
                "avatarSource": avatar_source,
                "prefs/colorBlind": enable_color_blind_mode,
                "prefs/locale": preferences_locale,
                "prefs/minutesBetweenSummaries": summary_update_frequency,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_member_property(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member to retrieve information for."
    ],
    member_property_field: Annotated[
        str,
        "The specific property of the Trello member to retrieve, such as 'username' or 'email'.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-field'."]:
    """Retrieve a specific property of a Trello member.

    Use this tool to get a particular property, such as username or email, of a Trello member by specifying their ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/{field}".format(  # noqa: UP032
                id=member_id_or_username, field=member_property_field
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_member_actions(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose actions you want to retrieve."
    ],
    action_type_filter: Annotated[
        str | None,
        "Comma-separated list of action types to filter the member's actions, based on Trello's available action types.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-actions'."]:
    """Retrieve actions for a specific Trello member.

    This tool is used to list all actions associated with a specific Trello member, identified by their member ID. It should be called when you need to view the activities or changes made by a member on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/actions".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "filter": action_type_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_board_backgrounds(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose board backgrounds you want to retrieve."
    ],
    background_filter: Annotated[
        str | None,
        "Specify which board backgrounds to retrieve: `all`, `custom`, `default`, `none`, or `premium`.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-boardbackgrounds'."]:
    """Retrieve a member's custom board backgrounds from Trello.

    This tool is used to get the custom board backgrounds for a specific Trello member. It should be called when you need to retrieve or display the background images a member has set up for their boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardBackgrounds".format(  # noqa: UP032
                id=member_id_or_username
            ),
            params=remove_none_values({
                "filter": background_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def upload_trello_board_background(
    context: ToolContext,
    board_background_file_path: Annotated[
        str,
        "The path to the image file for the board background to upload. This should be a string representing the file's location in your system.",  # noqa: E501
    ],
    member_id_or_username: Annotated[
        str,
        "The ID or username of the Trello member. This specifies whose board background is to be uploaded.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'post-members-id-boardbackgrounds-1'."
]:
    """Upload a new board background to Trello.

    This tool uploads a new background image to a Trello board for a specified member. Use it when you need to change or customize the appearance of a Trello board by adding a new background."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardBackgrounds".format(  # noqa: UP032
                id=member_id_or_username
            ),
            params=remove_none_values({
                "file": board_background_file_path,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_board_background(
    context: ToolContext,
    background_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of: 'brightness', 'fullSizeUrl', 'scaled', 'tile' to retrieve specific fields of a member's board background.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-boardbackgrounds-idbackground'."
]:
    """Retrieve a member's board background from Trello.

    Use this tool to get specific details about a member's board background in Trello by providing the member ID and background ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardBackgrounds/{idBackground}",
            params=remove_none_values({
                "fields": background_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_board_background(
    context: ToolContext,
    background_brightness: Annotated[
        str | None,
        "Set the brightness of the board background to either `dark`, `light`, or `unknown`.",
    ] = None,
    enable_tile_background: Annotated[
        bool | None, "Set to true if the board background should be tiled, false otherwise."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-members-id-boardbackgrounds-idbackground'."
]:
    """Update a Trello board background for a member.

    This tool is used to update the background image of a Trello board for a specific member. Call this tool when you need to change the visual appearance of a Trello board by updating its background."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardBackgrounds/{idBackground}",
            params=remove_none_values({
                "brightness": background_brightness,
                "tile": enable_tile_background,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_board_background(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'delete-members-id-boardbackgrounds-idbackground'.",
]:
    """Delete a specific board background for a Trello member.

    This tool deletes a specific background image from a Trello board associated with a particular member. It should be called when a user wants to remove a background image from a Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardBackgrounds/{idBackground}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_member_board_stars(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose board stars you want to list."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-boardstars'."]:
    """Fetch the list of a member's starred Trello boards.

    Use this tool to retrieve the board stars of a specific Trello member."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardStars".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def star_board_on_trello(
    context: ToolContext,
    board_id_to_star: Annotated[
        str, "The identifier of the Trello board that you want to star for the member."
    ],
    board_star_position: Annotated[
        str,
        "The position to star the board: `top`, `bottom`, or a specific position as a positive float.",  # noqa: E501
    ],
    member_id_or_username: Annotated[
        str, "The Trello member's ID or username to star the board for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-members-id-boardstars'."]:
    """Star a board for a Trello member.

    Use this tool to star a board for a Trello member by specifying their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardStars".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "idBoard": board_id_to_star,
                "pos": board_star_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_specific_board_star(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-boardstars-idstar'."
]:
    """Retrieve details of a specific board star.

    This tool calls Trello's API to get details about a specific board star for a member. Use it when you need to access information about a specific board star based on the member ID and star ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardStars/{idStar}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_starred_board_position(
    context: ToolContext,
    new_starred_board_position: Annotated[
        str | None,
        "The new position for the starred board. Use `top`, `bottom`, or a positive float to specify the position.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-members-id-boardstars-idstar'."
]:
    """Update the position of a starred board in Trello.

    This tool updates the position of a starred board for a specific member on Trello. It should be called when there's a need to reorder starred boards for better organization."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardStars/{idStar}",
            params=remove_none_values({
                "pos": new_starred_board_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def unstar_board_on_trello(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-members-id-boardstars-idstar'."
]:
    """Unstar a Trello board for a specific member.

    Use this tool to unstar a board for a specified member on Trello. Call it when a user wants to remove a board from their starred list."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardStars/{idStar}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_user_boards_trello(
    context: ToolContext,
    user_identifier: Annotated[str, "The Trello member's ID or username to retrieve their boards."],
    board_filter_options: Annotated[
        str | None,
        "Specify which types of boards to retrieve: 'all', or a comma-separated list including 'closed', 'members', 'open', 'organization', 'public', 'starred'.",  # noqa: E501
    ] = None,
    board_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of board fields to retrieve, such as 'id', 'name', 'desc'.",  # noqa: E501
    ] = None,
    include_lists: Annotated[
        str | None,
        "Specify which lists to include with the boards: `all`, `closed`, `none`, or `open`.",
    ] = None,
    organization_fields_to_include: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of organization fields such as 'id' or 'name' to include with the boards.",  # noqa: E501
    ] = None,
    include_organization: Annotated[
        bool | None, "Set to true to include the Organization object with the boards."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-boards'."]:
    """Retrieve the boards a user is a member of in Trello.

    Use this tool to get a list of Trello boards that a specific user is a member of by their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boards".format(id=user_identifier),  # noqa: UP032
            params=remove_none_values({
                "filter": board_filter_options,
                "fields": board_fields,
                "lists": include_lists,
                "organization": include_organization,
                "organization_fields": organization_fields_to_include,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_invited_boards_for_member(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose invited boards you want to retrieve."
    ],
    board_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of board fields like 'id', 'name', 'desc', etc.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-boardsinvited'."]:
    """Retrieve boards a Trello member is invited to.

    Use this tool to get a list of boards to which a specific Trello member has been invited."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/boardsInvited".format(  # noqa: UP032
                id=member_id_or_username
            ),
            params=remove_none_values({
                "fields": board_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_cards_on_trello(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member to retrieve cards for."
    ],
    card_filter_option: Annotated[
        str | None,
        "Filter cards by status: `all`, `closed`, `complete`, `incomplete`, `none`, `open`, `visible`. Determines which cards to retrieve based on visibility and completion status.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-cards'."]:
    """Retrieve cards associated with a Trello member.

    This tool fetches all the cards a specified member is associated with on Trello. It's useful for tracking and managing tasks related to a member."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/cards".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "filter": card_filter_option,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_custom_board_backgrounds(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-customboardbackgrounds'."
]:
    """Retrieve a member's custom board backgrounds from Trello.

    Use this tool to obtain a list of custom board backgrounds associated with a specific Trello member. It provides the background data that the member has customized for their boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customBoardBackgrounds",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def upload_custom_trello_board_background(
    context: ToolContext,
    background_image_url: Annotated[
        str,
        "A URL pointing to the image file for the custom board background. The image should be accessible via this link.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'membersidcustomboardbackgrounds-1'."
]:
    """Upload a new custom board background to Trello.

    This tool uploads a new custom board background to a specific Trello member's account, allowing for personalized customization of Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customBoardBackgrounds",
            params=remove_none_values({
                "file": background_image_url,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_custom_board_background(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-members-id-customboardbackgrounds-idbackground'.",
]:
    """Retrieve a specific custom board background from Trello.

    This tool fetches details about a specific custom board background for a member on Trello, using their member ID and the background ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customBoardBackgrounds/{idBackground}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_custom_board_background(
    context: ToolContext,
    background_brightness: Annotated[
        str | None,
        "Set the brightness level of the board background. Options are `dark`, `light`, or `unknown`.",  # noqa: E501
    ] = None,
    tile_background: Annotated[
        bool | None,
        "Indicate whether the background should be tiled. Use true for tiling, false otherwise.",
    ] = None,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-members-id-customboardbackgrounds-idbackground'.",
]:
    """Update a specific custom board background.

    Use this tool to update the background of a custom board for a member on Trello."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customBoardBackgrounds/{idBackground}",
            params=remove_none_values({
                "brightness": background_brightness,
                "tile": tile_background,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_board_background(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'delete-members-id-customboardbackgrounds-idbackground'.",
]:
    """Delete a specific custom board background in Trello.

    Removes a custom background from a Trello board for a specified member. Use this when you need to delete a background that is no longer needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customBoardBackgrounds/{idBackground}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_custom_emojis(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-customemoji'."]:
    """Retrieve a Trello member's custom emojis.

    This tool is used to get the custom emojis that a Trello member has uploaded. It should be called when you need to access these emojis for a specific Trello member."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customEmoji",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_custom_emoji(
    context: ToolContext,
    emoji_image_file: Annotated[
        str,
        "The file path or URL of the emoji image to upload. Ensure the file is in a supported format.",  # noqa: E501
    ],
    emoji_name: Annotated[str, "The name of the custom emoji, between 2 and 64 characters long."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-members-id-customemoji'."]:
    """Creates a new custom emoji for a Trello member.

    Use this tool to add a new custom emoji to a Trello member's profile. Ideal for personalizing boards with unique emoji."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customEmoji",
            params=remove_none_values({
                "file": emoji_image_file,
                "name": emoji_name,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_custom_emoji(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose custom emoji details are requested."
    ],
    custom_emoji_id: Annotated[
        str,
        "The unique identifier for the custom emoji to be retrieved. Required to fetch emoji details.",  # noqa: E501
    ],
    emoji_details_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of 'name', 'url' to define which details of the emoji to retrieve.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'membersidcustomemojiidemoji'."]:
    """Retrieve a Trello member's custom emoji.

    Use this tool to get information about a specific custom emoji created by a Trello member. It requires the member's ID and the emoji ID to fetch the details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customEmoji/{idEmoji}".format(  # noqa: UP032
                id=member_id_or_username, idEmoji=custom_emoji_id
            ),
            params=remove_none_values({
                "fields": emoji_details_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_uploaded_stickers(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-customstickers'."]:
    """Retrieve a Trello member's uploaded stickers.

    Use this tool to get the custom stickers uploaded by a specific Trello member, identified by their member ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customStickers",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def upload_custom_sticker_trello(
    context: ToolContext,
    sticker_file_path: Annotated[
        str,
        "The file path to the custom sticker image you want to upload. Ensure the file is accessible and appropriately formatted.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-members-id-customstickers'."]:
    """Upload custom stickers to a Trello member's account.

    Use this tool to upload a new custom sticker to a Trello member's account. It should be called when you want to enhance a user's Trello board with custom visual elements."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customStickers",
            params=remove_none_values({
                "file": sticker_file_path,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_custom_sticker(
    context: ToolContext,
    custom_sticker_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of 'scaled', 'url' to retrieve specific sticker details.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-customstickers-idsticker'."
]:
    """Retrieve a specific member's custom sticker.

    This tool is used to get detailed information about a specific custom sticker belonging to a Trello member. It should be called when you need to access or display a member's custom sticker details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customStickers/{idSticker}",
            params=remove_none_values({
                "fields": custom_sticker_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_member_custom_sticker(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-members-id-customstickers-idsticker'."
]:
    """Delete a member's custom sticker on Trello.

    This tool deletes a specific custom sticker for a member on Trello. Use it when you need to remove a custom sticker associated with a member's profile."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/customStickers/{idSticker}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_notifications(
    context: ToolContext,
    member_identifier: Annotated[
        str, "The ID or username of the Trello member whose notifications are to be retrieved."
    ],
    notification_filter: Annotated[
        str | None, "Filter notifications by type, such as 'all', 'unread', or other valid types."
    ] = None,
    notification_read_status_filter: Annotated[
        str | None,
        "Filter notifications by their read status, choosing from: `all`, `read`, or `unread`.",
    ] = None,
    notification_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of notification fields to retrieve specific data.",
    ] = None,
    notification_limit: Annotated[
        int | None, "Specify the maximum number of notifications to retrieve, up to 1000."
    ] = None,
    notification_page_number: Annotated[
        int | None, "The page number for paginated notifications. Maximum value is 100."
    ] = None,
    notification_before_id: Annotated[
        str | None, "A notification ID to retrieve notifications before the specified ID."
    ] = None,
    since_notification_id: Annotated[
        str | None, "A notification ID to fetch notifications occurring after a specific ID."
    ] = None,
    member_creator_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to include in the response. Fields should match Trello's member field definitions.",  # noqa: E501
    ] = None,
    include_entities: Annotated[
        bool | None,
        "Include entities in the response. Set to true to include additional entity information.",
    ] = None,
    display_notifications: Annotated[
        bool | None, "Set to True to include the display property in the notifications output."
    ] = None,
    include_member_creator_info: Annotated[
        bool | None,
        "Set to true to include information about the member who created the notification.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-notifications'."]:
    """Retrieve a member's notifications from Trello.

    This tool fetches notifications for a specific member in Trello. It should be called when there is a need to see updates or alerts relevant to a user in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/notifications".format(id=member_identifier),  # noqa: UP032
            params=remove_none_values({
                "entities": include_entities,
                "display": display_notifications,
                "filter": notification_filter,
                "read_filter": notification_read_status_filter,
                "fields": notification_fields,
                "limit": notification_limit,
                "page": notification_page_number,
                "before": notification_before_id,
                "since": since_notification_id,
                "memberCreator": include_member_creator_info,
                "memberCreator_fields": member_creator_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_workspaces(
    context: ToolContext,
    member_id_username: Annotated[
        str, "The Trello member's ID or username to retrieve workspaces for."
    ],
    workspace_visibility_filter: Annotated[
        str | None,
        "Filter the workspaces by visibility: 'all', 'members', 'none', or 'public'. 'members' filters to only private workspaces.",  # noqa: E501
    ] = None,
    organization_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of organization fields such as 'id', 'name'.",
    ] = None,
    include_paid_account_info: Annotated[
        bool | None, "Include paid account details in the returned workspace information if true."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-organizations'."]:
    """Retrieve a member's Trello workspaces.

    This tool retrieves the list of workspaces (organizations) associated with a specific Trello member."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/organizations".format(id=member_id_username),  # noqa: UP032
            params=remove_none_values({
                "filter": workspace_visibility_filter,
                "fields": organization_fields,
                "paid_account": include_paid_account_info,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_invited_workspaces(
    context: ToolContext,
    member_id_or_username: Annotated[
        str,
        "The unique ID or username of the Trello member for whom you want to retrieve invited workspaces. This identifies the member in the Trello system.",  # noqa: E501
    ],
    organization_fields_filter: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of organization fields (e.g., 'id,name') to filter the returned data. Use 'all' to include every available field.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-organizationsinvited'."
]:
    """Retrieve a member's invited workspaces.

    Call this tool to get the list of workspaces (organizations) that a specific Trello member has been invited to. Useful for tracking pending workspace invitations."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/organizationsInvited".format(  # noqa: UP032
                id=member_id_or_username
            ),
            params=remove_none_values({
                "fields": organization_fields_filter,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_member_saved_searches(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-savedsearches'."]:
    """Retrieve saved searches for a Trello member.

    This tool retrieves the list of saved searches associated with a specific Trello member ID. It should be called when you need to access or display a member's saved searches on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/savedSearches",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_saved_search(
    context: ToolContext,
    saved_search_name: Annotated[str, "The name of the saved search to be created in Trello."],
    search_query: Annotated[
        str,
        "The search query you want to save in Trello. This can include keywords and filters specific to Trello search functionality.",  # noqa: E501
    ],
    saved_search_position: Annotated[
        str,
        "Specify the position of the saved search: 'top', 'bottom', or a positive float for specific ordering.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-members-id-savedsearches'."]:
    """Create a saved search in Trello for a user.

    Use this tool to create a new saved search for a specific user in Trello. This is useful for organizing and quickly accessing important search queries within Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/savedSearches",
            params=remove_none_values({
                "name": saved_search_name,
                "query": search_query,
                "pos": saved_search_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_saved_search_from_trello(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-savedsearches-idsearch'."
]:
    """Fetch a specific saved search from Trello.

    Use this tool to retrieve information about a specific saved search for a member in Trello. It should be called when you need to access the details of a saved search using the member's ID and the search ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/savedSearches/{idSearch}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_saved_search(
    context: ToolContext,
    new_saved_search_name: Annotated[str | None, "The updated name for the saved search."] = None,
    new_search_query: Annotated[
        str | None, "The updated search query for the saved search."
    ] = None,
    saved_search_position: Annotated[
        str | None,
        "Specify the new position for the saved search: `top`, `bottom`, or a positive float for precise positioning.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-members-id-savedsearches-idsearch'."
]:
    """Update a saved search in Trello for a specific member.

    Use this tool to update the details of a saved search for a specific Trello member. It's useful when changes to search criteria or labels are required."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/savedSearches/{idSearch}",
            params=remove_none_values({
                "name": new_saved_search_name,
                "query": new_search_query,
                "pos": saved_search_position,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_delete_saved_search(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-members-id-savedsearches-idsearch'."
]:
    """Delete a saved search from a Trello member's profile.

    Use this tool to remove a specific saved search associated with a Trello member. Useful for managing or organizing saved searches by permanently removing unwanted entries."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/savedSearches/{idSearch}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_app_tokens(
    context: ToolContext,
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member to retrieve app tokens for."
    ],
    include_webhooks: Annotated[
        bool | None, "Set to true to include webhooks in the app tokens list for the member."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-members-id-tokens'."]:
    """Retrieve a Trello member's app tokens.

    Use this tool to obtain a list of app tokens associated with a specific Trello member by their ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/tokens".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "webhooks": include_webhooks,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_member_avatar(
    context: ToolContext,
    avatar_image_file_path: Annotated[
        str, "The file path of the image to be used as the new avatar for the Trello member."
    ],
    member_id_or_username: Annotated[
        str, "The Trello member's ID or username for whom the avatar is being created."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'membersidavatar'."]:
    """Create a new avatar for a Trello member.

    This tool is used to generate a new avatar for a specified Trello member by their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/avatar".format(id=member_id_or_username),  # noqa: UP032
            params=remove_none_values({
                "file": avatar_image_file_path,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def dismiss_trello_message(
    context: ToolContext,
    message_to_dismiss: Annotated[
        str, "The unique identifier of the message to be dismissed for the specified Trello member."
    ],
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member whose message will be dismissed."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'post-members-id-onetimemessagesdismissed'."
]:
    """Dismiss a specific one-time message for a Trello member.

    Use this tool to dismiss a one-time message for a specific member on Trello. It should be called when a user wants to mark a Trello message as dismissed so that it is no longer shown."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/oneTimeMessagesDismissed".format(  # noqa: UP032
                id=member_id_or_username
            ),
            params=remove_none_values({
                "value": message_to_dismiss,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_notification_channel_settings(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-members-id-notificationChannelSettings'."
]:
    """Retrieve a Trello member's notification channel settings.

    Use this tool to get the notification channel settings for a Trello member by their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/notificationsChannelSettings",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_member_notification_settings(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-members-id-notificationChannelSettings-channel'.",
]:
    """Retrieve a member's blocked notification keys for a channel.

    Use this tool to get the blocked notification keys for a specific member on a given channel in Trello. This can help manage and customize notification settings effectively."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/notificationsChannelSettings/{channel}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_notification_blocked_keys(
    context: ToolContext,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-members-id-notificationChannelSettings-channel-blockedKeys'.",  # noqa: E501
]:
    """Updates blocked notification keys for a Trello member.

    Use this tool to update the notification settings of a Trello member by modifying the blocked keys for a specific channel."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/members/{id}/notificationsChannelSettings/{channel}/{blockedKeys}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_notification(
    context: ToolContext,
    notification_id: Annotated[
        str, "The unique identifier for the Trello notification to be retrieved."
    ],
    include_board_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of board fields to include, such as `id`, `name`, `desc`, etc. Choose fields relevant to your needs.",  # noqa: E501
    ] = None,
    include_card_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of card fields to include in the notification details.",  # noqa: E501
    ] = None,
    notification_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields like id, unread, type, etc., to include in the notification details.",  # noqa: E501
    ] = None,
    include_member_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to include in the response, such as 'id'.",  # noqa: E501
    ] = None,
    member_creator_fields: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of member fields for the creator. Use 'id' or other valid fields.",  # noqa: E501
    ] = None,
    organization_fields_to_include: Annotated[
        str | None,
        "Specify `all` or a comma-separated list of organization fields to retrieve, such as `id` and `name`.",  # noqa: E501
    ] = None,
    include_board_object: Annotated[
        bool | None, "Set to true to include the board object in the notification details."
    ] = None,
    include_card_object: Annotated[
        bool | None, "Set to true to include the card object in the notification details."
    ] = None,
    include_display_object: Annotated[
        bool | None, "Set to true to include the display object with the results."
    ] = None,
    include_entities: Annotated[
        bool | None, "Set to true to include the entities object with the notification results."
    ] = None,
    include_list: Annotated[
        bool | None,
        "Set to `true` to include the list object in the notification details; otherwise, `false`.",
    ] = None,
    include_member_object: Annotated[
        bool | None, "Set to true to include the member object."
    ] = None,
    include_member_creator: Annotated[
        bool | None, "Set to true to include the member object of the creator in the response."
    ] = None,
    include_organization_object: Annotated[
        bool | None, "Set to true to include the organization object in the notification details."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-notifications-id'."]:
    """Retrieve details of a specific Trello notification.

    Use this tool to fetch detailed information about a specific notification in Trello using its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "board": include_board_object,
                "board_fields": include_board_fields,
                "card": include_card_object,
                "card_fields": include_card_fields,
                "display": include_display_object,
                "entities": include_entities,
                "fields": notification_fields,
                "list": include_list,
                "member": include_member_object,
                "member_fields": include_member_fields,
                "memberCreator": include_member_creator,
                "memberCreator_fields": member_creator_fields,
                "organization": include_organization_object,
                "organization_fields": organization_fields_to_include,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_notification_read_status(
    context: ToolContext,
    notification_id: Annotated[str, "The unique identifier for the Trello notification to update."],
    keep_notification_unread: Annotated[
        bool | None, "Set to true to keep the notification unread; false to mark it as read."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-notifications-id'."]:
    """Updates the read status of a Trello notification.

    This tool should be called when you need to change the read status of a specific Trello notification, using its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "unread": keep_notification_unread,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_notification_field(
    context: ToolContext,
    notification_id: Annotated[
        str, "The unique identifier of the Trello notification to retrieve a specific field."
    ],
    notification_field_to_retrieve: Annotated[
        str,
        "Specify which field of the Trello notification to retrieve, such as 'id', 'unread', 'type', 'date', etc.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-notifications-id-field'."]:
    """Retrieve a specific property of a Trello notification.

    Use this tool to get a specific field from a Trello notification by providing the notification's ID and the desired field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/{field}".format(  # noqa: UP032
                id=notification_id, field=notification_field_to_retrieve
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def mark_all_trello_notifications_read(
    context: ToolContext,
    notification_ids: Annotated[
        list[str] | None,
        "A list of notification IDs to mark as read or unread. Provide these as an array of strings.",  # noqa: E501
    ] = None,
    mark_as_read: Annotated[
        bool | None,
        "Set to true to mark notifications as read. Defaults to true, marking notifications as read.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-notifications-all-read'."]:
    """Marks all Trello notifications as read.

    Use this tool to mark all your Trello notifications as read when you need to clear notification alerts."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/all/read",
            params=remove_none_values({
                "read": mark_as_read,
                "ids": notification_ids,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def mark_notification_unread(
    context: ToolContext,
    notification_id: Annotated[
        str, "The unique identifier of the Trello notification to be marked as unread."
    ],
    notification_read_status: Annotated[
        str | None, "Set to 'unread' to mark the notification as unread. Accepted value: 'unread'."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-notifications-id-unread'."]:
    """Marks a Trello notification as unread.

    Use this tool to change the read status of a Trello notification to unread."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/unread".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "value": notification_read_status,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_notification_board(
    context: ToolContext,
    notification_id: Annotated[
        str, "The ID of the Trello notification to retrieve the associated board information."
    ],
    board_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of board fields like 'id', 'name', 'desc', etc., to retrieve specific board details.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-notifications-id-board'."]:
    """Retrieve the board linked to a Trello notification.

    Use this tool to get information about the board associated with a specific Trello notification. It should be called when you need to identify which board a notification is related to in Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/board".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "fields": board_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_notification_card(
    context: ToolContext,
    notification_id: Annotated[
        str, "The unique identifier of the Trello notification to retrieve the associated card."
    ],
    card_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of Trello card fields to retrieve (e.g., 'name,desc,idBoard').",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-notifications-id-card'."]:
    """Retrieve the Trello card linked to a notification.

    Use this tool to find the specific Trello card that is associated with a given notification. Useful for tracking the context or source of a notification."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/card".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "fields": card_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_notification_associated_list(
    context: ToolContext,
    notification_id: Annotated[
        str, "The ID of the notification to retrieve the associated list for."
    ],
    list_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields to include in the response. Refer to Trello's REST API documentation for options.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-notifications-id-list'."]:
    """Retrieve the list linked to a specific notification.

    This tool is used to obtain the list associated with a particular notification ID in Trello."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/list".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "fields": list_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_notification_recipient_member(
    context: ToolContext,
    notification_id: Annotated[
        str, "The unique identifier for the Trello notification to retrieve recipient details."
    ],
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to retrieve information about the member the notification is about. Valid options include field names as specified in Trello's object definitions.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'notificationsidmember'."]:
    """Retrieve the recipient member of a Trello notification.

    This tool fetches information about the member to whom a specific Trello notification is directed, excluding the creator of the notification."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/member".format(id=notification_id),  # noqa: UP032
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_notification_creator(
    context: ToolContext,
    notification_id: Annotated[
        str,
        "The unique identifier for the Trello notification to retrieve the creator's information.",
    ],
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a list of member fields separated by commas to retrieve specific member details.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-notifications-id-membercreator'."
]:
    """Retrieve the creator of a Trello notification.

    Use this tool to get information about the member who created a specific Trello notification by its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/memberCreator".format(  # noqa: UP032
                id=notification_id
            ),
            params=remove_none_values({
                "fields": member_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_notification_organization(
    context: ToolContext,
    notification_id: Annotated[
        str,
        "The unique identifier for the Trello notification to retrieve the associated organization.",  # noqa: E501
    ],
    organization_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields (e.g., 'id,name') to retrieve for the organization.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-notifications-id-organization'."
]:
    """Retrieve the organization linked to a notification on Trello.

    Call this tool to obtain the organization details associated with a specific notification from Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/notifications/{id}/organization".format(  # noqa: UP032
                id=notification_id
            ),
            params=remove_none_values({
                "fields": organization_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_workspace(
    context: ToolContext,
    workspace_display_name: Annotated[
        str, "The display name of the Trello workspace. It should be clear and descriptive."
    ],
    workspace_description: Annotated[
        str | None, "A string providing the description for the Trello Workspace."
    ] = None,
    workspace_identifier: Annotated[
        str | None,
        "A unique identifier for the Workspace. Must be at least 3 characters long using only lowercase letters, underscores, and numbers. Invalid characters will be removed, and duplicates will be auto-resolved.",  # noqa: E501
    ] = None,
    workspace_website_url: Annotated[
        str | None, "A URL starting with `http://` or `https://` for the organization's website."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-organizations'."]:
    """Create a new Trello Workspace.

    This tool is used to create a new Workspace in Trello. It should be called when a user wants to set up a new organizational space within Trello for managing projects and teams."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations",
            params=remove_none_values({
                "displayName": workspace_display_name,
                "desc": workspace_description,
                "name": workspace_identifier,
                "website": workspace_website_url,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_organization_details(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id'."]:
    """Retrieve details of a specific Trello organization by ID.

    Use this tool to get detailed information about a Trello organization by providing its ID. Ideal for accessing organization-specific data on Trello."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_organization(
    context: ToolContext,
    new_organization_name: Annotated[
        str | None,
        "A unique name for the organization. Must contain at least 3 lowercase letters, underscores, or numbers.",  # noqa: E501
    ] = None,
    organization_display_name: Annotated[
        str | None,
        "A new display name for the organization. Must be at least 1 character long and not begin or end with a space.",  # noqa: E501
    ] = None,
    organization_description: Annotated[
        str | None, "A new description for the organization in Trello."
    ] = None,
    organization_website_url: Annotated[
        str | None,
        "The website URL for the organization. It should start with `http://`, `https://`, or be `null`.",  # noqa: E501
    ] = None,
    google_apps_associated_domain: Annotated[
        str | None, "The Google Apps domain to link this organization to."
    ] = None,
    google_apps_version: Annotated[
        int | None,
        "Specify the version of Google Apps to link with the organization. Use `1` or `2`.",
    ] = None,
    board_visibility_restriction_for_workspace_boards: Annotated[
        str | None,
        "Specifies who can create Workspace visible boards: choose from 'admin', 'none', or 'org'.",
    ] = None,
    board_visibility_restrict_for_private_boards: Annotated[
        str | None,
        "Specifies who can create private boards within the organization. Options: 'admin', 'none', 'org'.",  # noqa: E501
    ] = None,
    public_board_visibility_permission: Annotated[
        str | None,
        "Specify who in the Workspace can create public boards. Options: `admin`, `none`, `org`.",
    ] = None,
    organization_invite_restriction_email: Annotated[
        str | None,
        "An email address with optional wildcard characters for organization invite restriction. Format examples: `subdomain.*.trello.com`.",  # noqa: E501
    ] = None,
    workspace_visibility_permission: Annotated[
        str | None, "Set the visibility of the Workspace page. Options: `private` or `public`."
    ] = None,
    disable_external_members_in_workspace: Annotated[
        bool | None,
        "Set to true to restrict non-workspace members from being added to boards inside the Workspace. Set to false to allow them.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-organizations-id'."]:
    """Update organization details in Trello.

    Use this tool to update the details of an existing organization in Trello. This can be used when organization data needs to be modified or corrected."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}",
            params=remove_none_values({
                "name": new_organization_name,
                "displayName": organization_display_name,
                "desc": organization_description,
                "website": organization_website_url,
                "prefs/associatedDomain": google_apps_associated_domain,
                "prefs/externalMembersDisabled": disable_external_members_in_workspace,
                "prefs/googleAppsVersion": google_apps_version,
                "prefs/boardVisibilityRestrict/org": board_visibility_restriction_for_workspace_boards,  # noqa: E501
                "prefs/boardVisibilityRestrict/private": board_visibility_restrict_for_private_boards,  # noqa: E501
                "prefs/boardVisibilityRestrict/public": public_board_visibility_permission,
                "prefs/orgInviteRestrict": organization_invite_restriction_email,
                "prefs/permissionLevel": workspace_visibility_permission,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_organization(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-organizations-id'."]:
    """Deletes a Trello organization by its ID.

    Use this tool to delete an organization from Trello by specifying its unique ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_organization_field(
    context: ToolContext,
    organization_identifier: Annotated[
        str, "Specify the ID or name of the Trello organization to retrieve its field data."
    ],
    organization_field_name: Annotated[
        str, "The specific field name of the organization to retrieve ('id' or 'name')."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-field'."]:
    """Retrieve a specific field from a Trello organization.

    Use this tool to obtain detailed information about a specific field within a Trello organization by specifying the organization ID and field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/{field}".format(  # noqa: UP032
                id=organization_identifier, field=organization_field_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_workspace_actions(
    context: ToolContext,
    workspace_identifier: Annotated[
        str, "The ID or name of the Trello workspace to retrieve actions from."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-actions'."]:
    """Retrieves actions from a specified Trello workspace.

    This tool calls the Trello API to list all actions associated with a specific workspace (organization). It is useful for tracking activity and updates within a workspace."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/actions".format(  # noqa: UP032
                id=workspace_identifier
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_boards_in_workspace(
    context: ToolContext,
    organization_id_or_name: Annotated[
        str, "The ID or name of the Trello organization to list boards for."
    ],
    board_status_filter: Annotated[
        str | None,
        "Specifies which boards to list: `all`, or a comma-separated list of `open`, `closed`, `members`, `organization`, `public`.",  # noqa: E501
    ] = None,
    board_fields_to_retrieve: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of board fields such as 'id', 'name', 'desc', etc., to include in the response.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-boards'."]:
    """Retrieve boards from a specified Trello workspace.

    This tool retrieves a list of boards within a specified Trello workspace. It should be called when a user wants to view all the boards associated with a particular Trello organization."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/boards".format(  # noqa: UP032
                id=organization_id_or_name
            ),
            params=remove_none_values({
                "filter": board_status_filter,
                "fields": board_fields_to_retrieve,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def initiate_trello_csv_export(
    context: ToolContext,
    include_attachments: Annotated[
        bool | None,
        "Set to true to include attachments in the CSV export, or false to exclude them.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-organizations-id-exports'."]:
    """Initiate a CSV export for a Trello organization.

    This tool starts a CSV export process for a specified organization in Trello. Use it to obtain CSV data of the organization's activity or data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/exports",
            params=remove_none_values({
                "attachments": include_attachments,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_organization_exports(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-exports'."]:
    """Retrieve exports for a specified Trello organization.

    Use this tool to get the list of exports available for a given Trello organization by providing the organization ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/exports",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_workspace_members(
    context: ToolContext,
    workspace_id_or_name: Annotated[
        str, "The ID or name of the Trello Workspace to retrieve members from."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-members'."]:
    """Retrieve members of a Trello Workspace.

    This tool retrieves the list of members from a specified Trello Workspace using the Workspace ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members".format(  # noqa: UP032
                id=workspace_id_or_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_organization_members(
    context: ToolContext,
    member_email: Annotated[str, "The email address of the member to update in the organization."],
    member_full_name: Annotated[
        str,
        "The name of the organization member; must be at least 1 character and cannot begin or end with a space.",  # noqa: E501
    ],
    organization_identifier: Annotated[
        str, "The unique ID or name of the Trello organization to update members for."
    ],
    member_role_type: Annotated[
        str | None, "The role type of the member to be updated. Options are 'admin' or 'normal'."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-organizations-id-members'."]:
    """Update members in a Trello organization.

    Use this tool to update the members of a specified Trello organization by providing the organization's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members".format(  # noqa: UP032
                id=organization_identifier
            ),
            params=remove_none_values({
                "email": member_email,
                "fullName": member_full_name,
                "type": member_role_type,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_workspace_memberships(
    context: ToolContext,
    workspace_identifier: Annotated[
        str,
        "The ID or name of the Trello Workspace. This identifies which Workspace's memberships to retrieve.",  # noqa: E501
    ],
    membership_filter: Annotated[
        str | None,
        "A filter option to specify which memberships to retrieve: 'all', 'active', 'admin', 'deactivated', 'me', or 'normal'. Comma-separate multiple values to combine filters.",  # noqa: E501
    ] = None,
    include_member_objects: Annotated[
        bool | None, "Set to true to include Member objects with the Memberships in the response."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-organizations-id-memberships'."
]:
    """Retrieve memberships of a Trello Workspace.

    This tool retrieves all memberships associated with a specified Trello Workspace, providing details about each member's role and status within the organization."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/memberships".format(  # noqa: UP032
                id=workspace_identifier
            ),
            params=remove_none_values({
                "filter": membership_filter,
                "member": include_member_objects,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_organization_membership_details(
    context: ToolContext,
    organization_id_or_name: Annotated[
        str, "The ID or name of the Trello organization from which to retrieve membership details."
    ],
    membership_id: Annotated[str, "The unique ID of the membership to retrieve details for."],
    include_member_object: Annotated[
        bool | None, "Set to true to include the Member object in the response, otherwise false."
    ] = None,
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-organizations-id-memberships-idmembership'.",
]:
    """Retrieve a specific membership from an organization.

    Use this tool to get detailed information about a specific membership within an organization on Trello. This is useful for understanding the roles or limits associated with a membership."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/memberships/{idMembership}".format(  # noqa: UP032
                id=organization_id_or_name, idMembership=membership_id
            ),
            params=remove_none_values({
                "member": include_member_object,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_workspace_plugin_data(
    context: ToolContext,
    organization_id_or_name: Annotated[
        str, "The ID or name of the Trello organization to retrieve plugin data for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-plugindata'."]:
    """Retrieve plugin data for a specific Trello Workspace.

    Use this tool to obtain plugin data associated with a specific Trello Workspace by providing the organization's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/pluginData".format(  # noqa: UP032
                id=organization_id_or_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def list_organization_collections(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-organizations-id-tags'."]:
    """Lists collections for a specified organization on Trello.

    Use this tool to retrieve and list all the collections associated with a specific organization on Trello. Useful for managing and organizing different tags within an organization's workspace."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/tags",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_organization_tag(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-organizations-id-tags'."]:
    """Create a tag within a Trello organization.

    This tool is used to create a new tag in a specific Trello organization. Use it when you need to organize or categorize items within an organization by adding a new tag."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/tags",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def add_or_update_workspace_member(
    context: ToolContext,
    member_role_type: Annotated[
        str, "Role of the member in the workspace; choose one: `admin` or `normal`."
    ],
    organization_id_or_name: Annotated[
        str,
        "The ID or name of the organization (workspace) to which the member should be added or updated.",  # noqa: E501
    ],
    member_id_or_username: Annotated[
        str, "The ID or username of the member to update in the Trello workspace."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'put-organizations-id-members-idmember'."
]:
    """Add a member to a workspace or update their role.

    Use this tool to add a new member to a specific Trello workspace or update the role of an existing member. This is useful for managing workspace access and permissions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members/{idMember}".format(  # noqa: UP032
                id=organization_id_or_name, idMember=member_id_or_username
            ),
            params=remove_none_values({
                "type": member_role_type,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_workplace_member(
    context: ToolContext,
    workspace_id_or_name: Annotated[
        str, "The ID or name of the Trello workspace from which to remove the member."
    ],
    member_id_to_remove: Annotated[
        str,
        "The ID of the member to be removed from the Trello workspace. This should be a valid member ID string.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-organizations-id-members'."]:
    """Remove a member from a Trello workspace.

    This tool removes a specified member from a Trello workspace using the workspace and member IDs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members/{idMember}".format(  # noqa: UP032
                id=workspace_id_or_name, idMember=member_id_to_remove
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_workspace_member_status(
    context: ToolContext,
    organization_identifier: Annotated[
        str, "The ID or name of the Trello organization (Workspace) to update the member's status."
    ],
    member_id_or_username: Annotated[
        str, "The ID or username of the Trello member to deactivate or reactivate in the Workspace."
    ],
    deactivate_member: Annotated[
        bool, "Set to true to deactivate the member or false to reactivate them in the Workspace."
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'put-organizations-id-members-idmember-deactivated'.",
]:
    """Deactivate or reactivate a Trello Workspace member.

    Use this tool to change the activation status of a member in a Trello Workspace. It can be used to either deactivate or reactivate a member."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members/{idMember}/deactivated".format(  # noqa: UP032
                id=organization_identifier, idMember=member_id_or_username
            ),
            params=remove_none_values({
                "value": deactivate_member,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def set_workspace_logo(
    context: ToolContext,
    workspace_identifier: Annotated[
        str, "The ID or name of the Trello Workspace for which the logo is to be updated."
    ],
    logo_image_file: Annotated[
        str | None, "The file path or URL of the image to use as the logo for the Trello Workspace."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-organizations-id-logo'."]:
    """Update the logo image for a Trello Workspace.

    This tool sets the logo image for a specified Trello Workspace using its ID. It should be called when there's a need to update or set a new logo for an existing workspace."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/logo".format(id=workspace_identifier),  # noqa: UP032
            params=remove_none_values({
                "file": logo_image_file,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_workspace_logo(
    context: ToolContext,
    workspace_id: Annotated[
        str, "The ID or name of the Trello workspace from which to remove the logo."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-organizations-id-logo'."]:
    """Delete the logo from a Trello workspace.

    Use this tool to remove the logo associated with a specific Trello workspace by providing the workspace ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/logo".format(id=workspace_id),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_member_from_workspace(
    context: ToolContext,
    organization_identifier: Annotated[
        str,
        "The ID or name of the Trello organization (Workspace) from which the member will be removed.",  # noqa: E501
    ],
    member_id_to_remove: Annotated[
        str, "The ID of the member to remove from the Trello Workspace and all its boards."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'organizations-id-members-idmember-all'."
]:
    """Remove a member from a Trello Workspace and all associated boards.

    This tool removes a specified member from a Trello Workspace and all boards within that Workspace. It should be called when you need to completely revoke a member's access to an entire Workspace and all its boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/members/{idMember}/all".format(  # noqa: UP032
                id=organization_identifier, idMember=member_id_to_remove
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_workspace_google_domain(
    context: ToolContext,
    organization_id: Annotated[
        str,
        "The ID or name of the Trello organization (Workspace) to remove the associated Google Apps domain.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'delete-organizations-id-prefs-associateddomain'.",
]:
    """Removes the associated Google Apps domain from a Workspace.

    Use this tool to delete the associated Google Apps domain from a specified Trello Workspace, identified by its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/prefs/associatedDomain".format(  # noqa: UP032
                id=organization_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def remove_email_domain_restriction(
    context: ToolContext,
    organization_id_or_name: Annotated[
        str,
        "The ID or name of the Trello organization where the email domain restriction will be removed.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'delete-organizations-id-prefs-orginviterestrict'.",
]:
    """Remove the email domain restriction for inviting to a Trello Workspace.

    Use this tool to lift the restriction on email domains for inviting members to a Trello Workspace. This can help when expanding team access."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/prefs/orgInviteRestrict".format(  # noqa: UP032
                id=organization_id_or_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_organization_tag(
    context: ToolContext,
    organization_identifier: Annotated[
        str, "The ID or name of the Trello organization from which the tag will be deleted."
    ],
    tag_id_to_delete: Annotated[str, "The ID of the Trello organization's tag to be deleted."],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-organizations-id-tags-idtag'."
]:
    """Delete a specific tag from a Trello organization.

    Use this tool to remove a tag from a Trello organization by specifying the organization and tag identifiers."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/tags/{idTag}".format(  # noqa: UP032
                id=organization_identifier, idTag=tag_id_to_delete
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def check_new_billable_guests_on_board(
    context: ToolContext,
    organization_id_or_name: Annotated[
        str, "The ID or name of the Trello organization to check for new billable guests."
    ],
    board_id: Annotated[str, "The ID of the Trello board to check for new billable guests."],
) -> Annotated[
    dict[str, Any],
    "Response from the API endpoint 'get-organizations-id-newbillableguests-idboard'.",
]:
    """Verify if a Trello board has new billable guests.

    This tool is used to determine whether a specified Trello board contains any new billable guests. It is helpful for managing billing and guest access on Trello boards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/organizations/{id}/newBillableGuests/{idBoard}".format(  # noqa: UP032
                id=organization_id_or_name, idBoard=board_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_plugin_by_id(
    context: ToolContext,
    organization_identifier: Annotated[
        str, "The Trello organization ID or name to retrieve plugin details for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-plugins-id'."]:
    """Retrieve information about a Trello plugin by ID.

    Use this tool to get detailed information about a specific Trello plugin using its ID. This can be helpful for understanding what the plugin does and its capabilities on the Trello platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/plugins/{id}/".format(id=organization_identifier),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_plugin(
    context: ToolContext,
    organization_identifier: Annotated[
        str, "The ID or name of the organization to update the plugin for in Trello."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-plugins-id'."]:
    """Update a Trello plugin with new information.

    Use this tool to update the details of a specific plugin in Trello by providing the plugin ID and new data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/plugins/{id}/".format(id=organization_identifier),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_plugin_member_privacy_compliance(
    context: ToolContext,
    plugin_power_up_id: Annotated[
        str, "The ID of the Trello Power-Up for which to retrieve member privacy compliance."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-plugins-id-compliance-memberprivacy'."
]:
    """Retrieve member privacy compliance for a Trello plugin.

    Use this tool to get information about the privacy compliance of members for a specific Trello plugin identified by its ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/plugins/{id}/compliance/memberPrivacy".format(  # noqa: UP032
                id=plugin_power_up_id
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_search(
    context: ToolContext,
    search_query: Annotated[
        str,
        "A search query string for finding items in Trello. Must be between 1 and 16,384 characters.",  # noqa: E501
    ],
    board_ids: Annotated[
        str | None,
        "Specify 'mine' to search your boards or provide a comma-separated list of specific Board IDs.",  # noqa: E501
    ] = None,
    organization_ids: Annotated[
        str | None, "A comma-separated list of Trello Organization IDs to narrow the search."
    ] = None,
    card_ids: Annotated[
        str | None,
        "A comma-separated list of Trello card IDs to specify which cards to search within.",
    ] = None,
    search_object_types: Annotated[
        str | None,
        "Specify the Trello object types to search. Use 'all' or list specific types like 'actions', 'boards', 'cards', 'members', 'organizations'.",  # noqa: E501
    ] = None,
    board_fields: Annotated[
        str | None,
        "Specify fields of boards to include in the search. Use 'all' or a comma-separated list of fields like 'closed', 'dateLastActivity', 'name', etc.",  # noqa: E501
    ] = None,
    maximum_boards_to_return: Annotated[
        int | None,
        "Specifies the maximum number of boards to return. The highest value allowed is 1000.",
    ] = None,
    card_fields_to_include: Annotated[
        str | None,
        "Comma-separated list of card fields to include, or 'all'. Options: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.",  # noqa: E501
    ] = None,
    maximum_cards_to_return: Annotated[
        int | None, "The maximum number of cards to return, with an upper limit of 1000."
    ] = None,
    cards_page_number: Annotated[
        float | None, "Specifies the page of card results to return, with a maximum limit of 100."
    ] = None,
    include_card_attachments: Annotated[
        str | None,
        "Specifies whether to include card attachment objects in the results. Accepts 'true', 'false', or 'cover' to include only cover attachments.",  # noqa: E501
    ] = None,
    organization_fields_to_include: Annotated[
        str | None,
        "Specify which fields of organizations to include: all or select fields like billableMemberCount, desc, etc.",  # noqa: E501
    ] = None,
    max_organizations_to_return: Annotated[
        int | None,
        "Specify the maximum number of Workspaces (organizations) to return, up to a maximum of 1000.",  # noqa: E501
    ] = None,
    member_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of member fields to include: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.",  # noqa: E501
    ] = None,
    maximum_members_returned: Annotated[
        int | None, "Specify the maximum number of members to return, with a maximum of 1000."
    ] = None,
    include_parent_organization_with_board_results: Annotated[
        bool | None, "Set to true to include the parent organization with board results."
    ] = None,
    include_parent_board_with_card_results: Annotated[
        bool | None, "Set to true to include the parent board with card results; false otherwise."
    ] = None,
    include_parent_list_with_card_results: Annotated[
        bool | None,
        "Set to true to include the parent list with card results, false to exclude it.",
    ] = None,
    include_card_members: Annotated[
        bool | None,
        "Set to true to include member objects with card results. Accepts a boolean value (true or false).",  # noqa: E501
    ] = None,
    include_card_stickers: Annotated[
        bool | None,
        "Set to true to include sticker objects with card results; false to exclude them.",
    ] = None,
    enable_partial_search: Annotated[
        bool | None,
        "Set to true to enable partial matching in search queries. Allows matching for words starting with a query term.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-search'."]:
    """Search for items in Trello.

    Use this tool to search for cards, boards, lists, and other items within Trello. It returns relevant search results based on the query provided."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/search",
            params=remove_none_values({
                "query": search_query,
                "idBoards": board_ids,
                "idOrganizations": organization_ids,
                "idCards": card_ids,
                "modelTypes": search_object_types,
                "board_fields": board_fields,
                "boards_limit": maximum_boards_to_return,
                "board_organization": include_parent_organization_with_board_results,
                "card_fields": card_fields_to_include,
                "cards_limit": maximum_cards_to_return,
                "cards_page": cards_page_number,
                "card_board": include_parent_board_with_card_results,
                "card_list": include_parent_list_with_card_results,
                "card_members": include_card_members,
                "card_stickers": include_card_stickers,
                "card_attachments": include_card_attachments,
                "organization_fields": organization_fields_to_include,
                "organizations_limit": max_organizations_to_return,
                "member_fields": member_fields,
                "members_limit": maximum_members_returned,
                "partial": enable_partial_search,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def search_trello_members(
    context: ToolContext,
    search_query: Annotated[
        str, "A search query string for Trello members, between 1 and 16384 characters long."
    ],
    maximum_results: Annotated[
        int | None, "The maximum number of Trello members to return, with a limit of 20."
    ] = None,
    board_id: Annotated[
        str | None,
        "The ID of the Trello board to search for members associated with it. Leave blank to search all boards.",  # noqa: E501
    ] = None,
    organization_id: Annotated[
        str | None,
        "The ID of the organization to filter members within. Use this to narrow search results to a specific organization.",  # noqa: E501
    ] = None,
    search_only_organization_members: Annotated[
        bool | None, "Set to true to restrict the search to members within the organization only."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-search-members'."]:
    """Search for Trello members by name or criteria.

    This tool searches for members in Trello based on specified criteria, such as their name or other member details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/search/members/",
            params=remove_none_values({
                "query": search_query,
                "limit": maximum_results,
                "idBoard": board_id,
                "idOrganization": organization_id,
                "onlyOrgMembers": search_only_organization_members,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_token_info(
    context: ToolContext,
    trello_token_value: Annotated[
        str,
        "The specific Trello token to retrieve information about. This is a string representing the token's unique identifier.",  # noqa: E501
    ],
    include_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of fields like 'dateCreated', 'dateExpires', 'idMember', 'identifier', 'permissions' to retrieve specific token information.",  # noqa: E501
    ] = None,
    include_webhooks: Annotated[
        bool | None, "Set to true to include webhooks in the token information."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-tokens-token'."]:
    """Retrieve information about a Trello token.

    Use this tool to get detailed information about a specific Trello token by providing the token value."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}".format(token=trello_token_value),  # noqa: UP032
            params=remove_none_values({
                "fields": include_fields,
                "webhooks": include_webhooks,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_token_owner_info(
    context: ToolContext,
    api_token: Annotated[
        str,
        "The API token associated with the Trello account. Use this to retrieve information about the token's owner.",  # noqa: E501
    ],
    member_info_fields: Annotated[
        str | None,
        "Specify 'all' or a comma-separated list of valid fields for the Member Object to retrieve specific information.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-tokens-token-member'."]:
    """Retrieve token owner information from Trello.

    Use this tool to get details about the owner of a Trello API token. This can be useful for verifying token ownership or understanding user-related details tied to a specific token."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/member".format(token=api_token),  # noqa: UP032
            params=remove_none_values({
                "fields": member_info_fields,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_webhooks(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-tokens-token-webhooks'."]:
    """Retrieve all webhooks created with a Trello token.

    Use this tool to fetch all webhooks associated with a specific Trello token. It should be called when you need to manage or analyze webhook data for a given token."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/webhooks",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_webhook(
    context: ToolContext,
    webhook_callback_url: Annotated[
        str,
        "The URL where the webhook will POST updates. Ensure this is a valid and reachable URL for receiving notifications.",  # noqa: E501
    ],
    object_id_for_webhook: Annotated[
        str, "The ID of the Trello object (like a board or card) for which to create a webhook."
    ],
    webhook_description: Annotated[
        str | None, "A brief description displayed when retrieving webhook information."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-tokens-token-webhooks'."]:
    """Create a new webhook for a Trello token.

    Use this tool to set up a new webhook associated with a specific Trello token. This is useful for receiving real-time updates or notifications related to Trello boards or cards linked to the token."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/webhooks",
            params=remove_none_values({
                "description": webhook_description,
                "callbackURL": webhook_callback_url,
                "idModel": object_id_for_webhook,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def retrieve_trello_webhook(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'get-tokens-token-webhooks-idwebhook'."
]:
    """Retrieve details of a specific Trello webhook using a token.

    This tool is used to fetch information about a specific webhook created in Trello using a token. It provides details about the configured webhook associated with the given token and webhook ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/webhooks/{idWebhook}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_delete_webhook(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'delete-tokens-token-webhooks-idwebhook'."
]:
    """Deletes a specified Trello webhook using the token and webhook ID.

    This tool removes a webhook in Trello created with the specified token and webhook ID. It should be called when you need to delete a webhook that is no longer needed or to manage webhook inventory."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/webhooks/{idWebhook}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_webhook(
    context: ToolContext,
    webhook_description: Annotated[
        str | None,
        "A string describing the webhook for display purposes. Used when retrieving webhook details.",  # noqa: E501
    ] = None,
    webhook_callback_url: Annotated[
        str | None,
        "The URL where the webhook will send POST requests. Must be a valid, accessible URL.",
    ] = None,
    webhook_target_object_id: Annotated[
        str | None, "The ID of the object the webhook is associated with on Trello."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'tokenstokenwebhooks-1'."]:
    """Update a Trello webhook using token authentication.

    Use this tool to update an existing Trello webhook by providing the token and webhook ID. Call this when adjustments to the webhook configuration are needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/webhooks/{idWebhook}",
            params=remove_none_values({
                "description": webhook_description,
                "callbackURL": webhook_callback_url,
                "idModel": webhook_target_object_id,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def trello_delete_token(
    context: ToolContext,
    authorization_token: Annotated[
        str,
        "The specific authorization token in Trello to be deleted. This should be a string value.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-token'."]:
    """Deletes an authorization token in Trello.

    Use this tool to delete a specific authorization token in Trello when access is no longer required. This helps maintain security and manage permissions effectively."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/tokens/{token}/".format(token=authorization_token),  # noqa: UP032
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def create_trello_webhook(
    context: ToolContext,
    webhook_callback_url: Annotated[
        str,
        "A valid URL that Trello can access with `HEAD` and `POST` requests. This is the endpoint where Trello will send webhook notifications.",  # noqa: E501
    ],
    model_id: Annotated[
        str, "The ID of the Trello model (board or card) to be monitored by the webhook."
    ],
    webhook_description: Annotated[
        str | None, "A string with a length from 0 to 16384 characters describing the webhook."
    ] = None,
    webhook_active: Annotated[
        bool | None,
        "Set to true if the webhook should be active and send POST requests; set to false to disable it.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'post-webhooks'."]:
    """Create a new webhook in Trello.

    This tool is used to create a new webhook on Trello. Use it when you need to set up a new webhook to track changes on Trello boards or cards."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/webhooks/",
            params=remove_none_values({
                "description": webhook_description,
                "callbackURL": webhook_callback_url,
                "idModel": model_id,
                "active": webhook_active,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="POST",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_webhook_by_id(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'get-webhooks-id'."]:
    """Fetch details of a specific Trello webhook using its ID.

    Call this tool to get information about a Trello webhook, using the specific webhook ID and authentication token. Useful for checking webhook configuration or status."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/webhooks/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def update_trello_webhook(
    context: ToolContext,
    webhook_description: Annotated[
        str | None,
        "A string description for the webhook, with a length from 0 to 16384 characters.",
    ] = None,
    callback_url: Annotated[
        str | None,
        "A valid URL that is reachable with a HEAD and POST request. This URL will be used as the callback for the webhook.",  # noqa: E501
    ] = None,
    model_id_to_monitor: Annotated[
        str | None,
        "The ID of the model that the webhook will monitor in Trello. Ensure this is the correct ID for accurate monitoring.",  # noqa: E501
    ] = None,
    is_webhook_active: Annotated[
        bool | None,
        "Set to true to make the webhook active, allowing it to send POST requests. False deactivates it.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'put-webhooks-id'."]:
    """Updates a Trello webhook using its ID.

    This tool updates an existing Trello webhook by its ID. It should be called when modifications to the webhook settings, such as the callback URL or description, are needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/webhooks/{id}",
            params=remove_none_values({
                "description": webhook_description,
                "callbackURL": callback_url,
                "idModel": model_id_to_monitor,
                "active": is_webhook_active,
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="PUT",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def delete_trello_webhook_by_id(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'delete-webhooks-id'."]:
    """Delete a specific webhook on Trello by its ID.

    This tool deletes a Trello webhook given its ID. Use it when you need to remove an outdated or unnecessary webhook from a Trello board."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/webhooks/{id}",
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="DELETE",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_secrets=["TRELLO_API_KEY", "TRELLO_TOKEN"])
async def get_trello_webhook_field(
    context: ToolContext,
    webhook_id: Annotated[
        str, "The unique identifier of the Trello webhook to retrieve information from."
    ],
    webhook_field_name: Annotated[
        str,
        "The specific field to retrieve from the Trello webhook. Options: 'active', 'callbackURL', 'description', 'idModel'.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'webhooksidfield'."]:
    """Retrieve a specific field of a Trello webhook.

    Use this tool to get the value of a specific field from a Trello webhook by providing the webhook ID and the field name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://api.trello.com/1/webhooks/{id}/{field}".format(  # noqa: UP032
                id=webhook_id, field=webhook_field_name
            ),
            params=remove_none_values({
                "key": context.get_secret("TRELLO_API_KEY"),
                "token": context.get_secret("TRELLO_TOKEN"),
            }),
            method="GET",
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}
