{
  "name": "ListZoomCloudRecordings",
  "fully_qualified_name": "ZoomMeetingsApi.ListZoomCloudRecordings@0.1.0",
  "description": "Retrieve a user's Zoom cloud recordings.\n\nThis tool retrieves all cloud recordings for a specified Zoom user. It requires a Pro plan or higher and cloud recording must be enabled on the user's account. Use the tool to list recordings by providing the user ID or 'me' for current user context. Access to passcode-protected recordings requires an OAuth access token.",
  "toolkit": {
    "name": "ArcadeZoomMeetingsApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "user_identifier",
        "required": true,
        "description": "The user's ID, email address, or 'me' for the current user context.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The user's ID or email address. For user-level apps, pass the `me` value."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "userId"
      },
      {
        "name": "records_per_page",
        "required": false,
        "description": "Specify the number of recordings to return in a single call. Adjust to limit response size.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The number of records returned within a single API call."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "page_size"
      },
      {
        "name": "pagination_next_page_token",
        "required": false,
        "description": "A token to paginate through large sets of results. It expires after 15 minutes.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "next_page_token"
      },
      {
        "name": "meeting_connector_metadata",
        "required": false,
        "description": "Metadata for recordings using an on-premise meeting connector.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The query metadata of the recording if using an on-premise meeting connector for the meeting."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "mc"
      },
      {
        "name": "start_date",
        "required": false,
        "description": "The start date in 'yyyy-mm-dd' UTC format for retrieving recordings. Must be within a month range. Defaults to current date if not specified. Note: Not applicable for trash files.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. \n\nFor example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`. \n\n**Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "from"
      },
      {
        "name": "end_date_utc",
        "required": false,
        "description": "The end date for retrieving recordings, in 'yyyy-mm-dd' UTC format.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. "
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "to"
      },
      {
        "name": "cloud_recording_trash_type",
        "required": false,
        "description": "Specify the type of cloud recording to retrieve from trash: 'meeting_recordings' for meeting recordings, 'recording_file' for individual files.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The type of cloud recording to retrieve from the trash. \n \n *   `meeting_recordings`: List all meeting recordings from the trash.  \n *  `recording_file`: List all individual recording files from the trash. "
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "trash_type"
      },
      {
        "name": "meeting_id",
        "required": false,
        "description": "The unique identifier for the Zoom meeting. Provide this to filter recordings by a specific meeting.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The meeting ID."
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "meeting_id"
      },
      {
        "name": "include_trash_recordings",
        "required": false,
        "description": "Set to true to include recordings from the trash. Defaults to false. Use trash_type for specific types.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The query trash.\n* `true` - List recordings from trash.  \n* `false` - Do not list recordings from the trash.  \n\nThe default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. "
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "trash"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'recordingsList'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": {
      "provider_id": "arcade-zoom",
      "provider_type": "oauth2",
      "id": null,
      "oauth2": {
        "scopes": [
          "cloud_recording:read:list_user_recordings:master",
          "cloud_recording:read:list_user_recordings:admin",
          "recording:read",
          "cloud_recording:read:list_user_recordings",
          "recording:read:admin"
        ]
      }
    },
    "secrets": null,
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.0.0",
    "description": "Tools that enable LLMs to interact directly with the Zoom Meetings API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.0.0",
      "description": ""
    },
    "url": "https://api.zoom.us/v2/users/{userId}/recordings",
    "http_method": "GET",
    "headers": {},
    "parameters": [
      {
        "name": "page_size",
        "tool_parameter_name": "records_per_page",
        "description": "The number of records returned within a single API call.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The number of records returned within a single API call."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "next_page_token",
        "tool_parameter_name": "pagination_next_page_token",
        "description": "The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "mc",
        "tool_parameter_name": "meeting_connector_metadata",
        "description": "The query metadata of the recording if using an on-premise meeting connector for the meeting.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The query metadata of the recording if using an on-premise meeting connector for the meeting."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "trash",
        "tool_parameter_name": "include_trash_recordings",
        "description": "The query trash.\n* `true` - List recordings from trash.  \n* `false` - Do not list recordings from the trash.  \n\nThe default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. ",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The query trash.\n* `true` - List recordings from trash.  \n* `false` - Do not list recordings from the trash.  \n\nThe default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. "
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "from",
        "tool_parameter_name": "start_date",
        "description": "The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. \n\nFor example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`. \n\n**Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The start date in 'yyyy-mm-dd' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date. \n\nFor example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of 'from' field will be `2020-06-30` and the value of the 'to' field will be `2020-07-01`. \n\n**Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "to",
        "tool_parameter_name": "end_date_utc",
        "description": "The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. ",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The end date in 'yyyy-mm-dd' 'yyyy-mm-dd' UTC format. "
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "trash_type",
        "tool_parameter_name": "cloud_recording_trash_type",
        "description": "The type of cloud recording to retrieve from the trash. \n \n *   `meeting_recordings`: List all meeting recordings from the trash.  \n *  `recording_file`: List all individual recording files from the trash. ",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The type of cloud recording to retrieve from the trash. \n \n *   `meeting_recordings`: List all meeting recordings from the trash.  \n *  `recording_file`: List all individual recording files from the trash. "
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "meeting_id",
        "tool_parameter_name": "meeting_id",
        "description": "The meeting ID.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The meeting ID."
        },
        "accepted_as": "query",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "userId",
        "tool_parameter_name": "user_identifier",
        "description": "The user's ID or email address. For user-level apps, pass the `me` value.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": "The user's ID or email address. For user-level apps, pass the `me` value."
        },
        "accepted_as": "path",
        "required": true,
        "deprecated": false,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "auth_token",
        "parameter_name": "Authorization",
        "accepted_as": "header",
        "formatted_value": "Bearer {authorization}",
        "description": "The OAuth token to use for authentication.",
        "is_auth_token": true
      }
    ]
  }
}
