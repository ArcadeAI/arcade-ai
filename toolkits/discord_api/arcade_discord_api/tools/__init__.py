"""API Wrapper Tools for discord

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED BY TRANSPILING THE API WRAPPER TOOL JSON DEFINITIONS
IN THE ../wrapper_tools DIRECTORY INTO PYTHON CODE. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Annotated, Any

import httpx

from arcade_tdk import tool, ToolContext
from arcade_tdk.auth import OAuth2


def remove_none_values(data: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in data.items() if v is not None}


@tool(
    requires_auth=OAuth2(
        id="arcade-discord",
        scopes=[
            "applications.builds.read",
            "identify",
            "guilds.members.read",
            "relationships.read",
            "rpc.voice.write",
            "rpc.voice.read",
            "connections",
            "email",
            "bot",
            "activities.write",
            "guilds.join",
            "rpc.screenshare.read",
            "voice",
            "applications.builds.upload",
            "applications.store.update",
            "applications.commands.permissions.update",
            "dm_channels.read",
            "messages.read",
            "rpc.video.write",
            "rpc.notifications.read",
            "gdm.join",
            "applications.entitlements",
            "activities.read",
            "applications.commands",
            "rpc",
            "rpc.screenshare.write",
            "guilds",
            "rpc.video.read",
            "rpc.activities.write",
            "webhook.incoming",
        ],
    ),
    requires_secrets=["DISCORD_AUTHORIZATION"],
)
async def get_discord_guild_member_info(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'getMyGuildMember'."]:
    """Retrieve guild member information for the user.

    Fetches the guild member details for the authenticated user from a specified guild on Discord. Useful for obtaining user-specific guild information."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://discord.com/api/v10/users/@me/guilds/{guild_id}/member",
            method="GET",
            headers=remove_none_values({
                "Authorization": context.get_secret("DISCORD_AUTHORIZATION"),
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(
    requires_auth=OAuth2(
        id="arcade-discord",
        scopes=[
            "applications.builds.read",
            "identify",
            "guilds.members.read",
            "relationships.read",
            "rpc.voice.write",
            "rpc.voice.read",
            "connections",
            "email",
            "bot",
            "activities.write",
            "guilds.join",
            "rpc.screenshare.read",
            "voice",
            "applications.builds.upload",
            "applications.store.update",
            "applications.commands.permissions.update",
            "dm_channels.read",
            "messages.read",
            "rpc.video.write",
            "rpc.notifications.read",
            "gdm.join",
            "applications.entitlements",
            "activities.read",
            "applications.commands",
            "rpc",
            "rpc.screenshare.write",
            "guilds",
            "rpc.video.read",
            "rpc.activities.write",
            "webhook.incoming",
        ],
    ),
    requires_secrets=["DISCORD_AUTHORIZATION"],
)
async def get_discord_app_user_role_connection(
    context: ToolContext,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'getApplicationUserRoleConnection'."
]:
    """Retrieve Discord app role connection data for a user.

    This tool should be called to fetch the role connection metadata for a user within a Discord application. It provides details on the user's role connection in the specified application."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://discord.com/api/v10/users/@me/applications/{application_id}/role-connection",
            method="GET",
            headers=remove_none_values({
                "Authorization": context.get_secret("DISCORD_AUTHORIZATION"),
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                ),
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}

