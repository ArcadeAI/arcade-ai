"""API Wrapper Tools for brex

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED BY TRANSPILING THE API WRAPPER TOOL JSON DEFINITIONS
IN THE ../wrapper_tools DIRECTORY INTO PYTHON CODE. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Annotated, Any

import httpx

from arcade_tdk import tool, ToolContext
from arcade_tdk.auth import OAuth2


def remove_none_values(data: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in data.items() if v is not None}


@tool(requires_auth=OAuth2(id="arcade-brex"))
async def get_posted_transactions(
    context: ToolContext,
    transaction_limit: Annotated[
        str | None,
        "Specifies the maximum number of transactions to retrieve. Must be a positive integer value.",  # noqa: E501
    ] = None,
    statement_identifier: Annotated[
        str | None,
        "Specify the statement ID to filter transactions associated with a particular statement. If not provided, it defaults to the latest statement.",  # noqa: E501
    ] = None,
    transaction_start_time: Annotated[
        str | None,
        "The start time for fetching transactions, formatted as an ISO 8601 date-time string.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'getTransactionsForAnAccount'."]:
    """Retrieve posted transactions for a specific account.

    This tool fetches posted transactions for an account, understanding the nuances of both pending and posted transactions, though it currently returns posted ones only. It's useful for tracking transaction history and account balances."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="{{api_url}}/accounts/{accountId}/transactions",
            params=remove_none_values({
                "limit": transaction_limit,
                "statement_id": statement_identifier,
                "start_time": transaction_start_time,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-brex"))
async def get_account_statements(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'getStatementsForAnAccount'."]:
    """Retrieve closed statements for a specific account.

    Fetches immutable closed statements for a given account, ordered by the end of the period, with the latest first. Open or mutable statements are not included."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="{{api_url}}/accounts/{accountId}/statements",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-brex"))
async def get_company_account_info(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'getInformationForAnAccount'."]:
    """Retrieve top-level information for a company's accounts.

    This tool provides a top-level view of a company's available accounts and should be called to access basic account information."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="{{api_url}}/accounts",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}

