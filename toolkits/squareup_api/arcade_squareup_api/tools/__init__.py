"""API Wrapper Tools for squareup

DO NOT EDIT THIS MODULE DIRECTLY.

THIS MODULE WAS AUTO-GENERATED BY TRANSPILING THE API WRAPPER TOOL JSON DEFINITIONS
IN THE ../wrapper_tools DIRECTORY INTO PYTHON CODE. ANY CHANGES TO THIS MODULE WILL
BE OVERWRITTEN BY THE TRANSPILER.
"""

from typing import Annotated, Any

import httpx
from arcade_tdk import ToolContext, tool
from arcade_tdk.auth import OAuth2


def remove_none_values(data: dict[str, Any]) -> dict[str, Any]:
    return {k: v for k, v in data.items() if v is not None}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def get_squareup_token_status(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveTokenStatus'."]:
    """Retrieve the status of a Square OAuth or personal access token.

    Use this tool to check the status of a Square OAuth access token or a personal access token. It helps in determining whether the token is valid or expired. Ensure that the token is added to the Authorization header as 'Bearer ACCESS_TOKEN'."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/oauth2/token/status",
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["BANK_ACCOUNTS_READ"]))
async def list_bank_accounts(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None, "Pagination cursor for retrieving the next set of bank account results."
    ] = None,
    bank_accounts_limit: Annotated[
        int | None, "Maximum number of bank accounts to return. Max value is 1000."
    ] = None,
    location_id: Annotated[
        str | None, "Optional filter to retrieve bank accounts for a specific location ID."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListBankAccounts'."]:
    """Retrieve a list of bank accounts linked to a Square account.

    Use this tool to fetch all bank accounts associated with a Square account. It returns information about each bank account."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bank-accounts",
            params=remove_none_values({
                "cursor": pagination_cursor,
                "limit": bank_accounts_limit,
                "location_id": location_id,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["BANK_ACCOUNTS_READ"]))
async def get_bank_account_details_by_v1_id(
    context: ToolContext,
    bank_account_v1_id: Annotated[
        str,
        "The Connect V1 ID of the desired BankAccount for retrieving details. Refer to the Squareup documentation for more details.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetBankAccountByV1Id'."]:
    """Retrieve bank account details using V1 ID.

    Call this tool to get detailed information about a bank account by providing its V1 ID. Useful for accessing account information in applications that previously used V1 identifiers."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bank-accounts/by-v1-id/{v1_bank_account_id}".format(  # noqa: UP032
                v1_bank_account_id=bank_account_v1_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["BANK_ACCOUNTS_READ"]))
async def get_bank_account_details(
    context: ToolContext,
    bank_account_id: Annotated[
        str, "Square-issued ID of the desired BankAccount to retrieve details for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetBankAccount'."]:
    """Retrieve details of a linked bank account from Square.

    This tool fetches and returns information about a specific bank account linked to a Square account, identified by the bank_account_id."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bank-accounts/{bank_account_id}".format(  # noqa: UP032
                bank_account_id=bank_account_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def retrieve_appointments(
    context: ToolContext,
    maximum_results_per_page: Annotated[
        int | None,
        "The maximum number of results per page to return in a paged response. Provide an integer value.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "The cursor for retrieving the next page of results. Leave empty to get the first page.",
    ] = None,
    customer_id: Annotated[
        str | None,
        "Specify the customer ID to retrieve bookings for that customer. Leave blank to retrieve bookings for all customers.",  # noqa: E501
    ] = None,
    team_member_identifier: Annotated[
        str | None,
        "The ID of the team member for whom to retrieve bookings. If not specified, retrieves bookings for all members.",  # noqa: E501
    ] = None,
    specific_location_id: Annotated[
        str | None,
        "The ID of the location for which to retrieve bookings. Leave unset to retrieve bookings from all locations.",  # noqa: E501
    ] = None,
    earliest_start_time: Annotated[
        str | None,
        "The earliest start time for bookings in RFC 3339 format. Defaults to current time if not set.",  # noqa: E501
    ] = None,
    latest_start_time: Annotated[
        str | None,
        "The latest start time in RFC 3339 format. Defaults to 31 days after start_at_min if not set.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListBookings'."]:
    """Fetch a collection of bookings from Squareup.

    Use this tool to retrieve a list of appointments. Ensure proper OAuth permissions are set for buyer-level or seller-level access."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings",
            params=remove_none_values({
                "limit": maximum_results_per_page,
                "cursor": pagination_cursor,
                "customer_id": customer_id,
                "team_member_id": team_member_identifier,
                "location_id": specific_location_id,
                "start_at_min": earliest_start_time,
                "start_at_max": latest_start_time,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_BUSINESS_SETTINGS_READ"]))
async def retrieve_business_booking_profile(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveBusinessBookingProfile'."]:
    """Retrieve a seller's booking profile.

    Use this tool to get the booking profile of a seller. It retrieves important details about the business's reservation capabilities and settings."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/business-booking-profile",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def list_booking_custom_attribute_definitions(
    context: ToolContext,
    maximum_results_per_page: Annotated[
        int | None,
        "The advisory maximum number of results in a single response. Accepts values from 1 to 100, defaulting to 20.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "Cursor from the previous response to access the next page of booking custom attribute results.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'ListBookingCustomAttributeDefinitions'."
]:
    """Retrieve all booking custom attribute definitions.

    This tool fetches all custom attribute definitions related to bookings. Use it to access or manage custom attributes in Square's booking system, with appropriate OAuth permissions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/custom-attribute-definitions",
            params=remove_none_values({
                "limit": maximum_results_per_page,
                "cursor": pagination_cursor,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_WRITE"]))
async def delete_booking_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str, "The unique key of the custom attribute definition to be deleted for a booking."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'DeleteBookingCustomAttributeDefinition'."
]:
    """Delete a booking's custom attribute definition.

    Use this tool to delete a specific custom attribute definition related to bookings. Ensure appropriate permissions are set: 'APPOINTMENTS_WRITE' for buyer-level or 'APPOINTMENTS_ALL_WRITE' and 'APPOINTMENTS_WRITE' for seller-level. Note, seller-level permissions require an Appointments Plus or Premium subscription."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def retrieve_booking_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute definition to retrieve. Use the qualified key if the application is not the definition owner.",  # noqa: E501
    ],
    custom_attribute_definition_version: Annotated[
        int | None,
        "Specifies the desired version of the booking's custom attribute definition for consistent reads. If higher than current, it triggers a `BAD_REQUEST` error.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveBookingCustomAttributeDefinition'."
]:
    """Retrieve a bookings custom attribute definition.

    Get details of a booking's custom attribute definition, requiring specific OAuth scopes for buyer or seller-level permissions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            params=remove_none_values({"version": custom_attribute_definition_version}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_BUSINESS_SETTINGS_READ"]))
async def list_location_booking_profiles(
    context: ToolContext,
    maximum_results_per_page: Annotated[
        int | None,
        "The maximum number of booking profiles to return in a single response. Use this to limit the size of the result set.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "Use this cursor to retrieve the next page of results. Leave it unset for the first page.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListLocationBookingProfiles'."]:
    """Retrieve booking profiles for seller locations.

    Use this tool to obtain a list of booking profiles associated with a seller's locations. This is useful for understanding the available booking configurations or schedules for different seller locations."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/location-booking-profiles",
            params=remove_none_values({
                "limit": maximum_results_per_page,
                "cursor": pagination_cursor,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_BUSINESS_SETTINGS_READ"]))
async def get_seller_location_booking_profile(
    context: ToolContext,
    location_id: Annotated[
        str,
        "The unique identifier of the seller's location for which the booking profile is being retrieved.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLocationBookingProfile'."]:
    """Retrieve a seller's location booking profile.

    Use this tool to obtain information about a seller's location booking profile, which includes details specific to the seller's location."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/location-booking-profiles/{location_id}".format(  # noqa: UP032
                location_id=location_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_BUSINESS_SETTINGS_READ"]))
async def list_booking_profiles(
    context: ToolContext,
    maximum_results_limit: Annotated[
        int | None,
        "The maximum number of results to return per page. Useful for controlling the number of records returned in a single API call.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None, "The cursor for retrieving the next page of results; omit for the first page."
    ] = None,
    filter_by_location_id: Annotated[
        str | None,
        "Filter results to include only team members at the specified location. Provide the location ID as a string.",  # noqa: E501
    ] = None,
    include_only_bookable_team_members: Annotated[
        bool | None,
        "Set to true to return only bookable team members, or false to include all team members.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListTeamMemberBookingProfiles'."]:
    """Retrieve booking profiles for team members.

    Use this tool to obtain a list of booking profiles for team members, which helps in managing scheduling and appointments."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/team-member-booking-profiles",
            params=remove_none_values({
                "bookable_only": include_only_bookable_team_members,
                "limit": maximum_results_limit,
                "cursor": pagination_cursor,
                "location_id": filter_by_location_id,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_BUSINESS_SETTINGS_READ"]))
async def get_team_member_booking_profile(
    context: ToolContext,
    team_member_id: Annotated[
        str, "The unique identifier for the team member whose booking profile is to be retrieved."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveTeamMemberBookingProfile'."
]:
    """Retrieve a team member's booking profile for bookings.

    Use this tool to get detailed information about a team member's booking profile, which includes their scheduling and booking preferences."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/team-member-booking-profiles/{team_member_id}".format(  # noqa: UP032
                team_member_id=team_member_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def retrieve_booking_details(
    context: ToolContext,
    booking_identifier: Annotated[str, "The unique ID of the booking to retrieve details for."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveBooking'."]:
    """Retrieve a booking's details using its ID.

    Use this tool to get details about a specific booking. This is essential for managing appointments and requires appropriate OAuth permissions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/{booking_id}".format(  # noqa: UP032
                booking_id=booking_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def list_booking_custom_attributes(
    context: ToolContext,
    target_booking_id: Annotated[
        str,
        "The unique identifier for the target booking for which custom attributes are being retrieved.",  # noqa: E501
    ],
    maximum_results_per_page: Annotated[
        int | None,
        "Advisory limit on the number of results to return in one page. Minimum is 1, maximum is 100, default is 20.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "The cursor for fetching the next page of results in a paged response. Use this from the last call to continue retrieving data.",  # noqa: E501
    ] = None,
    include_custom_attribute_definitions: Annotated[
        bool | None,
        "Set to true to include the custom attribute definitions such as name, description, and data type in each custom attribute. Defaults to false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListBookingCustomAttributes'."]:
    """Retrieve custom attributes for a specific booking.

    This tool retrieves custom attributes associated with a specific booking. Use it when you need details beyond standard booking information. Buyer-level or seller-level permissions may be required depending on access scope."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/{booking_id}/custom-attributes".format(  # noqa: UP032
                booking_id=target_booking_id
            ),
            params=remove_none_values({
                "limit": maximum_results_per_page,
                "cursor": pagination_cursor,
                "with_definitions": include_custom_attribute_definitions,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_WRITE"]))
async def delete_booking_custom_attribute(
    context: ToolContext,
    target_booking_id: Annotated[
        str, "The ID of the target booking from which the custom attribute will be deleted."
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute to delete. It must match the key of a custom attribute definition in the Square seller account, with a qualified key if not the definition owner.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteBookingCustomAttribute'."]:
    """Delete a custom attribute from a booking.

    Use this tool to delete a specific custom attribute from a booking. Ensure appropriate permissions (`APPOINTMENTS_WRITE` for buyer-level or `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for seller-level) are set. Requires seller subscription to Appointments Plus or Premium for seller-level operations."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/{booking_id}/custom-attributes/{key}".format(  # noqa: UP032
                booking_id=target_booking_id, key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["APPOINTMENTS_READ"]))
async def retrieve_booking_custom_attribute(
    context: ToolContext,
    booking_identifier: Annotated[
        str,
        "The unique identifier of the booking for which custom attributes are being retrieved. This ID is essential for accessing the booking's custom attribute data.",  # noqa: E501
    ],
    custom_attribute_key: Annotated[
        str,
        "The key for the custom attribute to retrieve. Must match a definition key in the seller account. Use a qualified key if not the definition owner.",  # noqa: E501
    ],
    custom_attribute_version: Annotated[
        int | None,
        "The current version of the custom attribute for consistent reads. Ensure it matches or is lower than what exists to avoid errors.",  # noqa: E501
    ] = None,
    include_custom_attribute_definition: Annotated[
        bool | None,
        "Set to true to include the custom attribute definition details, such as name, description, and data type, in the response. Defaults to false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveBookingCustomAttribute'."]:
    """Retrieve custom attributes for a specific booking.

    This tool is used to get custom attribute details for a specified booking. It requires specific OAuth permissions depending on whether buyer-level or seller-level access is needed. Ideal for retrieving personalized booking information based on unique attributes."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/bookings/{booking_id}/custom-attributes/{key}".format(  # noqa: UP032
                booking_id=booking_identifier, key=custom_attribute_key
            ),
            params=remove_none_values({
                "with_definition": include_custom_attribute_definition,
                "version": custom_attribute_version,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def retrieve_card_details(
    context: ToolContext,
    card_id: Annotated[
        str, "Unique identifier for the card to retrieve. Required to get specific card details."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCard'."]:
    """Retrieve details for a specific card.

    Use this tool to get information about a particular card using its card ID. Ideal for checking card details or verifying card information."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/cards/{card_id}".format(card_id=card_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def disable_credit_card(
    context: ToolContext,
    credit_card_id: Annotated[str, "Unique identifier for the credit card to be disabled."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DisableCard'."]:
    """Disable a credit card to prevent updates or charges.

    Use this tool to disable a specific card, stopping any further transactions or changes. Re-disabling an already inactive card is allowed and has no adverse effects."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/cards/{card_id}/disable".format(  # noqa: UP032
                card_id=credit_card_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CASH_DRAWER_READ"]))
async def retrieve_cash_drawer_shift(
    context: ToolContext,
    location_identifier: Annotated[
        str, "The unique identifier of the location to retrieve cash drawer shifts from."
    ],
    cash_drawer_shift_id: Annotated[
        str,
        "The ID of the cash drawer shift to retrieve details for. This ID uniquely identifies the shift.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCashDrawerShift'."]:
    """Retrieve summary details for a cash drawer shift.

    This tool provides summary details for a specific cash drawer shift using the shift ID. It's useful for obtaining an overview of a particular shift's data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/cash-drawers/shifts/{shift_id}".format(  # noqa: UP032
                shift_id=cash_drawer_shift_id
            ),
            params=remove_none_values({"location_id": location_identifier}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CASH_DRAWER_READ"]))
async def list_cash_drawer_shift_events(
    context: ToolContext,
    location_identifier: Annotated[
        str, "The unique identifier for the location to retrieve cash drawer shift events from."
    ],
    shift_id: Annotated[
        str,
        "The unique identifier of the specific cash drawer shift for which events are retrieved. This is required to specify which shift's events should be listed.",  # noqa: E501
    ],
    results_per_page: Annotated[
        int | None, "Specify the number of events to retrieve per page (200 default, 1000 max)."
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "An opaque string used to fetch the next page of results in a paginated response.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListCashDrawerShiftEvents'."]:
    """Retrieve events for a specific cash drawer shift.

    This tool provides a list of events related to a particular cash drawer shift, which can help in tracking transactions and activities during that shift."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/cash-drawers/shifts/{shift_id}/events".format(  # noqa: UP032
                shift_id=shift_id
            ),
            params=remove_none_values({
                "location_id": location_identifier,
                "limit": results_per_page,
                "cursor": pagination_cursor,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ITEMS_READ"]))
async def get_square_catalog_info(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CatalogInfo'."]:
    """Retrieve Square Catalog API information and limits.

    Call this tool to get details about the Square Catalog API, including batch size limits for operations like `BatchUpsertCatalogObjects`."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/catalog/info",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ITEMS_READ"]))
async def list_catalog_items(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None,
        "The pagination cursor for retrieving the next set of results. Leave empty for the initial request.",  # noqa: E501
    ] = None,
    catalog_object_types: Annotated[
        str | None,
        "A case-insensitive, comma-separated list of object types to retrieve. Valid values include ITEM, CATEGORY, TAX, DISCOUNT, etc. Defaults to all top-level types if unspecified.",  # noqa: E501
    ] = None,
    catalog_version_to_retrieve: Annotated[
        int | None,
        "The specific catalog version to be retrieved. Use an integer for historical versions. If not set, the current version is used.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListCatalog'."]:
    """Retrieve a list of catalog objects by specified types.

    Use this tool to get a list of catalog items such as items, variations, modifiers, and more. It does not include deleted items. For deleted items, use the SearchCatalogObjects tool with 'include_deleted_objects' set to true."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/catalog/list",
            params=remove_none_values({
                "cursor": pagination_cursor,
                "types": catalog_object_types,
                "catalog_version": catalog_version_to_retrieve,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ITEMS_WRITE"]))
async def delete_catalog_object(
    context: ToolContext,
    catalog_object_id_to_delete: Annotated[
        str,
        "The ID of the catalog object to be deleted. Deletion is cascading, affecting dependent objects like item variations.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteCatalogObject'."]:
    """Delete a catalog object and its children by ID.

    Use this tool to delete a specific catalog object by its ID. The deletion is cascading, meaning all child objects will be deleted as well. It's processed one at a time per seller account to maintain consistency."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/catalog/object/{object_id}".format(  # noqa: UP032
                object_id=catalog_object_id_to_delete
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ITEMS_READ"]))
async def retrieve_catalog_object(
    context: ToolContext,
    catalog_object_id: Annotated[
        str,
        "The unique identifier of the catalog object to retrieve, such as a CatalogItem or CatalogItemVariation.",  # noqa: E501
    ],
    catalog_version: Annotated[
        int | None,
        "Specify the catalog version as an integer to retrieve objects from a specific point in history. If not provided, the current version is used.",  # noqa: E501
    ] = None,
    include_related_objects: Annotated[
        bool | None,
        "Include related objects in the response when true. Useful for immediate display. Defaults to false.",  # noqa: E501
    ] = None,
    include_category_path_to_root: Annotated[
        bool | None,
        "Set to true to include the `path_to_root` list for each category. This path starts with the parent category and ends with the root. Omitted for top-level categories.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCatalogObject'."]:
    """Retrieve detailed information about a catalog item.

    Fetches a single catalog item as a catalog object using the provided ID, including item variations, modifier lists, and tax IDs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/catalog/object/{object_id}".format(  # noqa: UP032
                object_id=catalog_object_id
            ),
            params=remove_none_values({
                "include_related_objects": include_related_objects,
                "catalog_version": catalog_version,
                "include_category_path_to_root": include_category_path_to_root,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def list_customer_custom_attribute_definitions(
    context: ToolContext,
    max_results_per_page: Annotated[
        int | None,
        "Advisory maximum number of results to return per page. Allowed range is 1 to 100. Default is 20.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None, "The cursor from the previous response to retrieve the next page of results."
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'ListCustomerCustomAttributeDefinitions'."
]:
    """Retrieve customer custom attribute definitions for a Square seller account.

    Use this tool to list custom attribute definitions associated with a Square seller account. The response includes all visible custom attribute definitions, including those created by other applications, with either `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES` settings."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/custom-attribute-definitions",
            params=remove_none_values({"limit": max_results_per_page, "cursor": pagination_cursor}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def delete_customer_custom_attribute(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str, "The key of the custom attribute definition to delete from the Square seller account."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'DeleteCustomerCustomAttributeDefinition'."
]:
    """Deletes a customer custom attribute definition in Square.

    Use this tool to delete a specific customer-related custom attribute definition from a Square seller account. This action also removes the custom attribute from all customer profiles in the seller's directory. Only the owner of the definition can perform this deletion."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def retrieve_customer_attribute_definition(
    context: ToolContext,
    attribute_key: Annotated[
        str,
        "The key of the custom attribute definition to retrieve. Use the qualified key if not the definition owner.",  # noqa: E501
    ],
    custom_attribute_version: Annotated[
        int | None,
        "The version number of the custom attribute definition for consistent reads. Ensure it is not higher than the current version to avoid errors.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveCustomerCustomAttributeDefinition'."
]:
    """Retrieve customer custom attribute definition from Square.

    Fetches a custom attribute definition related to a customer from a Square seller account. It is used for accessing definitions that are either visibility 'read-only' or 'read-write-values'."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=attribute_key
            ),
            params=remove_none_values({"version": custom_attribute_version}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def list_customer_groups(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None, "A cursor returned by a previous call to retrieve the next set of results."
    ] = None,
    max_results_per_page: Annotated[
        int | None,
        "The maximum number of customer groups to return in a single page. Acceptable values range from 1 to 50.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListCustomerGroups'."]:
    """Retrieve the list of customer groups for a business.

    Use this tool to get the complete list of customer groups associated with a business. It is useful for identifying and managing different customer segments."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/groups",
            params=remove_none_values({"cursor": pagination_cursor, "limit": max_results_per_page}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def delete_customer_group(
    context: ToolContext,
    customer_group_id: Annotated[
        str,
        "The unique identifier of the customer group to be deleted. This ID is required to specify which group to remove.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteCustomerGroup'."]:
    """Deletes a customer group by its ID.

    Use this tool to delete a customer group from your database by specifying the group's unique ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/groups/{group_id}".format(  # noqa: UP032
                group_id=customer_group_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def retrieve_customer_group(
    context: ToolContext,
    customer_group_id: Annotated[
        str,
        "The unique identifier for the customer group to retrieve details for. This ID is used to specify which group you want to manage or analyze.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCustomerGroup'."]:
    """Retrieve details of a specific customer group from Square.

    Use this tool to obtain information about a specific customer group by providing the group's ID. This is helpful for managing customer segments and analyzing customer data."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/groups/{group_id}".format(  # noqa: UP032
                group_id=customer_group_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def list_customer_segments(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None,
        "A cursor from a previous `ListCustomerSegments` call for retrieving the next set of results.",  # noqa: E501
    ] = None,
    max_results_per_page: Annotated[
        int | None,
        "The maximum number of customer segments to return in a single page, between 1 and 50. Default is 50.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListCustomerSegments'."]:
    """Retrieve the list of customer segments for a business.

    Use this tool to get the list of customer segments associated with a business account. This is useful for managing and analyzing customer groups."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/segments",
            params=remove_none_values({"cursor": pagination_cursor, "limit": max_results_per_page}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def retrieve_customer_segment(
    context: ToolContext,
    customer_segment_id: Annotated[
        str, "The unique Square-issued ID of the customer segment to retrieve."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCustomerSegment'."]:
    """Retrieve a specific customer segment using its ID.

    Use this tool to fetch detailed information about a specific customer segment identified by its segment ID from the Squareup platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/segments/{segment_id}".format(  # noqa: UP032
                segment_id=customer_segment_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def delete_customer_profile(
    context: ToolContext,
    customer_id: Annotated[
        str,
        "The unique identifier of the customer profile to delete. Ensure this is accurate, especially if the profile was created by merging existing profiles.",  # noqa: E501
    ],
    customer_profile_version: Annotated[
        int | None,
        "The current version of the customer profile for optimistic concurrency control.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteCustomer'."]:
    """Deletes a customer profile from a business.

    Use this tool to remove a customer profile in Squareup. Ensure you have the profile ID, especially if it was created by merging existing profiles."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}".format(  # noqa: UP032
                customer_id=customer_id
            ),
            params=remove_none_values({"version": customer_profile_version}),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def get_customer_details(
    context: ToolContext,
    customer_id: Annotated[
        str, "The unique identifier of the customer whose details are to be retrieved."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCustomer'."]:
    """Retrieve details for a specific customer.

    This tool retrieves detailed information about a single customer using their customer ID. It should be called when you need to access specific customer details from the Squareup platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}".format(  # noqa: UP032
                customer_id=customer_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def list_customer_custom_attributes(
    context: ToolContext,
    customer_profile_id: Annotated[
        str,
        "The unique identifier of the target customer profile to retrieve custom attributes for.",
    ],
    maximum_results_per_page: Annotated[
        int | None,
        "Advisory limit for number of results in a response. Accepts values from 1 to 100, with a default of 20.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "The cursor for paginated responses. Use it to retrieve the next page of results from a previous request.",  # noqa: E501
    ] = None,
    include_custom_attribute_definitions: Annotated[
        bool | None,
        "Set to true to include custom attribute definitions in the response, such as name, description, and data type details. Defaults to false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListCustomerCustomAttributes'."]:
    """Retrieve custom attributes for a specific customer profile.

    This tool retrieves custom attributes associated with a customer profile. Use it to access all visible custom attributes, including those with read-only or read-write visibility. Can optionally retrieve attribute definitions as well."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}/custom-attributes".format(  # noqa: UP032
                customer_id=customer_profile_id
            ),
            params=remove_none_values({
                "limit": maximum_results_per_page,
                "cursor": pagination_cursor,
                "with_definitions": include_custom_attribute_definitions,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def remove_customer_custom_attribute(
    context: ToolContext,
    target_customer_id: Annotated[
        str, "The ID of the customer profile from which the custom attribute will be deleted."
    ],
    custom_attribute_key_to_delete: Annotated[
        str,
        "The key of the custom attribute to delete, matching the `key` in the Square seller account. Use a qualified key if not the definition owner.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteCustomerCustomAttribute'."]:
    """Delete a custom attribute from a customer profile.

    Removes a custom attribute associated with a customer profile. Use this to delete attributes, especially those with `VISIBILITY_READ_WRITE_VALUES` permissions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}/custom-attributes/{key}".format(  # noqa: UP032
                customer_id=target_customer_id, key=custom_attribute_key_to_delete
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_READ"]))
async def retrieve_customer_custom_attribute(
    context: ToolContext,
    customer_profile_id: Annotated[
        str,
        "The unique identifier of the target customer profile whose custom attribute is to be retrieved.",  # noqa: E501
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute to retrieve. It must match an existing custom attribute definition key in the Square seller account. Use a qualified key if not the definition owner.",  # noqa: E501
    ],
    attribute_version: Annotated[
        int | None,
        "Specify the version of the custom attribute for consistent data retrieval. Input a version number or omit for the latest version. If a higher version is entered than existing, a `BAD_REQUEST` error occurs.",  # noqa: E501
    ] = None,
    include_custom_attribute_definition: Annotated[
        bool | None,
        "Set to true to include the custom attribute definition in the response, providing additional details like name, description, and data type.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveCustomerCustomAttribute'."]:
    """Retrieve a custom attribute for a customer profile.

    This tool retrieves a custom attribute from a customer profile. Use it when you need to access customer-specific custom attributes. Optional retrieval of the attribute definition is supported. Visibility settings may affect access."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}/custom-attributes/{key}".format(  # noqa: UP032
                customer_id=customer_profile_id, key=custom_attribute_key
            ),
            params=remove_none_values({
                "with_definition": include_custom_attribute_definition,
                "version": attribute_version,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def remove_customer_group(
    context: ToolContext,
    customer_id: Annotated[
        str, "The unique identifier of the customer to be removed from the group."
    ],
    customer_group_id: Annotated[
        str,
        "The unique identifier for the customer group from which the customer should be removed.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RemoveGroupFromCustomer'."]:
    """Removes a customer from a specified group.

    Use this tool to remove a specified group membership from a customer by providing the customer's ID and the group's ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}/groups/{group_id}".format(  # noqa: UP032
                customer_id=customer_id, group_id=customer_group_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["CUSTOMERS_WRITE"]))
async def add_group_to_customer(
    context: ToolContext,
    customer_id: Annotated[
        str,
        "The unique identifier for the customer to add to a group. Ensure this is a valid customer ID in the system.",  # noqa: E501
    ],
    customer_group_id: Annotated[
        str,
        "The unique identifier for the customer group to which the customer will be added. This ID specifies the target group.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'AddGroupToCustomer'."]:
    """Adds a group membership to a specified customer.

    Use this tool to assign a group to a customer by providing the customer's ID and the group's ID. It should be called when you need to manage customer group memberships within the system."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/customers/{customer_id}/groups/{group_id}".format(  # noqa: UP032
                customer_id=customer_id, group_id=customer_group_id
            ),
            method="PUT",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DEVICE_CREDENTIAL_MANAGEMENT"]))
async def get_device_code(
    context: ToolContext,
    device_code_id: Annotated[
        str, "The unique identifier for the device code to retrieve its details."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetDeviceCode'."]:
    """Retrieve device code details using the associated ID.

    Use this tool to fetch details of a specific device code by providing its unique identifier."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/devices/codes/{id}".format(id=device_code_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DEVICES_READ"]))
async def retrieve_device_info(
    context: ToolContext,
    device_id_for_retrieval: Annotated[
        str,
        "The unique ID of the device to retrieve details for. This ID is essential for identifying the specific device.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetDevice'."]:
    """Retrieve information for a specific device by ID.

    Use this tool to get detailed information about a device using its `device_id`. This could include device status, configuration, or other relevant details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/devices/{device_id}".format(  # noqa: UP032
                device_id=device_id_for_retrieval
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_READ"]))
async def retrieve_dispute_details(
    context: ToolContext,
    dispute_id: Annotated[
        str,
        "The unique identifier for the dispute to retrieve details about. Required to fetch dispute information.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveDispute'."]:
    """Retrieve detailed information about a specific dispute.

    Use this tool to obtain comprehensive details about a specific dispute by providing the dispute ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}".format(  # noqa: UP032
                dispute_id=dispute_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_WRITE"]))
async def accept_dispute_loss(
    context: ToolContext,
    dispute_id: Annotated[
        str,
        "The unique identifier for the dispute that needs to be accepted. This ID is required to process the acceptance.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'AcceptDispute'."]:
    """Accepts the loss on a dispute and updates the dispute state to ACCEPTED.

    This tool should be called when a user needs to accept the financial loss on a dispute through Square. It processes the disputed amount back to the cardholder and updates the seller's account accordingly."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}/accept".format(  # noqa: UP032
                dispute_id=dispute_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_READ"]))
async def list_dispute_evidence(
    context: ToolContext,
    dispute_id: Annotated[str, "The ID of the dispute to retrieve associated evidence."],
    pagination_cursor: Annotated[
        str | None,
        "A string used to retrieve the next set of results for the original query. Utilized for pagination.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListDisputeEvidence'."]:
    """Retrieve evidence linked to a specific dispute.

    Use this tool to obtain a list of evidence related to a specific dispute by providing the dispute ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}/evidence".format(  # noqa: UP032
                dispute_id=dispute_id
            ),
            params=remove_none_values({"cursor": pagination_cursor}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_WRITE"]))
async def remove_dispute_evidence(
    context: ToolContext,
    dispute_identifier: Annotated[
        str, "The unique identifier for the dispute from which evidence should be removed."
    ],
    evidence_id_to_remove: Annotated[
        str,
        "The unique ID of the evidence to remove from the dispute. Ensure it is accurate to successfully remove the evidence.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteDisputeEvidence'."]:
    """Remove specified evidence from a dispute.

    Use this tool to remove evidence linked to a specific dispute. The evidence removed will not be sent to the bank by Square. Call this when evidence needs to be withdrawn or updated in a dispute case."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}/evidence/{evidence_id}".format(  # noqa: UP032
                dispute_id=dispute_identifier, evidence_id=evidence_id_to_remove
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_READ"]))
async def get_dispute_evidence_metadata(
    context: ToolContext,
    dispute_identifier: Annotated[
        str, "The unique identifier for the dispute to retrieve evidence metadata."
    ],
    evidence_id: Annotated[
        str, "The unique identifier for the evidence you want to retrieve metadata for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveDisputeEvidence'."]:
    """Retrieve metadata for specific dispute evidence.

    This tool retrieves the metadata for a specific piece of evidence related to a dispute using the dispute and evidence identifiers."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}/evidence/{evidence_id}".format(  # noqa: UP032
                dispute_id=dispute_identifier, evidence_id=evidence_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["DISPUTES_WRITE"]))
async def submit_dispute_evidence(
    context: ToolContext,
    dispute_id: Annotated[
        str, "The unique identifier of the dispute for which evidence is being submitted."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'SubmitEvidence'."]:
    """Submit evidence for disputes to the cardholder's bank.

    Use this tool to submit evidence related to a dispute to the cardholder's bank. This includes evidence uploaded through other endpoints and automatically provided evidence. Note that evidence cannot be removed once submitted."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/disputes/{dispute_id}/submit-evidence".format(  # noqa: UP032
                dispute_id=dispute_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def disable_events(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DisableEvents'."]:
    """Disable events to make them unsearchable.

    Use this tool to disable specific events, making them unsearchable. This is useful when you want to prevent events from being found during a specific time period. Disabled events remain unsearchable even if re-enabled later."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/events/disable",
            method="PUT",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def enable_searchable_events(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'EnableEvents'."]:
    """Enable events to be searchable within the platform.

    This tool activates event searchability, ensuring that only events occurring while enabled are searchable. It should be called when there's a need to make recent or ongoing events searchable in the system."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/events/enable",
            method="PUT",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def list_event_types(
    context: ToolContext,
    api_version_for_event_types: Annotated[
        str | None,
        "Specify the API version to list event types, overriding the application's default.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListEventTypes'."]:
    """Retrieve a list of event types for subscriptions or queries.

    Use this tool to obtain a list of all event types that can be subscribed to as webhooks or queried via the Events API."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/events/types",
            params=remove_none_values({"api_version": api_version_for_event_types}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["GIFTCARDS_READ"]))
async def list_gift_cards(
    context: ToolContext,
    gift_card_type: Annotated[
        str | None,
        "Specify the type of gift cards to retrieve. If not provided, all types are returned.",
    ] = None,
    gift_card_status: Annotated[
        str | None,
        "Specify the status of gift cards to filter results by their current state. If not provided, returns gift cards of all statuses.",  # noqa: E501
    ] = None,
    results_per_page_limit: Annotated[
        int | None,
        "Set the maximum number of results to return per page, up to 200. Defaults to 30 if not specified.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "A pagination cursor from a previous call. Use this to retrieve the next set of results. If omitted, returns the first page.",  # noqa: E501
    ] = None,
    filter_by_customer_id: Annotated[
        str | None, "Customer ID to filter and return only gift cards linked to this customer."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListGiftCards'."]:
    """Retrieve a list of all gift cards with optional filters.

    This tool calls the endpoint to list all gift cards, allowing you to apply optional filters to retrieve specific subsets. Gift cards are sorted by their creation date in ascending order."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/gift-cards",
            params=remove_none_values({
                "type": gift_card_type,
                "state": gift_card_status,
                "limit": results_per_page_limit,
                "cursor": pagination_cursor,
                "customer_id": filter_by_customer_id,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["GIFTCARDS_READ"]))
async def list_gift_card_activities(
    context: ToolContext,
    specific_gift_card_id: Annotated[
        str | None,
        "The ID of the gift card to filter activities for. If unspecified, returns all activities.",
    ] = None,
    gift_card_activity_type: Annotated[
        str | None,
        "Specifies the type of gift card activity to return. If not provided, returns all activity types.",  # noqa: E501
    ] = None,
    location_id: Annotated[
        str | None,
        "Specify a location ID to filter gift card activities by a particular location. If not provided, activities for all locations will be returned.",  # noqa: E501
    ] = None,
    report_starttime_rfc3339: Annotated[
        str | None,
        "The inclusive start time of the reporting period in RFC 3339 format. Defaults to one year ago.",  # noqa: E501
    ] = None,
    reporting_period_end_time: Annotated[
        str | None,
        "The inclusive timestamp for the end of the reporting period in RFC 3339 format. Defaults to the current time if not specified.",  # noqa: E501
    ] = None,
    results_limit_per_page: Annotated[
        int | None, "Specify the number of results per page, up to a maximum of 100. Default is 50."
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "The pagination cursor from a previous call to retrieve the next set of results. If not provided, the first page of results is returned.",  # noqa: E501
    ] = None,
    sort_order_by_creation_date: Annotated[
        str | None,
        "Order gift card activities by their creation date. Use 'ASC' for oldest to newest, or 'DESC' for newest to oldest (default).",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListGiftCardActivities'."]:
    """Retrieve a list of gift card activities with optional filters.

    Use this tool to list gift card activities in a seller's account. You can apply filters such as specifying a particular gift card, region, or time window to refine the search."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/gift-cards/activities",
            params=remove_none_values({
                "gift_card_id": specific_gift_card_id,
                "type": gift_card_activity_type,
                "location_id": location_id,
                "begin_time": report_starttime_rfc3339,
                "end_time": reporting_period_end_time,
                "limit": results_limit_per_page,
                "cursor": pagination_cursor,
                "sort_order": sort_order_by_creation_date,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["GIFTCARDS_READ"]))
async def retrieve_gift_card(
    context: ToolContext,
    gift_card_id: Annotated[str, "The unique identifier of the gift card to retrieve details for."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveGiftCard'."]:
    """Retrieve details of a gift card using its ID.

    Call this tool to obtain information about a specific gift card by providing its ID. It fetches details such as balance, card status, and any other relevant information related to the gift card."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/gift-cards/{id}".format(id=gift_card_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVENTORY_READ"]))
async def retrieve_inventory_adjustment(
    context: ToolContext,
    inventory_adjustment_id: Annotated[
        str,
        "ID of the inventory adjustment to retrieve details for. This should be a valid string ID.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveInventoryAdjustment'."]:
    """Retrieve inventory adjustment details using an ID.

    Call this tool to get detailed information about a specific inventory adjustment by providing the adjustment ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/inventory/adjustments/{adjustment_id}".format(  # noqa: UP032
                adjustment_id=inventory_adjustment_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVENTORY_READ"]))
async def get_inventory_physical_count(
    context: ToolContext,
    inventory_physical_count_id: Annotated[
        str, "The ID of the inventory physical count to be retrieved."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveInventoryPhysicalCount'."]:
    """Retrieve inventory physical count using a specific ID.

    Fetches the inventory physical count details by providing the `physical_count_id`. Use this when you need information about a specific inventory count."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/inventory/physical-counts/{physical_count_id}".format(  # noqa: UP032
                physical_count_id=inventory_physical_count_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVENTORY_READ"]))
async def get_inventory_transfer_details(
    context: ToolContext,
    inventory_transfer_id: Annotated[
        str,
        "The ID of the InventoryTransfer to retrieve details for. This ID uniquely identifies the transfer.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveInventoryTransfer'."]:
    """Fetch details of an InventoryTransfer by its ID.

    Call this tool to retrieve detailed information about a specific InventoryTransfer using its transfer ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/inventory/transfers/{transfer_id}".format(  # noqa: UP032
                transfer_id=inventory_transfer_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVENTORY_READ"]))
async def retrieve_inventory_count(
    context: ToolContext,
    catalog_object_id: Annotated[
        str, "The unique identifier for the catalog item whose stock count you want to retrieve."
    ],
    location_ids: Annotated[
        str | None,
        "Comma-separated list of Location IDs to retrieve inventory counts. Leave empty to query all locations.",  # noqa: E501
    ] = None,
    pagination_cursor: Annotated[
        str | None,
        "A string used for pagination to retrieve the next set of results for the original query.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveInventoryCount'."]:
    """Retrieve current stock count for specific catalog items.

    This tool retrieves the current calculated stock count for a specified CatalogObject at selected locations. Useful for checking inventory levels. Responses are paginated and unsorted."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/inventory/{catalog_object_id}".format(  # noqa: UP032
                catalog_object_id=catalog_object_id
            ),
            params=remove_none_values({"location_ids": location_ids, "cursor": pagination_cursor}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVOICES_READ"]))
async def list_invoices(
    context: ToolContext,
    location_identifier: Annotated[
        str,
        "The unique ID of the location to list invoices for. Specify the location to retrieve its invoices.",  # noqa: E501
    ],
    pagination_cursor: Annotated[
        str | None,
        "A pagination cursor from a prior call for retrieving the next set of results. Use this to navigate pages of invoices.",  # noqa: E501
    ] = None,
    maximum_invoices_to_return: Annotated[
        int | None,
        "The maximum number of invoices to return, up to 200. If not specified, defaults to 100.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListInvoices'."]:
    """Fetch a list of invoices for a specific location.

    Use this tool to retrieve a paginated list of invoices for a specific location. It returns invoice details and supports pagination with the use of a cursor for accessing subsequent pages."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/invoices",
            params=remove_none_values({
                "location_id": location_identifier,
                "cursor": pagination_cursor,
                "limit": maximum_invoices_to_return,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVOICES_WRITE", "ORDERS_WRITE"]))
async def delete_draft_invoice(
    context: ToolContext,
    invoice_identifier: Annotated[str, "The unique identifier of the draft invoice to be deleted."],
    invoice_version: Annotated[
        int | None,
        "The version number of the draft invoice to delete. Retrieve it via GetInvoice or ListInvoices if unknown.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteInvoice'."]:
    """Delete a specified draft invoice.

    This tool deletes a specified draft invoice, changing the associated order status to CANCELED. It cannot be used for published invoices, including those scheduled for processing."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/invoices/{invoice_id}".format(  # noqa: UP032
                invoice_id=invoice_identifier
            ),
            params=remove_none_values({"version": invoice_version}),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVOICES_READ"]))
async def retrieve_invoice_by_id(
    context: ToolContext,
    invoice_id: Annotated[
        str, "The unique identifier of the invoice you want to retrieve from Squareup."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetInvoice'."]:
    """Retrieve detailed information about a specific invoice by ID.

    Use this tool to fetch detailed information of an invoice using its unique ID. It is helpful for obtaining specific invoice details directly from the Squareup platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/invoices/{invoice_id}".format(  # noqa: UP032
                invoice_id=invoice_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["INVOICES_WRITE"]))
async def remove_invoice_attachment(
    context: ToolContext,
    invoice_id: Annotated[
        str,
        "The unique identifier of the invoice from which the attachment will be removed. It must be in 'DRAFT', 'SCHEDULED', 'UNPAID', or 'PARTIALLY_PAID' state.",  # noqa: E501
    ],
    attachment_id: Annotated[
        str,
        "The unique identifier of the attachment to be deleted from the invoice. This is required to locate and remove the specific file.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteInvoiceAttachment'."]:
    """Remove an attachment from an invoice and delete the file.

    This tool removes an attachment from an invoice and permanently deletes the file. It can be used only when the invoice is in 'DRAFT', 'SCHEDULED', 'UNPAID', or 'PARTIALLY_PAID' state."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/invoices/{invoice_id}/attachments/{attachment_id}".format(  # noqa: UP032
                invoice_id=invoice_id, attachment_id=attachment_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_SETTINGS_READ"]))
async def list_break_types(
    context: ToolContext,
    filter_by_location_id: Annotated[
        str | None,
        "Filter results to include only BreakType instances associated with a specific location.",
    ] = None,
    max_results_per_page: Annotated[
        int | None,
        "The maximum number of BreakType results to return per page. Accepts an integer from 1 to 200.",  # noqa: E501
    ] = None,
    next_page_pointer: Annotated[
        str | None,
        "A string pointer indicating the next page of BreakType results to fetch. Use this to paginate through results.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListBreakTypes'."]:
    """Retrieve a list of break types for a business.

    This tool retrieves a paginated list of `BreakType` instances for a business, allowing you to view defined break types for employees."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/break-types",
            params=remove_none_values({
                "location_id": filter_by_location_id,
                "limit": max_results_per_page,
                "cursor": next_page_pointer,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_SETTINGS_WRITE"]))
async def delete_break_type(
    context: ToolContext,
    break_type_uuid: Annotated[str, "The unique identifier (UUID) of the BreakType to be deleted."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteBreakType'."]:
    """Remove a specific break type from the system.

    This tool is used to delete an existing break type, even if it is referenced in a shift. It is useful for managing break type records within a labor management system."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/break-types/{id}".format(id=break_type_uuid),  # noqa: UP032
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_SETTINGS_READ"]))
async def get_break_type_info(
    context: ToolContext,
    break_type_uuid: Annotated[
        str,
        "The UUID of the BreakType to retrieve information for. This must be a valid, existing BreakType ID.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetBreakType'."]:
    """Retrieve detailed information about a specific BreakType.

    Use this tool to get information about a particular BreakType by providing the BreakType ID. It returns the details associated with that BreakType."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/break-types/{id}".format(id=break_type_uuid),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_READ"]))
async def retrieve_scheduled_shift(
    context: ToolContext,
    scheduled_shift_id: Annotated[
        str, "The ID of the scheduled shift to retrieve, required for fetching shift details."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveScheduledShift'."]:
    """Retrieve a scheduled shift using its ID.

    Use this tool to obtain details of a specific scheduled shift by providing its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/scheduled-shifts/{id}".format(  # noqa: UP032
                id=scheduled_shift_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def list_team_member_wages(
    context: ToolContext,
    filter_by_team_member_id: Annotated[
        str | None,
        "Filter returned wages to only those associated with the specified team member ID.",
    ] = None,
    max_results_per_page: Annotated[
        int | None,
        "Specify the maximum number of team member wage results to return per page (1-200, default is 200).",  # noqa: E501
    ] = None,
    next_page_pointer: Annotated[
        str | None,
        "A string that indicates the pointer to the next page of team member wage results to fetch. Use this to navigate through paginated results.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListTeamMemberWages'."]:
    """Get a list of team member wages for a business.

    This tool returns a paginated list of wage details for team members in a business. It should be called when you need to retrieve information about salaries or wages of employees."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/team-member-wages",
            params=remove_none_values({
                "team_member_id": filter_by_team_member_id,
                "limit": max_results_per_page,
                "cursor": next_page_pointer,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def get_team_member_wage(
    context: ToolContext,
    team_member_wage_id: Annotated[
        str, "The UUID of the Team Member Wage to retrieve details for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetTeamMemberWage'."]:
    """Retrieve wage details for a specific team member.

    Use this tool to get information about a team member's wage specified by their ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/team-member-wages/{id}".format(  # noqa: UP032
                id=team_member_wage_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_WRITE"]))
async def delete_timecard(
    context: ToolContext,
    timecard_uuid: Annotated[str, "The unique identifier (UUID) of the timecard to be deleted."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteTimecard'."]:
    """Delete a specific timecard.

    Use this tool to delete a specific timecard by providing the timecard ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/timecards/{id}".format(id=timecard_uuid),  # noqa: UP032
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_READ"]))
async def get_timecard_by_id(
    context: ToolContext,
    timecard_id: Annotated[
        str,
        "The UUID for the timecard being retrieved. This unique identifier specifies which timecard to return.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveTimecard'."]:
    """Retrieve details of a specific employee timecard by ID.

    Use this tool to obtain the details of a single timecard for an employee by providing the timecard ID. This is useful for viewing individual work records."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/timecards/{id}".format(id=timecard_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["TIMECARDS_SETTINGS_READ"]))
async def get_workweek_configs(
    context: ToolContext,
    results_per_page: Annotated[
        int | None, "Specify the maximum number of WorkweekConfig results to return per page."
    ] = None,
    pagination_pointer: Annotated[
        str | None, "A pointer to retrieve the next page of workweek configurations."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListWorkweekConfigs'."]:
    """Retrieve workweek configurations for a business.

    Use this tool to obtain a list of workweek configuration instances for a specified business."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/labor/workweek-configs",
            params=remove_none_values({"limit": results_per_page, "cursor": pagination_pointer}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def list_seller_locations(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListLocations'."]:
    """Get details about all of the seller's locations.

    This tool retrieves information on all locations associated with a seller, including those that are inactive. Locations are listed alphabetically by name."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_WRITE"]))
async def delete_location_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_definition_key: Annotated[
        str,
        "The unique key of the custom attribute definition to be deleted from the Square seller account.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'DeleteLocationCustomAttributeDefinition'."
]:
    """Delete a location's custom attribute definition in Square.

    Use this tool to delete a location-specific custom attribute definition from a Square seller account. This action removes the definition and its corresponding attributes from all locations. Only the definition owner is authorized to perform this deletion."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_definition_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def retrieve_location_custom_attribute(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute definition to retrieve. Use the qualified key if not the definition owner.",  # noqa: E501
    ],
    current_custom_attribute_version: Annotated[
        int | None,
        "The version number of the custom attribute definition for consistent reads, ensuring the most up-to-date data is retrieved.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveLocationCustomAttributeDefinition'."
]:
    """Retrieve a location-related custom attribute definition.

    Use this tool to get a location-related custom attribute definition from a Square seller account. The attribute must have a visibility of 'READ_ONLY' or 'READ_WRITE_VALUES' if created by another application."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            params=remove_none_values({"version": current_custom_attribute_version}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def retrieve_location_details(
    context: ToolContext,
    location_identifier: Annotated[
        str, "The ID of the location to retrieve. Use 'main' to get details of the main location."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLocation'."]:
    """Retrieve details of a specific location using location ID.

    Use this tool to get detailed information about a single location by providing its ID. Specify \"main\" as the location ID to get details of the main location."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations/{location_id}".format(  # noqa: UP032
                location_id=location_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_WRITE"]))
async def delete_location_custom_attribute(
    context: ToolContext,
    target_location_id: Annotated[
        str, "The ID of the location from which the custom attribute should be deleted."
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute to delete, matching the key of a custom attribute definition in the Square seller account. Use the qualified key if necessary.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteLocationCustomAttribute'."]:
    """Delete a custom attribute from a location.

    Removes a custom attribute associated with a location. Useful for managing custom data linked to specific locations. Make sure the attribute is deletable by confirming its visibility settings."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations/{location_id}/custom-attributes/{key}".format(  # noqa: UP032
                location_id=target_location_id, key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def get_location_custom_attribute(
    context: ToolContext,
    target_location_id: Annotated[
        str,
        "The unique identifier for the target location where the custom attribute is associated.",
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute to retrieve, matching the defined key in the Square seller account. Use the qualified key if not the definition owner.",  # noqa: E501
    ],
    custom_attribute_version: Annotated[
        int | None,
        "Current version of the custom attribute for consistent reads. Returns specified or higher version. Errors if specified version is too high.",  # noqa: E501
    ] = None,
    include_custom_attribute_definition: Annotated[
        bool | None,
        "Set this to true to include the custom attribute definition with details like name, description, and data type. Default is false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLocationCustomAttribute'."]:
    """Retrieve a custom attribute associated with a location.

    This tool retrieves a custom attribute linked to a specified location. It can also return the custom attribute definition if requested. Useful for accessing attributes with visibility settings of `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/locations/{location_id}/custom-attributes/{key}".format(  # noqa: UP032
                location_id=target_location_id, key=custom_attribute_key
            ),
            params=remove_none_values({
                "with_definition": include_custom_attribute_definition,
                "version": custom_attribute_version,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_READ"]))
async def retrieve_loyalty_account(
    context: ToolContext,
    loyalty_account_id: Annotated[
        str, "The unique identifier for the loyalty account to retrieve details for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLoyaltyAccount'."]:
    """Retrieve details of a specific loyalty account.

    This tool retrieves the details of a loyalty account using a specified account ID. It should be called when you need information about a customer's loyalty account."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/accounts/{account_id}".format(  # noqa: UP032
                account_id=loyalty_account_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_READ"]))
async def retrieve_loyalty_program(
    context: ToolContext,
    loyalty_program_identifier: Annotated[
        str,
        "The ID of the loyalty program or the keyword 'main' to retrieve the seller's loyalty program.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLoyaltyProgram'."]:
    """Retrieve details of a seller's loyalty program.

    This tool retrieves information about the loyalty program in a seller's account using the program ID or the keyword 'main'. It defines how buyers can earn and redeem points. Square sellers can only have one loyalty program, which is managed via the Seller Dashboard."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/programs/{program_id}".format(  # noqa: UP032
                program_id=loyalty_program_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_READ"]))
async def get_loyalty_promotion(
    context: ToolContext,
    loyalty_promotion_id: Annotated[
        str, "The unique identifier of the loyalty promotion to retrieve."
    ],
    loyalty_program_id: Annotated[
        str,
        "The ID of the base loyalty program. Obtain this by calling RetrieveLoyaltyProgram with the `main` keyword.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLoyaltyPromotion'."]:
    """Retrieve details of a specific loyalty promotion.

    Use this tool to get information about a particular loyalty promotion associated with a specific program. Ideal for checking promotion details by program and promotion IDs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/programs/{program_id}/promotions/{promotion_id}".format(  # noqa: UP032
                promotion_id=loyalty_promotion_id, program_id=loyalty_program_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_WRITE"]))
async def cancel_loyalty_promotion(
    context: ToolContext,
    loyalty_promotion_id: Annotated[
        str,
        "The ID of the loyalty promotion to cancel. Applicable for promotions with 'ACTIVE' or 'SCHEDULED' status.",  # noqa: E501
    ],
    loyalty_program_id: Annotated[
        str,
        "The ID of the base loyalty program to be canceled. This is required to identify the program associated with the promotion.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelLoyaltyPromotion'."]:
    """Cancel a scheduled or active loyalty promotion program early.

    This tool cancels a loyalty promotion, setting its status to 'CANCELED'. Use it to end an 'ACTIVE' or 'SCHEDULED' promotion earlier than the scheduled end date or when no end date is specified. It is also useful for canceling a promotion before creating a new one, as updates to promotions are not supported."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/programs/{program_id}/promotions/{promotion_id}/cancel".format(  # noqa: UP032
                promotion_id=loyalty_promotion_id, program_id=loyalty_program_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_WRITE"]))
async def delete_loyalty_reward(
    context: ToolContext,
    loyalty_reward_id: Annotated[
        str,
        "The unique ID of the loyalty reward to delete. This ID ensures the correct reward is identified and deleted.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteLoyaltyReward'."]:
    """Deletes a loyalty reward and adjusts points accordingly.

    This tool deletes a specified loyalty reward, returning the loyalty points back to the associated account. If an order ID was involved, it updates the order by removing the reward and related discounts. Note: Rewards in the 'REDEEMED' state cannot be deleted."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/rewards/{reward_id}".format(  # noqa: UP032
                reward_id=loyalty_reward_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["LOYALTY_READ"]))
async def retrieve_loyalty_reward(
    context: ToolContext,
    loyalty_reward_id: Annotated[str, "The unique identifier for the loyalty reward to retrieve."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLoyaltyReward'."]:
    """Retrieve details of a specific loyalty reward.

    Call this tool to get information about a specific loyalty reward using its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/loyalty/rewards/{reward_id}".format(  # noqa: UP032
                reward_id=loyalty_reward_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def get_merchant_details(
    context: ToolContext,
    pagination_cursor: Annotated[
        int | None,
        "An integer representing the pagination cursor from the previous response to navigate through results.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListMerchants'."]:
    """Retrieve merchant details using a given access token.

    This tool provides details about the merchant associated with a specific access token. It returns a list containing a single Merchant object, reflecting the merchant's details. Use it when you need merchant information linked to your access token."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants",
            params=remove_none_values({"cursor": pagination_cursor}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_WRITE"]))
async def delete_merchant_custom_attribute(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str, "The key of the custom attribute definition to delete from the Square seller account."
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'DeleteMerchantCustomAttributeDefinition'."
]:
    """Delete a custom attribute definition from a Square seller account.

    Use this tool to delete a merchant-related custom attribute definition in a Square seller account. Only the definition owner can perform this action, and it removes the corresponding custom attribute from the merchant."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def retrieve_merchant_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute definition to retrieve. Use the qualified key if not the definition owner.",  # noqa: E501
    ],
    custom_attribute_version: Annotated[
        int | None,
        "The current version of the custom attribute definition. Used for consistent reads to ensure up-to-date data. A higher version returns an error.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveMerchantCustomAttributeDefinition'."
]:
    """Retrieve a merchant's custom attribute definition.

    Call this to get details on a custom attribute definition from a Square seller account. Visibility must be set to either 'READ_ONLY' or 'READ_WRITE_VALUES' if created by another application."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            params=remove_none_values({"version": custom_attribute_version}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def get_merchant_info(
    context: ToolContext,
    merchant_identifier: Annotated[
        str,
        "The ID of the merchant to retrieve. Use 'me' to retrieve the currently accessible merchant.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveMerchant'."]:
    """Retrieve detailed information about a specific merchant.

    Use this tool to obtain the Merchant object for a given merchant ID, providing detailed information about the merchant."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants/{merchant_id}".format(  # noqa: UP032
                merchant_id=merchant_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_WRITE"]))
async def remove_merchant_custom_attribute(
    context: ToolContext,
    merchant_identifier: Annotated[
        str, "The ID of the target merchant for which the custom attribute will be deleted."
    ],
    custom_attribute_key_to_delete: Annotated[
        str,
        "The key of the custom attribute to delete, matching the attribute definition in the Square account. Use the qualified key if not the owner.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteMerchantCustomAttribute'."]:
    """Deletes a custom attribute from a merchant.

    Use this tool to delete a custom attribute associated with a merchant if the attribute's visibility is set to 'VISIBILITY_READ_WRITE_VALUES'."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants/{merchant_id}/custom-attributes/{key}".format(  # noqa: UP032
                merchant_id=merchant_identifier, key=custom_attribute_key_to_delete
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def get_merchant_custom_attribute(
    context: ToolContext,
    merchant_id: Annotated[
        str,
        "The identifier for the target merchant whose custom attribute is to be retrieved. This should match the merchant's ID in the Square system.",  # noqa: E501
    ],
    custom_attribute_key: Annotated[
        str,
        "The unique key of the custom attribute to retrieve, matching the attribute definition in Square. Use the qualified key if not the definition owner.",  # noqa: E501
    ],
    custom_attribute_version: Annotated[
        int | None,
        "The specific version of the custom attribute for consistent reads. Ensure it is up-to-date to avoid errors.",  # noqa: E501
    ] = None,
    include_attribute_definition: Annotated[
        bool | None,
        "Set to true to include the custom attribute definition in the response, providing details like name, description, and data type. Default is false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveMerchantCustomAttribute'."]:
    """Retrieve a custom attribute associated with a merchant.

    Use this tool to fetch a custom attribute linked to a merchant. You can specify if you want to include the attribute definition in the response. Note: To access attributes owned by another application, the visibility must allow it."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/merchants/{merchant_id}/custom-attributes/{key}".format(  # noqa: UP032
                merchant_id=merchant_id, key=custom_attribute_key
            ),
            params=remove_none_values({
                "with_definition": include_attribute_definition,
                "version": custom_attribute_version,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ"]))
async def get_square_checkout_settings(
    context: ToolContext,
    location_identifier: Annotated[
        str, "The unique identifier for the location to get checkout settings from."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveLocationSettings'."]:
    """Retrieve location settings for a Square checkout page.

    Use this tool to fetch the settings specific to a Square-hosted online checkout page for a given location. It provides details relevant to managing or displaying the checkout process."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/online-checkout/location-settings/{location_id}".format(  # noqa: UP032
                location_id=location_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(
    requires_auth=OAuth2(
        id="arcade-squareup", scopes=["MERCHANT_PROFILE_READ", "PAYMENT_METHODS_READ"]
    )
)
async def get_square_merchant_settings(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveMerchantSettings'."]:
    """Retrieve settings for a Square checkout page.

    Use this tool to get the merchant-level settings for a Square-hosted checkout page, providing essential details about the checkout setup."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/online-checkout/merchant-settings",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ"]))
async def list_payment_links(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None,
        "A pagination cursor from a previous call to fetch the next set of results. If not provided, returns the first page.",  # noqa: E501
    ] = None,
    results_per_page_limit: Annotated[
        int | None,
        "Sets the maximum number of payment links to return per page. Values exceeding 1000 or non-positive numbers are ignored. Defaults to 100.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListPaymentLinks'."]:
    """Retrieve all available payment links.

    Use this tool to list all the payment links created in the system."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/online-checkout/payment-links",
            params=remove_none_values({
                "cursor": pagination_cursor,
                "limit": results_per_page_limit,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ", "ORDERS_WRITE"]))
async def delete_payment_link(
    context: ToolContext,
    payment_link_id: Annotated[
        str, "The unique identifier of the payment link to delete. Required for removal operations."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeletePaymentLink'."]:
    """Deletes a specified payment link.

    Use this tool to delete an existing payment link when it is no longer needed or was created in error."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/online-checkout/payment-links/{id}".format(  # noqa: UP032
                id=payment_link_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ"]))
async def get_payment_link(
    context: ToolContext,
    payment_link_id: Annotated[
        str, "The unique identifier for the payment link you want to retrieve."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrievePaymentLink'."]:
    """Retrieve details of a specific payment link using its ID.

    Use this tool to get information about a particular payment link by providing its ID. This can be useful for tracking or verifying payment details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/online-checkout/payment-links/{id}".format(  # noqa: UP032
                id=payment_link_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_WRITE"]))
async def delete_order_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_key: Annotated[
        str,
        "The unique key identifying the custom attribute definition to delete from the Square seller account.",  # noqa: E501
    ],
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'DeleteOrderCustomAttributeDefinition'."
]:
    """Delete a custom attribute definition from a Square seller account.

    Use this tool to delete an order-related custom attribute definition from a Square seller account. Only the definition owner has the permission to perform this action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/orders/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ"]))
async def retrieve_order_custom_attribute_definition(
    context: ToolContext,
    custom_attribute_definition_key: Annotated[
        str,
        "The unique key for the custom attribute definition you want to retrieve from a Square seller account.",  # noqa: E501
    ],
    current_version_of_custom_attribute: Annotated[
        int | None,
        "Specify the current version of the custom attribute for optimistic concurrency control. This is optional.",  # noqa: E501
    ] = None,
) -> Annotated[
    dict[str, Any], "Response from the API endpoint 'RetrieveOrderCustomAttributeDefinition'."
]:
    """Retrieve an order's custom attribute definition from Square

    Fetches a custom attribute definition related to orders from a Square seller account. Use this to access definitions with `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`, including seller-defined attributes."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/orders/custom-attribute-definitions/{key}".format(  # noqa: UP032
                key=custom_attribute_definition_key
            ),
            params=remove_none_values({"version": current_version_of_custom_attribute}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ"]))
async def retrieve_order_by_id(
    context: ToolContext,
    order_id: Annotated[
        str,
        "The unique identifier for the order you want to retrieve. This ID is used to fetch the order details.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveOrder'."]:
    """Retrieve order details by order ID.

    Use this tool to get details of an order using its unique ID, helpful for viewing order status and specifics."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/orders/{order_id}".format(order_id=order_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_WRITE"]))
async def delete_order_custom_attribute(
    context: ToolContext,
    order_id: Annotated[
        str,
        "The unique identifier of the target order for which the custom attribute is to be deleted.",  # noqa: E501
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute you want to delete. It must match an existing custom attribute definition key.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteOrderCustomAttribute'."]:
    """Deletes a custom attribute from an order.

    Use this tool to delete a custom attribute associated with an order's profile. Ensure the attribute's visibility is set to allow deletion, specifically `VISIBILITY_READ_WRITE_VALUES`."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/orders/{order_id}/custom-attributes/{custom_attribute_key}".format(  # noqa: UP032
                order_id=order_id, custom_attribute_key=custom_attribute_key
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ORDERS_READ"]))
async def retrieve_order_custom_attribute(
    context: ToolContext,
    order_id: Annotated[
        str,
        "The unique identifier of the target order to retrieve the custom attribute from. This ID must correspond to an existing order in the system.",  # noqa: E501
    ],
    custom_attribute_key: Annotated[
        str,
        "The key of the custom attribute to retrieve. It must match an existing custom attribute definition key.",  # noqa: E501
    ],
    current_attribute_version: Annotated[
        int | None,
        "Specify the current version of the custom attribute for optimistic concurrency control. This is optional.",  # noqa: E501
    ] = None,
    include_custom_attribute_definition: Annotated[
        bool | None,
        "Set to true to include the custom attribute definition with details such as name, description, and data type. Default is false.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveOrderCustomAttribute'."]:
    """Retrieve a custom attribute for a specific order.

    Use this tool to obtain a custom attribute associated with an order. Supports retrieving the attribute definition if needed. Applicable when the custom attribute visibility is set appropriately."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/orders/{order_id}/custom-attributes/{custom_attribute_key}".format(  # noqa: UP032
                order_id=order_id, custom_attribute_key=custom_attribute_key
            ),
            params=remove_none_values({
                "version": current_attribute_version,
                "with_definition": include_custom_attribute_definition,
            }),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_READ"]))
async def retrieve_payment_details(
    context: ToolContext,
    payment_id: Annotated[
        str, "A unique identifier for the specific payment you want to retrieve details for."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetPayment'."]:
    """Retrieves details for a specific payment.

    Use this tool to obtain information about a specific payment by providing the payment ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/payments/{payment_id}".format(  # noqa: UP032
                payment_id=payment_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_WRITE"]))
async def cancel_payment(
    context: ToolContext,
    payment_id: Annotated[
        str,
        "The ID of the approved payment to cancel. This is required to identify which payment should be voided.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelPayment'."]:
    """Cancel an approved payment transaction.

    Use this tool to cancel a payment that is in the APPROVED status. It is useful for voiding payments that no longer need to be processed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/payments/{payment_id}/cancel".format(  # noqa: UP032
                payment_id=payment_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def retrieve_payout_details(
    context: ToolContext,
    payout_id: Annotated[
        str, "The unique identifier for the payout you want to retrieve details about."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetPayout'."]:
    """Retrieve details of a specific payout using its ID.

    Use this tool to get detailed information about a specific payout by providing the payout ID. This can be helpful to verify the status and details of transactions."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/payouts/{payout_id}".format(payout_id=payout_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_READ"]))
async def retrieve_refund_details(
    context: ToolContext,
    refund_id: Annotated[
        str, "A unique string representing the ID of the payment refund to retrieve."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetPaymentRefund'."]:
    """Retrieve details of a specific payment refund.

    Use this tool to get information about a specific refund using its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/refunds/{refund_id}".format(refund_id=refund_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ONLINE_STORE_SITE_READ"]))
async def list_square_merchant_sites(
    context: ToolContext,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListSites'."]:
    """Retrieve Square Online sites for a seller.

    Fetches a list of Square Online sites that belong to a seller, ordered by creation date. Useful for sellers wanting to view or manage their online presence."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/sites",
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ONLINE_STORE_SNIPPETS_WRITE"]))
async def delete_square_online_snippet(
    context: ToolContext,
    square_site_id: Annotated[
        str,
        "The unique ID of the Square Online site containing the snippet to be deleted. Ensure this ID is accurate to avoid unintended deletions.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteSnippet'."]:
    """Deletes a snippet from a Square Online site.

    Use this tool to remove a snippet from a specific Square Online site. It's useful when you want to update or clean up site content by eliminating unnecessary snippets. Ensure you have the correct site ID before proceeding."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/sites/{site_id}/snippet".format(  # noqa: UP032
                site_id=square_site_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["ONLINE_STORE_SNIPPETS_READ"]))
async def retrieve_online_site_snippet(
    context: ToolContext,
    site_id: Annotated[
        str,
        "The unique identifier of the site containing the snippet you want to retrieve. Use the ListSites tool to get site IDs if necessary.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveSnippet'."]:
    """Retrieve your application snippet from a Square Online site.

    Use this tool to get the snippet specifically added by your application on a Square Online site. Useful for managing and verifying application-specific snippets. Obtain site IDs with the ListSites tool if needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/sites/{site_id}/snippet".format(site_id=site_id),  # noqa: UP032
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["SUBSCRIPTIONS_READ"]))
async def get_subscription_details(
    context: ToolContext,
    subscription_id: Annotated[
        str,
        "The ID of the subscription to retrieve. Provide the unique identifier for the subscription you want details about.",  # noqa: E501
    ],
    include_subscription_details: Annotated[
        str | None,
        "Specify related info to include in the response. Use 'actions' to include scheduled actions.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveSubscription'."]:
    """Retrieve details of a specific subscription.

    Use this tool to get information about a particular subscription by providing its subscription ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/subscriptions/{subscription_id}".format(  # noqa: UP032
                subscription_id=subscription_id
            ),
            params=remove_none_values({"include": include_subscription_details}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["SUBSCRIPTIONS_WRITE"]))
async def delete_subscription_action(
    context: ToolContext,
    subscription_identifier: Annotated[
        str, "The unique ID of the subscription associated with the action you want to delete."
    ],
    targeted_action_id: Annotated[
        str,
        "The unique identifier for the action you want to delete from the subscription. This ID specifies the exact action you intend to remove.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteSubscriptionAction'."]:
    """Delete a scheduled action for a subscription.

    Call this tool to delete a scheduled action from a subscription identified by the specific subscription and action IDs."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/subscriptions/{subscription_id}/actions/{action_id}".format(  # noqa: UP032
                subscription_id=subscription_identifier, action_id=targeted_action_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["SUBSCRIPTIONS_WRITE"]))
async def cancel_subscription(
    context: ToolContext,
    subscription_id: Annotated[str, "The unique identifier of the subscription to be canceled."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelSubscription'."]:
    """Schedule the cancellation of an active subscription.

    This tool schedules a cancellation for an active subscription, changing its status from ACTIVE to CANCELED at the end of the current billing period."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/subscriptions/{subscription_id}/cancel".format(  # noqa: UP032
                subscription_id=subscription_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["SUBSCRIPTIONS_READ"]))
async def list_subscription_events(
    context: ToolContext,
    subscription_id: Annotated[
        str,
        "The unique identifier of the subscription for which you want to retrieve events. This ID is required to fetch the events.",  # noqa: E501
    ],
    pagination_cursor: Annotated[
        str | None,
        "Specify the cursor to fetch the next set of subscription events if the result exceeds the page limit. Leave unset for the last page.",  # noqa: E501
    ] = None,
    event_limit: Annotated[
        int | None, "The maximum number of subscription events to return in a single response."
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListSubscriptionEvents'."]:
    """Retrieve all events for a specific subscription.

    Use this tool to get a list of events related to a specific subscription. This can include actions such as subscriptions being created, updated, or canceled."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/subscriptions/{subscription_id}/events".format(  # noqa: UP032
                subscription_id=subscription_id
            ),
            params=remove_none_values({"cursor": pagination_cursor, "limit": event_limit}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def list_seller_jobs(
    context: ToolContext,
    pagination_cursor: Annotated[
        str | None,
        "The cursor for paginating results. Use this to retrieve the next page of job listings.",
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListJobs'."]:
    """Retrieve and list jobs in a seller account.

    This tool retrieves and lists jobs from a seller account, sorting the results by job title in ascending order. Use it to access information about available jobs associated with a seller."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/team-members/jobs",
            params=remove_none_values({"cursor": pagination_cursor}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def retrieve_job_details(
    context: ToolContext,
    job_identifier: Annotated[
        str, "The unique identifier of the job to retrieve. Provide this ID to get the job details."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveJob'."]:
    """Retrieve details of a specified job.

    Call this tool to obtain information about a job using its ID. Ideal for accessing job specifics and employment details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/team-members/jobs/{job_id}".format(  # noqa: UP032
                job_id=job_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def retrieve_team_member_info(
    context: ToolContext,
    team_member_id: Annotated[
        str, "The unique identifier for the team member whose details are to be retrieved."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveTeamMember'."]:
    """Retrieve detailed information for a specific team member.

    Use this tool to obtain information about a team member using their unique ID. Ideal for getting specific employee details from the Square API."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/team-members/{team_member_id}".format(  # noqa: UP032
                team_member_id=team_member_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["EMPLOYEES_READ"]))
async def retrieve_wage_setting(
    context: ToolContext,
    team_member_id: Annotated[
        str, "The unique identifier for the team member whose wage setting is to be retrieved."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveWageSetting'."]:
    """Retrieve wage settings for a specific team member.

    Use this tool to get detailed wage settings for a team member by their ID. It is useful for accessing wage data when managing team members."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/team-members/{team_member_id}/wage-setting".format(  # noqa: UP032
                team_member_id=team_member_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_READ"]))
async def get_terminal_action(
    context: ToolContext,
    terminal_action_id: Annotated[
        str,
        "Unique identifier for the Terminal action to retrieve. Must be a valid and existing action ID.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetTerminalAction'."]:
    """Retrieve a Terminal action by its action ID.

    Use this tool to retrieve details of a specific Terminal action request using its `action_id`. Terminal actions are available for retrieval for 30 days."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/actions/{action_id}".format(  # noqa: UP032
                action_id=terminal_action_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_WRITE"]))
async def cancel_terminal_action(
    context: ToolContext,
    terminal_action_id: Annotated[str, "Unique ID for the TerminalAction you wish to cancel."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelTerminalAction'."]:
    """Cancel a terminal action request if possible.

    Use this tool to cancel a terminal action request when its current status allows cancellation. Useful for halting actions that are no longer needed or were initiated in error."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/actions/{action_id}/cancel".format(  # noqa: UP032
                action_id=terminal_action_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def dismiss_terminal_action(
    context: ToolContext,
    terminal_action_id: Annotated[
        str,
        "Unique identifier for the TerminalAction to be dismissed. Ensure the ID is valid and corresponds to a dismissible request.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DismissTerminalAction'."]:
    """Dismiss a Terminal action request if permitted.

    Use this tool to dismiss a Terminal action request. This is applicable when the status and type of the request allow for dismissal. Refer to Square's documentation on linking and dismissing actions for further details."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/actions/{action_id}/dismiss".format(  # noqa: UP032
                action_id=terminal_action_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_READ"]))
async def retrieve_terminal_checkout(
    context: ToolContext,
    terminal_checkout_id: Annotated[
        str, "The unique ID for the desired Terminal checkout to retrieve details."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetTerminalCheckout'."]:
    """Retrieve details of a Terminal checkout by checkout ID.

    Use this tool to obtain information about a specific Terminal checkout request using its `checkout_id`. This information is accessible for up to 30 days after the request was made."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/checkouts/{checkout_id}".format(  # noqa: UP032
                checkout_id=terminal_checkout_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_WRITE"]))
async def cancel_terminal_checkout(
    context: ToolContext,
    terminal_checkout_id: Annotated[
        str, "The unique identifier for the Terminal checkout you wish to cancel."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelTerminalCheckout'."]:
    """Cancel a Terminal checkout request if feasible.

    This tool is used to cancel an ongoing Terminal checkout request, provided that the current status allows for cancellation. It should be called when a Terminal checkout needs to be halted due to changes in circumstances or errors in the checkout process."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/checkouts/{checkout_id}/cancel".format(  # noqa: UP032
                checkout_id=terminal_checkout_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def dismiss_terminal_checkout(
    context: ToolContext,
    terminal_checkout_id: Annotated[str, "Unique ID for the TerminalCheckout to be dismissed."],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DismissTerminalCheckout'."]:
    """Dismisses a Terminal checkout request if permitted.

    Call this tool to dismiss a Terminal checkout request, given that the status and type of the request allow for it. Use this to cancel ongoing checkout processes at the terminal if needed."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/checkouts/{checkout_id}/dismiss".format(  # noqa: UP032
                checkout_id=terminal_checkout_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_READ"]))
async def get_terminal_refund(
    context: ToolContext,
    terminal_refund_id: Annotated[
        str,
        "The unique identifier for retrieving a specific TerminalRefund. Required to access refund details.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'GetTerminalRefund'."]:
    """Retrieve a terminal refund by its ID.

    Retrieve details of an Interac Terminal refund using its ID. Useful for accessing refund information available for up to 30 days."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/refunds/{terminal_refund_id}".format(  # noqa: UP032
                terminal_refund_id=terminal_refund_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["PAYMENTS_WRITE"]))
async def cancel_terminal_refund(
    context: ToolContext,
    terminal_refund_unique_id: Annotated[
        str,
        "The ID of the terminal refund to be canceled. This must be a valid and unique identifier.",
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'CancelTerminalRefund'."]:
    """Cancel a terminal refund request if possible.

    Use this tool to cancel an Interac Terminal refund request by providing the refund request ID, given the request status allows it."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/refunds/{terminal_refund_id}/cancel".format(  # noqa: UP032
                terminal_refund_id=terminal_refund_unique_id
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def dismiss_terminal_refund(
    context: ToolContext,
    terminal_refund_identifier: Annotated[
        str, "Unique identifier for the TerminalRefund associated with the refund to be dismissed."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DismissTerminalRefund'."]:
    """Dismiss a Terminal refund request if eligible.

    This tool dismisses a Terminal refund request if the current status and type of the request permits such an action."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/terminals/refunds/{terminal_refund_id}/dismiss".format(  # noqa: UP032
                terminal_refund_id=terminal_refund_identifier
            ),
            method="POST",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup", scopes=["VENDOR_READ"]))
async def get_vendor_details(
    context: ToolContext,
    vendor_identifier: Annotated[
        str,
        "The unique ID of the vendor to retrieve details for. This is required to fetch vendor information.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveVendor'."]:
    """Fetches detailed information about a vendor by ID.

    Use this tool to retrieve comprehensive information about a specific vendor using their Vendor ID."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/vendors/{vendor_id}".format(  # noqa: UP032
                vendor_id=vendor_identifier
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def list_webhook_event_types(
    context: ToolContext,
    api_version: Annotated[
        str | None,
        "Specify the API version to list event types for. Overrides the application's default version.",  # noqa: E501
    ] = None,
) -> Annotated[dict[str, Any], "Response from the API endpoint 'ListWebhookEventTypes'."]:
    """Lists all webhook event types available for subscription.

    This tool retrieves a list of all webhook event types that can be subscribed to, allowing users to understand which events they can monitor via webhooks."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/webhooks/event-types",
            params=remove_none_values({"api_version": api_version}),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def delete_webhook_subscription(
    context: ToolContext,
    webhook_subscription_id: Annotated[
        str,
        "The ID of the webhook subscription to be deleted. This ID is required to specify which subscription should be removed.",  # noqa: E501
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'DeleteWebhookSubscription'."]:
    """Deletes a webhook subscription.

    Use this tool to delete a specific webhook subscription by providing its subscription ID. This is useful for managing and stopping unwanted notifications from the Square platform."""  # noqa: E501
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/webhooks/subscriptions/{subscription_id}".format(  # noqa: UP032
                subscription_id=webhook_subscription_id
            ),
            method="DELETE",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}


@tool(requires_auth=OAuth2(id="arcade-squareup"))
async def retrieve_webhook_subscription(
    context: ToolContext,
    webhook_subscription_id: Annotated[
        str, "The unique identifier of the webhook subscription to retrieve. This ID is required."
    ],
) -> Annotated[dict[str, Any], "Response from the API endpoint 'RetrieveWebhookSubscription'."]:
    """Retrieve details of a webhook subscription by ID.

    Use this tool to get the details of a specific webhook subscription by providing its ID."""
    async with httpx.AsyncClient() as client:
        response = await client.request(
            url="https://connect.squareup.com/v2/webhooks/subscriptions/{subscription_id}".format(  # noqa: UP032
                subscription_id=webhook_subscription_id
            ),
            method="GET",
            headers=remove_none_values({
                "Authorization": "Bearer {authorization}".format(  # noqa: UP032
                    authorization=context.get_auth_token_or_empty()
                )
            }),
        )
        response.raise_for_status()
        try:
            return {"response_json": response.json()}
        except Exception:
            return {"response_text": response.text}
