{
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.0.0"
  },
  "name": "ScheduleSlackMessage",
  "fully_qualified_name": "SlackApi.ScheduleSlackMessage@0.1.0",
  "description": "Schedule a message to be sent later in Slack.\n\nThis tool schedules a message to be sent to a specific Slack channel at a designated future time. It utilizes the Slack API endpoint 'chat.scheduleMessage' and requires the 'chat:write' OAuth scope.",
  "toolkit": {
    "name": "ArcadeSlackApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "slack_channel_id_or_name",
        "required": true,
        "description": "Specify the target Slack channel, private group, or DM. Use an encoded ID or the channel name. Retrieve channel ID via `conversations.list`.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "channel"
      },
      {
        "name": "schedule_time_unix_timestamp",
        "required": true,
        "description": "Unix timestamp for when the message should be posted to Slack. Must be within 120 days and not exceed 30 messages per 5-minute window.",
        "value_schema": {
          "val_type": "integer",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "post_at"
      },
      {
        "name": "attachments_json",
        "required": false,
        "description": "A JSON array of structured attachments as a URL-encoded string for the Slack message.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": "string",
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "attachments"
      },
      {
        "name": "structured_blocks_json",
        "required": false,
        "description": "A URL-encoded string of a JSON-based array containing structured blocks for message formatting.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": "string",
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "blocks"
      },
      {
        "name": "message_markdown",
        "required": false,
        "description": "Message text in markdown format. Avoid using with 'blocks' or 'text'. Maximum 12,000 characters.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "markdown_text"
      },
      {
        "name": "message_parsing_mode",
        "required": false,
        "description": "Specifies how the message content should be parsed and interpreted when sending to Slack. For more details, refer to chat.postMessage documentation.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "parse"
      },
      {
        "name": "message_text",
        "required": false,
        "description": "The main body of the Slack message or a fallback text when using blocks. Can be plain text or formatted with mrkdwn.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "text"
      },
      {
        "name": "parent_message_timestamp",
        "required": false,
        "description": "Timestamp of the parent message to which this message is a reply. Use the original message's timestamp, not a reply's timestamp.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "thread_ts"
      },
      {
        "name": "metadata_json",
        "required": false,
        "description": "JSON object containing 'event_type' and 'event_payload' fields. Must be URL-encoded. Note: using this will prevent scheduled messages from posting.",
        "value_schema": {
          "val_type": "string",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "metadata"
      },
      {
        "name": "enable_group_linking",
        "required": false,
        "description": "Set to true to link user groups in the message. Linking individual users is not supported; use mention syntax instead.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "link_names"
      },
      {
        "name": "make_reply_visible_to_everyone",
        "required": false,
        "description": "Set to true to make the reply visible to everyone in the channel or conversation. Use with `thread_ts`. Defaults to false.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "reply_broadcast"
      },
      {
        "name": "enable_link_unfurling",
        "required": false,
        "description": "Pass true to enable unfurling of primarily text-based content.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "unfurl_links"
      },
      {
        "name": "disable_unfurling_of_media_content",
        "required": false,
        "description": "Set to true to disable unfurling of media content. Defaults to false.",
        "value_schema": {
          "val_type": "boolean",
          "inner_val_type": null,
          "enum": null,
          "properties": null,
          "inner_properties": null,
          "description": null
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "unfurl_media"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'chat.scheduleMessage'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": {
      "provider_id": "slack",
      "provider_type": "oauth2",
      "id": null,
      "oauth2": {
        "scopes": [
          "chat:write"
        ]
      }
    },
    "secrets": null,
    "metadata": null
  },
  "deprecation_message": null,
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.0.0",
      "description": ""
    },
    "url": "https://slack.com/api/chat.scheduleMessage",
    "http_method": "POST",
    "headers": {
      "Content-Type": "application/x-www-form-urlencoded",
      "Authorization": "Bearer {auth_token}"
    },
    "parameters": [
      {
        "name": "auth_token",
        "description": "The OAuth token to use for authentication.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "header",
        "required": true,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "channel",
        "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": true,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "post_at",
        "description": "Unix timestamp representing the future time the message should post to Slack.",
        "value_schema": {
          "val_type": "integer",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": true,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "as_user",
        "description": "Set to `true` to post the message as the authed user, instead of as a bot. Defaults to false. Cannot be used by new Slack apps.",
        "value_schema": {
          "val_type": "boolean",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": true,
        "documentation_urls": []
      },
      {
        "name": "attachments",
        "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": "string"
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "blocks",
        "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": "string"
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "link_names",
        "description": "Find and link user groups. No longer supports linking individual users; use syntax shown in Mentioning Users instead.",
        "value_schema": {
          "val_type": "boolean",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "markdown_text",
        "description": "Accepts message text formatted in markdown. This argument should not be used in conjunction with `blocks` or `text`. Limit this field to 12,000 characters.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "parse",
        "description": "Change how messages are treated. See chat.postMessage for more details.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "reply_broadcast",
        "description": "Indicates whether reply should be made visible to everyone in the channel or conversation. Used in conjunction with `thread_ts`.",
        "value_schema": {
          "val_type": "boolean",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "text",
        "description": "How this field works and whether it is required depends on other fields you use in your API call. If using blocks, this is used as a fallback string to display in notifications. If not using blocks, this is the main body text of the message. It can be formatted as plain text or with `mrkdwn`.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "thread_ts",
        "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "unfurl_links",
        "description": "Pass true to enable unfurling of primarily text-based content.",
        "value_schema": {
          "val_type": "boolean",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "unfurl_media",
        "description": "Pass false to disable unfurling of media content.",
        "value_schema": {
          "val_type": "boolean",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      },
      {
        "name": "metadata",
        "description": "JSON object with event_type and event_payload fields, presented as a URL-encoded string. Metadata you post to Slack is accessible to any app or user who is a member of that workspace.",
        "value_schema": {
          "val_type": "string",
          "array_inner_val_type": null
        },
        "accepted_as": "body",
        "required": false,
        "deprecated": false,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [
      "https://docs.slack.dev/reference/methods/chat.schedulemessage"
    ]
  }
}