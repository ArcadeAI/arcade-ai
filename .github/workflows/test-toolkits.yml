name: Test Toolkits

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tool_matrix: ${{ steps.get-toolkits.outputs.toolkits }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Get toolkits
        id: get-toolkits
        run: |
          # Find all directories in toolkits/ that have a pyproject.toml
          TOOLKITS=$(find toolkits -maxdepth 1 -type d -not -name "toolkits" -exec test -f {}/pyproject.toml \; -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
          echo "Found toolkits: $TOOLKITS"
          echo "toolkits=$TOOLKITS" >> $GITHUB_OUTPUT

  test-toolkits:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolkit: ${{ fromJson(needs.setup.outputs.tool_matrix) }}
      fail-fast: false
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up the environment
        uses: ./.github/actions/setup-uv-env

      - name: Install toolkit dependencies
        working-directory: toolkits/${{ matrix.toolkit }}
        run: uv pip install -e ".[dev]"

      - name: Check toolkit
        working-directory: toolkits/${{ matrix.toolkit }}
        run: |
          uv run --active pre-commit run -a
          uv run --active mypy --config-file=pyproject.toml

      - name: Define toolkits that require secrets
        id: toolkits_with_secrets
        run: |
          echo "toolkits_with_secrets=$(grep -rl 'arcade-ci:requires-secret' toolkits/* | cut -d'/' -f2 | sort -u | tr '\n' ' ')" >> $GITHUB_OUTPUT        run: |
          echo "toolkits_with_secrets: ${{ needs.toolkits_with_secrets.outputs.toolkits_with_secrets }}"

      - name: Test toolkit stand-alone toolkits
        working-directory: toolkits/${{ matrix.toolkit }}
        if: |
          !contains(needs.toolkits_with_secrets.outputs.toolkits_with_secrets , matrix.toolkit)
        run: |
          # Run pytest and capture exit code
          uv run --active pytest -W ignore -v --cov=arcade_${{ matrix.toolkit }} --cov-report=xml || EXIT_CODE=$?

          if [ "${EXIT_CODE:-0}" -eq 5 ]; then
            echo "No tests found for toolkit ${{ matrix.toolkit }}, skipping..."
            exit 0
          elif [ "${EXIT_CODE:-0}" -ne 0 ]; then
            exit ${EXIT_CODE}
          fi

      - name: Test toolkits that require secrets
        if: |
          contains(needs.toolkits_with_secrets.outputs.toolkits_with_secrets, matrix.toolkit) &&
          github.repository == 'arcade-ai/arcade-ai'
        working-directory: toolkits/${{ matrix.toolkit }}
        env:
          # TODO: dynamically only load the `TEST_${{ matrix.toolkit }}_DATABASE_CONNECTION_STRING secret`
          TEST_POSTGRES_DATABASE_CONNECTION_STRING: ${{ secrets.TEST_POSTGRES_DATABASE_CONNECTION_STRING }}
        run: |
          # Run pytest and capture exit code
          uv run --active pytest -W ignore -v --cov=arcade_${{ matrix.toolkit }} --cov-report=xml || EXIT_CODE=$?

          if [ "${EXIT_CODE:-0}" -eq 5 ]; then
            echo "No tests found for toolkit ${{ matrix.toolkit }}, skipping..."
            exit 0
          elif [ "${EXIT_CODE:-0}" -ne 0 ]; then
            exit ${EXIT_CODE}
          fi
